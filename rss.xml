<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://maijunxuan.cn/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://maijunxuan.cn/rss.xml" rel="self" type="application/rss+xml"/>
    <title>麦俊轩的博客</title>
    <link>https://maijunxuan.cn/</link>
    <description>记录我学习的过程</description>
    <language>zh-CN</language>
    <pubDate>Tue, 13 Feb 2024 08:30:57 GMT</pubDate>
    <lastBuildDate>Tue, 13 Feb 2024 08:30:57 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <item>
      <title>对支付系统的个人理解</title>
      <link>https://maijunxuan.cn/%E4%B8%9A%E5%8A%A1%E7%90%86%E8%A7%A3/%E5%AF%B9%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3.html</link>
      <guid>https://maijunxuan.cn/%E4%B8%9A%E5%8A%A1%E7%90%86%E8%A7%A3/%E5%AF%B9%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">对支付系统的个人理解</source>
      <description>对支付系统的个人理解 常用支付形式 平台支付 用户提前注册并登录到第三方支付平台，并且已经在该平台上完成绑卡等操作后，通过第三方支付平台进行支付。 网银支付 用户在完成必要的银行网银开通手续后，可以通过银行的网银系统进行在线支付和转账。在进行网银支付时，用户需要登录银行网银系统，输入相应的支付信息并进行身份验证，然后可以完成在线支付交易，移动互联网时代...</description>
      <pubDate>Mon, 12 Feb 2024 13:57:05 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>常用支付形式</h2>
<h3>平台支付</h3>
<p>用户提前注册并登录到第三方支付平台，并且已经在该平台上完成绑卡等操作后，通过第三方支付平台进行支付。</p>
<h3>网银支付</h3>
<p>用户在完成必要的银行网银开通手续后，可以通过银行的网银系统进行在线支付和转账。在进行网银支付时，用户需要登录银行网银系统，输入相应的支付信息并进行身份验证，然后可以完成在线支付交易，移动互联网时代较为少用。</p>
<h3>快捷支付</h3>
<p>一种简化了支付流程的支付方式。通常情况下，用户在首次支付时需要绑定银行卡或者进行一次认证，之后就可以使用该支付方式来完成交易，无需重复输入银行卡信息或进行繁琐的身份验证。在后续的支付过程中，用户只需进行简单的确认操作或者输入支付密码，就能够快速完成交易。</p>
<h3>虚拟货币支付</h3>
<p>不少公司会有自己的虚拟币，这些虚币也可以作为一种支付方式。一般会有一些金额、品类的限制，如虚拟支付不得超过每笔订单结算金额的 50%。</p>
<h3>余额支付</h3>
<p>为用户建立本地账户并使用账户来完成支付，账户支持充值、提现等操作。</p>
<h3>信用支付</h3>
<p>指使用信用账户进行透支，类似信用卡支付。需要较强的风控能力。</p>
<h2>支付系统的常见接口</h2>
<h3>支付</h3>
<ul>
<li>在商户的 H5 网站下单并确认支付。</li>
<li>商户系统生成订单信息并构造支付请求发送到该支付产品系统。</li>
<li>系统校验通过后拼装本次支付所需参数返回给商户前端。</li>
<li>商户前端将页面跳转至该支付产品官方中间页，如果用户手机上安装了该支付产品 App，则自动唤起 App；如果未安装，则继续在当前页面进入官方 H5 收银台。</li>
<li>用户完成密码输入并支付。</li>
<li>系统内部完成本次支付单处理流程。</li>
<li>处理完成后，以异步消息形式通知商户后台 Notify_URL，确认此次交易成功。</li>
<li>处理完成后，从官方中间页跳转商户自定义支付结果页 Return_URL，展示支付结果。</li>
<li>完成本次支付。</li>
</ul>
<h3>交易关闭</h3>
<p>针对需要的业务场景，支持主动取消订单（针对未支付订单，已支付单可走退款流程）。</p>
<ul>
<li>用户发起/商户后台管理员发起订单取消申请。</li>
<li>商户系统向该支付产品系统发起关闭订单请求。</li>
<li>后台判断处理后返回取消结果。</li>
</ul>
<h3>交易查询</h3>
<ul>
<li>商户后台发起交易查询请求。</li>
<li>系统判断交易单存在，并返回交易结果。</li>
</ul>
<h3>退款</h3>
<ul>
<li>用户/商户发起退款请求</li>
<li>商户系统审核处理退款申请是否合法。</li>
<li>合法情况下，商户系统向该支付产品系统发起退款请求。</li>
<li>系统处理并返回结果。</li>
<li>相关渠道将资金返回（有一定时间延迟）。</li>
</ul>
<h3>退款查询</h3>
<ul>
<li>用户/商户发起退款查询请求。</li>
<li>系统处理后返回结果。</li>
</ul>
<h2>支付的后续处理</h2>
<h3>结算、分账</h3>
<p>在支付成功后进行结算分账是指将支付的款项按照预定的规则分配给相关参与方。这通常涉及到商家、平台、供应商等各方之间的分账操作。下面是一些可能的步骤和相关的考虑：</p>
<ol>
<li><strong>确定分账方：</strong> 确定需要参与分账的各方，例如商家、平台、供应商等。</li>
<li><strong>制定分账规则：</strong> 制定分账的具体规则，包括各方的分账比例、分账周期等。这通常在合同或协议中规定。</li>
<li><strong>获取支付信息：</strong> 在支付成功后，系统需要获取支付的相关信息，例如支付金额、支付时间等。</li>
<li><strong>计算分账金额：</strong> 根据制定的分账规则，计算各方应该分得的金额。</li>
<li><strong>生成结算单据：</strong> 生成结算单据，明确每个参与方的分账金额，以便后续的结算操作。</li>
<li><strong>执行结算：</strong> 将分账金额转入各方的账户，可以通过银行转账、第三方支付平台等方式进行结算。</li>
<li><strong>记录结算信息：</strong> 记录每一笔结算的详细信息，包括结算时间、结算金额等，以便后续的查账和审计。</li>
<li><strong>通知相关方：</strong> 可以通过系统通知或其他方式告知各方结算结果，确保信息的透明和及时性。</li>
<li><strong>监控和调整：</strong> 建立监控机制，定期检查分账操作的准确性，根据实际情况进行调整和优化分账规则。</li>
<li><strong>合规性和法律考虑：</strong> 确保分账操作符合相关法规和合同规定，防止出现法律风险。</li>
</ol>
<h3>二清合规</h3>
<p>"二清"通常指的是在支付流程中的两个清算环节，即二次结算，一般包括商户清算和平台清算。而"合规"则是指在业务运作中合乎法律法规和相关政策的规定。</p>
<p>在支付领域，二清合规通常是指在支付平台或支付系统中，商户和平台之间的结算过程要符合相关法规和政策，确保资金的流转合法合规，防范风险，保障各方的权益。这一概念通常涉及到支付服务提供商、商户、监管机构等多方的关系。</p>
<p>具体而言，二清合规可能包括以下方面：</p>
<ol>
<li><strong>资金监管：</strong> 确保支付平台对用户支付的资金进行合法监管，防范洗钱、诈骗等违法行为。</li>
<li><strong>商户合规性：</strong> 确保商户符合相关法规和合同规定，防范违法交易和商户的不当行为。</li>
<li><strong>隐私保护：</strong> 对用户的个人隐私信息进行保护，符合相关的隐私法规。</li>
<li><strong>合同规范：</strong> 商户与支付平台之间的结算过程要符合双方签订的合同和协议，确保权责清晰。</li>
<li><strong>风险管理：</strong> 建立风险管理体系，对支付过程中的各类风险进行评估和控制，确保支付过程的安全性。</li>
<li><strong>透明度：</strong> 提供透明的结算信息，确保商户能够清晰地了解交易的结算过程和费用组成。</li>
<li><strong>法规遵从：</strong> 遵守国家和地区的支付法规和监管政策，确保支付业务的合法性。</li>
</ol>
<h2>常见问题</h2>
<h3>支付订单超时时间</h3>
<p>用户在「确认订单页」点击「提交订单」就会创建订单并跳转至收银台，此时开始锁定库存并计时；而用户在收银台停留的时间是不确定的，这部分不确定时间造成了时间差。具体来讲，如果用户点击「去支付」创建预支付单时传递的过期时间是个固定值，那么就有可能会出现一种情况：在订单系统该订单已经过期失效了，但用户在支付平台内还能支付该笔订单（而此时支付成功回调订单系统，订单已取消，系统是不会进行后续发货流程的）。因此，支付单的过期时间要结合支付单创建当前时间和订单创建时间一起动态计算得出，保持一致，从而给平台用户提供更好的消费体验。</p>
]]></content:encoded>
    </item>
    <item>
      <title>知行合一的重要性</title>
      <link>https://maijunxuan.cn/%E5%85%B6%E4%BB%96/%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7.html</link>
      <guid>https://maijunxuan.cn/%E5%85%B6%E4%BB%96/%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">知行合一的重要性</source>
      <description>知行合一的重要性 为什么道理都懂，我们却无法做到 我们日常可能会遇到这种现象，明明我们看了那么多的文章、视频、书籍，道理和知识都懂了，但为什么总在需要的时候，却无法很好的运用这些知识呢？ 原因很简单，我们所谓的懂，仅仅是在思维层面形成的知识闭环，但这个闭环却不是完整的学习闭环。我们在这学习的过程中，漏掉了最重要的一步——实践。 在这里插入图片描述 知道...</description>
      <pubDate>Mon, 28 Aug 2023 00:49:57 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>为什么道理都懂，我们却无法做到</h2>
<p>我们日常可能会遇到这种现象，明明我们看了那么多的文章、视频、书籍，道理和知识都懂了，但为什么总在需要的时候，却无法很好的运用这些知识呢？</p>
<p>原因很简单，我们所谓的懂，仅仅是在思维层面形成的知识闭环，但这个闭环却不是完整的学习闭环。我们在这学习的过程中，漏掉了最重要的一步——实践。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/hpSZ24YEx3cODog.png" alt="在这里插入图片描述"></p>
<h2>知道和做到的底层原理</h2>
<p>当我们在认知学习时大脑就会产生一种天然的错觉，认为明白了这个道理就好像掌握了这个技能。</p>
<p>比如:找医生或者找专业人士咨询一些心理问题之后，在得到正确的答案之后，我们就会突然明白其中的原理，在知道的那一瞬间，我们确实提升了认知，甚至也能在短时间内做到这一点。这种感觉非常美妙，仿佛就像灵丹妙药一般。我们只需在大脑中推演一番，就能体会到这个认知给自己带来的正向反馈。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304051508136.png" alt="在这里插入图片描述"></p>
<p>这个正向反馈在当时确实是正向反馈的。然而事实是，心理问题过不了几天则又出现了，我们又开始满怀失望和沮丧，一度怀疑，之前懂得的道理是不是错觉？</p>
<p>似乎在这方面，我们每个人都有着很大的盲区。就是不理解大脑的学习机制。</p>
<blockquote>
<p>在科学家看来，学习任何一门节能，本质都是大脑中的神经细胞在建立连接，用神经科学的术语来说就是:通过大量的重复动作，大脑中两个或者多个原来不关联的神经元收到反复刺激之后产生的强关联。</p>
</blockquote>
<h3>一个玩手机的例子</h3>
<p>这一点不难理解，举个例子，假设我们选择突然明白一个道理:我们一天不玩手机，也不会有任何的损失。 此时我们大脑对这个认知一下子就清醒了，瞬间就明白了手机的危害。得到了这个及时且真实的正向反馈，我们确实有了"一天不玩手机，也不会有任何损失"的认知。但仅仅通过这一次神经元刺激，是无法达成强关联的。所以这种认知也是极其不稳定的。 最终使得我们还会把学习的事情丢到一旁，继续玩手机了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304051508237.png" alt="在这里插入图片描述"></p>
<p>小结:道理再好，如果不去刻意的练习，不去刺激相关神经细胞的强关联，这些美好的认知，将永远不会真正对自己产生影响。</p>
<h3>一个焦虑症认知的例子</h3>
<p>再举个例子:《精神焦虑症的自救》一书中提到的，面对神经衰弱和躯体症状最好的手段就是要求做到以下几点:</p>
<ol>
<li>面对</li>
<li>接受</li>
<li>飘然</li>
<li>等待</li>
</ol>
<p>初次看完这本书之后会有一种完全自愈的感觉，随着时间的推移，神经症患者的症状又出现复发。患者又开始害怕。结果，很多人这时候又陷入陷入迷茫，最终陷入和神经症的无尽对抗。</p>
<p>但是，了解了练习的重要性之后，我们就会明白:任何知识点都必须不断的强化和实践的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304051508179.png" alt="在这里插入图片描述"></p>
<p>因此患者出现症状时，就必须再次想起当时所提到的那4个原则。以及围绕4个原则展开的实施方法。患者可自行翻看《精神焦虑症的自救》和自己的整理的笔记。实践、感悟之前学过的这些理论，不断不断的实践对学习完成闭环，最终从症状中走出来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304051508254.png" alt="在这里插入图片描述"></p>
<p>你也许会问，我们真的要学那么多知识，感悟那么多道理嘛？ 其实并不需要，很多时候一个观点就足够改变你的认知，懂得百点不如去改变一点。真正的成长不是自己懂得多少道理，而是在于自己改变了多少。 仅仅知道，而不去练习，是无法形成完全的正向反馈从而形成知识的完整闭环的。</p>
<p>小结:</p>
<ol>
<li>道理不可能很快完成实践，也不会轻松被实践。</li>
<li>面对道理都懂，却做不到的这一问题的人通常不清楚，真正做成一件事需要花费多少心力，不是把想法放在脑中盘旋就能做到的。</li>
<li>但凡真正主动做成一件事的人都知道那并不容易，无论是养成多运动的好习惯，还是每天阅读5分钟的习惯，都是漫长的过程，不可能一蹴而就。</li>
<li>所以我们要打破轻而易举就能做到的这个执念。</li>
</ol>
<h2>总结</h2>
<p>大多数人对学习都仅仅停留在拥有和知道的阶段。却忘记了需要在真实的场景中运用他们。或者尝试了一段时间发现没有效果就果断放弃了。 实际上，从大脑的学习机制来看，无论学习还是养成任何习惯，都是大脑的神经元从少到多，从弱到强关联的一个过程。但是大家也不要则责怪自己知而不行，因为趋易避难是人的天性。这种趋向深深的刻在我们的基因里。</p>
<p>所以我们现在要把认知当作一个技能，知道和想通一个道理时，我们不要高兴太早，想想后面还有大量的练习和感悟，也就不会因为某次的失败的心浮气躁了。用成熟的心态包容自己，去包容自己的每一次失败，即使做不好，也要持续的输出行动力。给神经元和自己足够多的时间和耐心，让它们按照自然的规律完成认知的完整学习。</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/hpSZ24YEx3cODog.png" type="image/png"/>
    </item>
    <item>
      <title></title>
      <link>https://maijunxuan.cn/%E5%88%86%E5%B8%83%E5%BC%8F/%E4%BB%80%E4%B9%88%E6%98%AFxxl-job%EF%BC%8C%E5%AE%83%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98.html</link>
      <guid>https://maijunxuan.cn/%E5%88%86%E5%B8%83%E5%BC%8F/%E4%BB%80%E4%B9%88%E6%98%AFxxl-job%EF%BC%8C%E5%AE%83%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98.html</guid>
      <source url="https://maijunxuan.cn/rss.xml"></source>
      <description>什么是xxl-job，它解决什么问题 我们在日常项目开发中，可能会用到分布式调度，在这期间我们可能会遇到这些问题: 同一个服务中可能存在多个互斥的任务，需要统一调度和协调。 定时任务运行期间，为了确保任务能够稳定运行，我们希望能够做到高可用、监控运维、故障告警。 需要统一管理和追踪个个服务节点定时任务的情况，以及任务属性信息，比如:任务所属服务、所属责...</description>
      <pubDate>Mon, 28 Aug 2023 00:49:57 GMT</pubDate>
      <content:encoded><![CDATA[<h2>什么是xxl-job，它解决什么问题</h2>
<p>我们在日常项目开发中，可能会用到分布式调度，在这期间我们可能会遇到这些问题:</p>
<ol>
<li>同一个服务中可能存在多个互斥的任务，需要统一调度和协调。</li>
<li>定时任务运行期间，为了确保任务能够稳定运行，我们希望能够做到高可用、监控运维、故障告警。</li>
<li>需要统一管理和追踪个个服务节点定时任务的情况，以及任务属性信息，比如:任务所属服务、所属责任人等信息。</li>
</ol>
<p>所以我们这里就需要用到xxl-job这个轻量级框架。</p>
<h2>XXL-JOB功能特性</h2>
<p>XXL-JOB主要有以下几个功能特性:</p>
<ol>
<li>简单易用:提供web页面对任务进行管理，管理系统支持用户管理、权限控制；支持容器部署，还支持通过HTTP提供跨平台任务调度。</li>
<li>丰富的任务管理功能:XXL-JOB支持页面对任务的增删改查操作，同时还支持页面编写脚本、Java代码任务并行。甚至还支持任务级联编排、父任务执行结束后触发子任务。支持任务设置优先级、支持设置指定任务的路由策略，包括:轮询、随机、广播、故障转移、忙碌转移等等。配置定时任务时，它还支持使用cron表达式。</li>
<li>高性能:调度中心是基于线程池多线程触发调度任务的，通过对快任务和慢任务的隔离调度，提高系统的性能和稳定性。任务调度流程完全是异步化设计和实现，如异步调度、异步运行、异步回调等，这些特性都可以实现密集流量的削峰。</li>
<li>高可用:任务调度中心、任务执行节点都可以集群部署，支持动态扩展、故障转移，同时还支持路由故障转移策略，执行器节点不可用时还能故障转移到其他节点。支持任务超时控制、失败重试配置，也支持任务处理阻塞策略，例如当任务执行节点忙碌的来不及执行新任务时会执行串行、抛弃、覆盖等策略。</li>
<li>易于监控和维护:支持设置任务失败告警，，同时还支持实时查看任务执行数据统计图表、任务进度监控、任务完整执行任务等数据。</li>
</ol>
<h2>XXL-JOB相比其他分布式调度框架的优势</h2>
<p>从下面这张表中我们可以看出xxl-job相比于其他框架，不仅支持高可用，功能也更多、更灵活，而且版本也一直在维护，是一个非常受欢迎的分布式任务调度平台。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256032.png" alt="在这里插入图片描述"></p>
<h2>实践</h2>
<h3>基于xxl-job完成用户注册</h3>
<p>因为xxl-job官网对快速上手教程写的非常清楚了，笔者这里就不多做介绍了，感兴趣的读者可以自行到xxl-job官网完成一下基础入门工作:</p>
<p><a href="https://www.xuxueli.com/xxl-job/" target="_blank" rel="noopener noreferrer">分布式任务调度平台XXL-JOB(opens new window)</a></p>
<h4>需求介绍</h4>
<p>我们现在有这么一个需求，我们希望用户通过我们的接口完成用户信息注册之后，完成后台一些工作之后对用户输出一句问候。注意，由于问候这个操作和我们的核心业务没有关系，所以我们希望将这个问候的操作提交到xxl-job中执行。 当然如果在后台任务执行错误时，我们希望能够通过邮件的方式告知管理员。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256867.png" alt="在这里插入图片描述"></p>
<h4>部署xxl-job-admin</h4>
<p>我们首先需要完成一下xxl-job的基础部署，首先到gitee上把xxl-job拉下来，源码地址</p>
<p><a href="https://gitee.com/xuxueli0323/xxl-job.git" target="_blank" rel="noopener noreferrer">https://gitee.com/xuxueli0323/xxl-job.git(opens new window)</a></p>
<p>完成后我们找到文件夹里的找到tables_xxl_job.sql这个文件，将其刷到我们的数据库中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256596.png" alt="在这里插入图片描述"></p>
<p>将上述脚本刷完之后，数据就如下图所示:</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256302.png" alt="在这里插入图片描述"></p>
<p>然后我们还需要对xxl-job-admin的配置文件的数据库配置进行一些简单的修改。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256972.png" alt="在这里插入图片描述"></p>
<p>如下所示，笔者将数据库的url、账户、密码改为自己数据库对应的值。</p>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment">### xxl-job, datasource</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:xxxxxx:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">xxxx</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">xxxxx</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
</code></pre></div><p>完成后我们尝试将xxl-job启动，默认情况下用户名和密码分别时admin和123456，如果我们输入用户密码后可以进入到这个页面，就说明我们的xxl-job-admin部署成功了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256974.png" alt="在这里插入图片描述"></p>
<h4>创建自定义项目并完成基础配置</h4>
<p>完成xxl-job-admin的部署之后，我们就可以开始开发我们的功能了，我们首先需要创建一个spring-boot项目。然后到配置文件中添加如下几个部分的信息。</p>
<p>首先自然是端口号和xxl-job-admin信息，具体内容参见下方注释:</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span>

<span class="token comment"># xxl-job</span>
<span class="token key atrule">xxl</span><span class="token punctuation">:</span>
  <span class="token key atrule">job</span><span class="token punctuation">:</span>
    <span class="token key atrule">admin</span><span class="token punctuation">:</span>
      <span class="token key atrule">addresses</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8080/xxl<span class="token punctuation">-</span>job<span class="token punctuation">-</span>admin <span class="token comment"># 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；</span>
    <span class="token key atrule">executor</span><span class="token punctuation">:</span>
      <span class="token key atrule">appname</span><span class="token punctuation">:</span> hresh<span class="token punctuation">-</span>job<span class="token punctuation">-</span>executor <span class="token comment"># 执行器 AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span>
      <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token comment"># 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；</span>
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6666</span> <span class="token comment"># ### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span>
      <span class="token key atrule">logpath</span><span class="token punctuation">:</span> F<span class="token punctuation">:</span>\log\xxl<span class="token punctuation">-</span>job\ <span class="token comment"># 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span>
      <span class="token key atrule">logretentiondays</span><span class="token punctuation">:</span> <span class="token number">30</span> <span class="token comment"># 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span>
    <span class="token key atrule">accessToken</span><span class="token punctuation">:</span> default_token  <span class="token comment"># 执行器通讯TOKEN [选填]：非空时启用；</span>
</code></pre></div><p>由于笔者的用户注册涉及user表，所以这里还需要配置user表所对应的数据库信息:</p>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring</span><span class="token punctuation">:</span>
<span class="token key attr-name">  application</span><span class="token punctuation">:</span>
<span class="token key attr-name">    name</span><span class="token punctuation">:</span> <span class="token value attr-value">xxl-job-practice</span>
<span class="token key attr-name">  datasource</span><span class="token punctuation">:</span>
<span class="token key attr-name">    type</span><span class="token punctuation">:</span> <span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">    driver-class-name</span><span class="token punctuation">:</span> <span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">    url</span><span class="token punctuation">:</span> <span class="token value attr-value">jdbc:mysql://xxxxxxxx:3306/test_db?serverTimezone=Hongkong&amp;characterEncoding=utf-8&amp;useSSL=false</span>
<span class="token key attr-name">    username</span><span class="token punctuation">:</span> <span class="token value attr-value">xxxx</span>
<span class="token key attr-name">    password</span><span class="token punctuation">:</span> <span class="token value attr-value">xxxxxx</span>
</code></pre></div><p>完成基本项目配置之后，我们就可以开始编码工作了。我们首先需要创建一个执行器，代码如下，逻辑很简单，从配置文件中读取xxl-job-admin的配置信息完成执行器初始化使其加载到spring容器中。</p>
<div class="language-clike" data-ext="clike" data-title="clike"><pre class="language-clike"><code>@Configuration
public class <span class="token class-name">XxlJobConfig</span> <span class="token punctuation">{</span>

  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.admin.addresses}"</span><span class="token punctuation">)</span>
  private String adminAddresses<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.appname}"</span><span class="token punctuation">)</span>
  private String appName<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.ip}"</span><span class="token punctuation">)</span>
  private String ip<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.port}"</span><span class="token punctuation">)</span>
  private int port<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.accessToken}"</span><span class="token punctuation">)</span>
  private String accessToken<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.logpath}"</span><span class="token punctuation">)</span>
  private String logPath<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.logretentiondays}"</span><span class="token punctuation">)</span>
  private int logRetentionDays<span class="token punctuation">;</span>

  <span class="token comment">/**
   * 执行器
   * @return
   */</span>
  @Bean
  public XxlJobSpringExecutor <span class="token function">xxlJobExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建 XxlJobSpringExecutor 执行器</span>
    XxlJobSpringExecutor xxlJobSpringExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobSpringExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置调度中心地址</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAdminAddresses</span><span class="token punctuation">(</span>adminAddresses<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置执行器名称</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAppname</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置ip地址</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置端口号</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//执行器通讯token</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置日志的路径</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogPath</span><span class="token punctuation">(</span>logPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置执行器保存天数</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogRetentionDays</span><span class="token punctuation">(</span>logRetentionDays<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> xxlJobSpringExecutor<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>魔改xxl-job</h4>
<p>我们希望我们的任务能够在用户完成注册之后像xxl-job提交一个随后向用户问好的定时任务。所以我们必须对xxl-job进行一些扩展，以实现:</p>
<ol>
<li>让xxl-job提供一个能够添加任务的restful api。</li>
<li>让xxl-job提供一个能够删除任务的restful api。</li>
<li>让xxl-job提供一个能够根据具体执行器名称查询执行器具体信息的restful api。</li>
</ol>
<p>为了实现这一点，我们不妨到xxl-job-admin的web页面进行点击了解一下有没有相似的api。首先自然是第一点，完成任务添加，我们不妨到web页面中点击新增按钮完成任意一个任务的添加。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256024.png" alt="在这里插入图片描述"></p>
<p>此时我们就会在network中看到这么一个接口</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256965.png" alt="在这里插入图片描述"></p>
<p>对应参数如下，可以看到是表单的形式传参。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256953.png" alt="在这里插入图片描述"></p>
<p>然后我们就从xxl-job中定位到了源码，逻辑很简单就是简单的调用一下xxlJobService。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256062.png" alt="在这里插入图片描述"></p>
<p>对此我们照抄这个逻辑，在JobInfoController中添加我们自定义的方法addJob，注意我们为了绕过xxl-job的权限校验加了PermissionLimit注解。</p>
<div class="language-clike" data-ext="clike" data-title="clike"><pre class="language-clike"><code>@<span class="token function">RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addJob"</span><span class="token punctuation">)</span>
	@ResponseBody
	@<span class="token function">PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	public ReturnT<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token function">addJob</span><span class="token punctuation">(</span>@RequestBody XxlJobInfo jobInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> xxlJobService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>同理我们观察删除任务的api，也实现一个移除任务的方法。</p>
<div class="language-clike" data-ext="clike" data-title="clike"><pre class="language-clike"><code>@<span class="token function">RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/removeJob"</span><span class="token punctuation">)</span>
	@ResponseBody
	@<span class="token function">PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	public ReturnT<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token function">removeJob</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> xxlJobService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>还一个根据根据应用名称精确获取执行器的信息的api，我们可以到执行器管理点击搜索。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256983.png" alt="在这里插入图片描述"></p>
<p>同理我们会得出这样一个接口。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256961.png" alt="在这里插入图片描述"></p>
<p>表单参数如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256167.png" alt="在这里插入图片描述"></p>
<p>我们从接口定位到代码，发现是一个分页查询，不符合我们的需求，所以我们通过源码定位到持久层sql，添加一个自定的查询sql。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256343.png" alt="在这里插入图片描述"></p>
<p>我们可以到XxlJobGroupDao添加一个loadByAppName</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256366.png" alt="在这里插入图片描述"></p>
<p>xml的代码如下所示：</p>
<div class="language-clike" data-ext="clike" data-title="clike"><pre class="language-clike"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"loadByAppName"</span> parameterType<span class="token operator">=</span><span class="token string">"java.util.HashMap"</span> resultMap<span class="token operator">=</span><span class="token string">"XxlJobGroup"</span><span class="token operator">&gt;</span>
		SELECT
		<span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span><span class="token operator">/</span><span class="token operator">&gt;</span>
		FROM xxl_job_group AS t
		WHERE t<span class="token punctuation">.</span>app_name <span class="token operator">=</span> #<span class="token punctuation">{</span>appName<span class="token punctuation">}</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre></div><p>最后我们在JobGroupController添加如下代码，自此我们对xxl-job的拓展工作就完成了。当然在此提醒一下，正常开发流程时，我们建议在这个阶段自测一下接口的可用性，因为笔者在这里都测试过了，所以不展开了。</p>
<div class="language-clike" data-ext="clike" data-title="clike"><pre class="language-clike"><code>@<span class="token function">RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/loadByAppName"</span><span class="token punctuation">)</span>
	@ResponseBody
	@<span class="token function">PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	public ReturnT<span class="token operator">&lt;</span>XxlJobGroup<span class="token operator">&gt;</span> <span class="token function">loadByAppName</span><span class="token punctuation">(</span>@RequestBody Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">&gt;</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		XxlJobGroup jobGroup <span class="token operator">=</span> xxlJobGroupDao<span class="token punctuation">.</span><span class="token function">loadByAppName</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> jobGroup <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ReturnT</span><span class="token operator">&lt;</span>XxlJobGroup<span class="token operator">&gt;</span><span class="token punctuation">(</span>jobGroup<span class="token punctuation">)</span>
				<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ReturnT</span><span class="token operator">&lt;</span>XxlJobGroup<span class="token operator">&gt;</span><span class="token punctuation">(</span>ReturnT<span class="token punctuation">.</span>FAIL_CODE<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><h4>实现自定义应用调用xxl-job-admin</h4>
<p>接下来我们就回到自己开发的web应用，完成对xxl-job-admin的远程调用。首先我们需要将xxl-job-admin的XxlJobInfo复制到我们的项目中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256565.png" alt="在这里插入图片描述"></p>
<p>如下图所示，笔者将这个类复制到自己项目中的model路径中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256750.png" alt="在这里插入图片描述"></p>
<p>完成相关类的复制之后，就可以编写一个调用xxl-job-admin相关api的工具类XxlUtil</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@Component
@RequiredArgsConstructor
public class XxlUtil <span class="token punctuation">{</span>

  @Value<span class="token punctuation">(</span><span class="token string">"<span class="token variable">${xxl.job.admin.addresses}</span>"</span><span class="token punctuation">)</span>
  private String xxlJobAdminAddress<span class="token punctuation">;</span>

  private final RestTemplate restTemplate<span class="token punctuation">;</span>

  // xxl-job各种请求地址
  private static final String ADD_INFO_URL <span class="token operator">=</span> <span class="token string">"/jobinfo/addJob"</span><span class="token punctuation">;</span>
  private static final String REMOVE_INFO_URL <span class="token operator">=</span> <span class="token string">"/jobinfo/removeJob"</span><span class="token punctuation">;</span>
  private static final String GET_GROUP_ID <span class="token operator">=</span> <span class="token string">"/jobgroup/loadByAppName"</span><span class="token punctuation">;</span>

  /**
   * 添加任务
   *
   * @param xxlJobInfo
   * @param appName
   * @return
   */
  public String addJob<span class="token punctuation">(</span>XxlJobInfo xxlJobInfo, String appName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    //组装参数
    Map<span class="token operator">&lt;</span>String, Object<span class="token operator">&gt;</span> params <span class="token operator">=</span> new HashMap<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params.put<span class="token punctuation">(</span><span class="token string">"appName"</span>, appName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    String json <span class="token operator">=</span> JSONUtil.toJsonStr<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    //调用xxl-job接口添加任务
    String result <span class="token operator">=</span> doPost<span class="token punctuation">(</span>xxlJobAdminAddress + GET_GROUP_ID, json<span class="token punctuation">)</span><span class="token punctuation">;</span>

    //获取执行器的id
    JSONObject jsonObject <span class="token operator">=</span> JSON.parseObject<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Map<span class="token operator">&lt;</span>String, Object<span class="token operator">&gt;</span> map <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String, Object<span class="token operator">&gt;</span><span class="token punctuation">)</span> jsonObject.get<span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Integer groupId <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> map.get<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



    xxlJobInfo.setJobGroup<span class="token punctuation">(</span>groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    String xxlJobInfoJson <span class="token operator">=</span> JSONUtil.toJsonStr<span class="token punctuation">(</span>xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    //添加这个job
    <span class="token builtin class-name">return</span> doPost<span class="token punctuation">(</span>xxlJobAdminAddress + ADD_INFO_URL, xxlJobInfoJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  // 删除job
  public String removeJob<span class="token punctuation">(</span>long jobId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MultiValueMap<span class="token operator">&lt;</span>String, String<span class="token operator">&gt;</span> map <span class="token operator">=</span> new LinkedMultiValueMap<span class="token operator">&lt;</span>String, String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map.add<span class="token punctuation">(</span><span class="token string">"id"</span>, String.valueOf<span class="token punctuation">(</span>jobId<span class="token punctuation">))</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> doPostWithFormData<span class="token punctuation">(</span>xxlJobAdminAddress + REMOVE_INFO_URL, map<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  /**
   * 远程调用
   *
   * @param url
   * @param json
   */
  private String doPost<span class="token punctuation">(</span>String url, String json<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    HttpHeaders headers <span class="token operator">=</span> new HttpHeaders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers.setContentType<span class="token punctuation">(</span>MediaType.APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>
    HttpEntity<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> entity <span class="token operator">=</span> new HttpEntity<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span>json, headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> responseEntity <span class="token operator">=</span> restTemplate.postForEntity<span class="token punctuation">(</span>url, entity, String.class<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> responseEntity.getBody<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  private String doPostWithFormData<span class="token punctuation">(</span>String url, MultiValueMap<span class="token operator">&lt;</span>String, String<span class="token operator">&gt;</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    HttpHeaders headers <span class="token operator">=</span> new HttpHeaders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers.setContentType<span class="token punctuation">(</span>MediaType.APPLICATION_FORM_URLENCODED<span class="token punctuation">)</span><span class="token punctuation">;</span>
    HttpEntity<span class="token operator">&lt;</span>MultiValueMap<span class="token operator">&lt;</span>String, String<span class="token operator">&gt;&gt;</span> entity <span class="token operator">=</span> new HttpEntity<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span>map, headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> responseEntity <span class="token operator">=</span> restTemplate.postForEntity<span class="token punctuation">(</span>url, entity, String.class<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> responseEntity.getBody<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><p>完成工具类的编写之后，我们通过XxlService 将工具类集成进来。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@Service
@Slf4j
@RequiredArgsConstructor
public class XxlService <span class="token punctuation">{</span>

  private final XxlUtil xxlUtil<span class="token punctuation">;</span>

  @Value<span class="token punctuation">(</span><span class="token string">"<span class="token variable">${xxl.job.executor.appname}</span>"</span><span class="token punctuation">)</span>
  private String appName<span class="token punctuation">;</span>

  public void addJob<span class="token punctuation">(</span>XxlJobInfo xxlJobInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xxlUtil.addJob<span class="token punctuation">(</span>xxlJobInfo, appName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    long triggerNextTime <span class="token operator">=</span> xxlJobInfo.getTriggerNextTime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log.info<span class="token punctuation">(</span><span class="token string">"任务已添加，将在{}开始执行任务"</span>, DateUtils.formatDate<span class="token punctuation">(</span>triggerNextTime<span class="token punctuation">))</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><h4>完成业务功能开发</h4>
<p>完成xxl-job集成工作之后，我们就可以编写业务代码了，我们代码逻辑如下整体步骤为:</p>
<ol>
<li>校验入参。</li>
<li>存储信息到user表。</li>
<li>创建定时任务，以sayHelloHandler作为执行器，userName为参数。</li>
<li>调用封装的api调用xxl-job-admin的api。</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@Service
@RequiredArgsConstructor
@Slf4j
public class UserService <span class="token punctuation">{</span>

    private final UserMapper userMapper<span class="token punctuation">;</span>
    private final UserStruct userStruct<span class="token punctuation">;</span>
    private final XxlService xxlService<span class="token punctuation">;</span>

    /**
     * 假设有这样一个业务需求，每当有新用户注册，则1分钟后会给用户发送欢迎通知.
     *
     * @param userRequest 用户请求体
     */
    @Transactional
    public void register<span class="token punctuation">(</span>UserRequest userRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        //参数校验
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects.isNull<span class="token punctuation">(</span>userRequest<span class="token punctuation">)</span> <span class="token operator">||</span>
                isBlank<span class="token punctuation">(</span>userRequest.getUsername<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token operator">||</span>
                isBlank<span class="token punctuation">(</span>userRequest.getPassword<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            BusinessException.fail<span class="token punctuation">(</span><span class="token string">"账号或密码为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        //插入用户信息
        User user <span class="token operator">=</span> userStruct.toUser<span class="token punctuation">(</span>userRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMapper.insert<span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        //创建一个1分钟后向用户问好的任务
        LocalDateTime scheduleTime <span class="token operator">=</span> LocalDateTime.now<span class="token punctuation">(</span><span class="token punctuation">)</span>.plusMinutes<span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        XxlJobInfo xxlJobInfo <span class="token operator">=</span> XxlJobInfo.builder<span class="token punctuation">(</span><span class="token punctuation">)</span>.jobDesc<span class="token punctuation">(</span><span class="token string">"定时给用户发送通知"</span><span class="token punctuation">)</span>.author<span class="token punctuation">(</span><span class="token string">"mjx"</span><span class="token punctuation">)</span>
                .scheduleType<span class="token punctuation">(</span><span class="token string">"CRON"</span><span class="token punctuation">)</span>.scheduleConf<span class="token punctuation">(</span>DateUtils.getCron<span class="token punctuation">(</span>scheduleTime<span class="token punctuation">))</span>.glueType<span class="token punctuation">(</span><span class="token string">"BEAN"</span><span class="token punctuation">)</span>
                .glueType<span class="token punctuation">(</span><span class="token string">"BEAN"</span><span class="token punctuation">)</span>
                .executorHandler<span class="token punctuation">(</span><span class="token string">"sayHelloHandler"</span><span class="token punctuation">)</span>
                .executorParam<span class="token punctuation">(</span>user.getUsername<span class="token punctuation">(</span><span class="token punctuation">))</span>
                .misfireStrategy<span class="token punctuation">(</span><span class="token string">"DO_NOTHING"</span><span class="token punctuation">)</span>
                .executorRouteStrategy<span class="token punctuation">(</span><span class="token string">"FIRST"</span><span class="token punctuation">)</span>
                .triggerNextTime<span class="token punctuation">(</span>DateUtils.toEpochMilli<span class="token punctuation">(</span>scheduleTime<span class="token punctuation">))</span>
                .executorBlockStrategy<span class="token punctuation">(</span><span class="token string">"SERIAL_EXECUTION"</span><span class="token punctuation">)</span>.triggerStatus<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        //将任务提交到xxl-job-admin
        xxlService.addJob<span class="token punctuation">(</span>xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



<span class="token punctuation">}</span>
</code></pre></div><p>补充一下上文提到的SayHelloHandler 源码，注意笔者的操作，因为注册量比较大，所以我们提交的定时任务需要删除，所以sayHelloHandler执行完任务后会将任务删除。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@Component
@RequiredArgsConstructor
public class SayHelloHandler <span class="token punctuation">{</span>

    private final UserService userService<span class="token punctuation">;</span>
    private final XxlUtil xxlUtil<span class="token punctuation">;</span>

    private static Logger logger <span class="token operator">=</span> LoggerFactory.getLogger<span class="token punctuation">(</span>SayHelloHandler.class<span class="token punctuation">)</span><span class="token punctuation">;</span>


    @XxlJob<span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"sayHelloHandler"</span><span class="token punctuation">)</span>
    public void <span class="token function-name function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String userName <span class="token operator">=</span> XxlJobHelper.getJobParam<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        logger.info<span class="token punctuation">(</span><span class="token string">"welcome {}"</span>, userName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        //未避免一次性任务，留在界面，这里手动删除处理掉
        long jobId <span class="token operator">=</span> XxlJobHelper.getJobId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlUtil.removeJob<span class="token punctuation">(</span>jobId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>测试</h4>
<p>我们使用api工具调用这个接口。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256696.png" alt="在这里插入图片描述"></p>
<p>从控制台可以看到任务提交了，我们不妨到web页面去看看。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256357.png" alt="在这里插入图片描述"></p>
<p>可以看到页面确实出现了这个任务。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256735.png" alt="在这里插入图片描述"></p>
<p>不久后，我们的执行器(即我们自己的web应用)会输出问候语</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256844.png" alt="在这里插入图片描述"></p>
<p>再次回到web页面可以看到刚刚完成的任务被删除了，自此我们的功能开发初步完成了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256973.png" alt="在这里插入图片描述"></p>
<h4>集成邮件告警</h4>
<p>我们上文提到了这样一个需求，用户注册成功后我们会将xxl-job提交一个向用户问候的定时任务，假如这个任务执行失败，我们希望可以做到告警。现在我们不妨完善一下这个需求。 我们到xxl-job-admin中配置邮件相关参数，配置如下，读者可以按需修改邮箱号和授权码即可。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### xxl-job, email</span>
<span class="token assign-left variable">spring.mail.host</span><span class="token operator">=</span>smtp.qq.com
<span class="token assign-left variable">spring.mail.port</span><span class="token operator">=</span><span class="token number">25</span>
<span class="token comment"># 邮箱号</span>
<span class="token assign-left variable">spring.mail.username</span><span class="token operator">=</span>xxxx@qq.com
<span class="token assign-left variable">spring.mail.from</span><span class="token operator">=</span>xxxx@qq.com
<span class="token comment"># 授权码</span>
<span class="token assign-left variable">spring.mail.password</span><span class="token operator">=</span>xxxxx


<span class="token assign-left variable">spring.mail.properties.mail.smtp.auth</span><span class="token operator">=</span>true
<span class="token assign-left variable">spring.mail.properties.mail.smtp.starttls.enable</span><span class="token operator">=</span>true
<span class="token assign-left variable">spring.mail.properties.mail.smtp.starttls.required</span><span class="token operator">=</span>true
<span class="token assign-left variable">spring.mail.properties.mail.smtp.socketFactory.class</span><span class="token operator">=</span>javax.net.ssl.SSLSocketFactory
</code></pre></div><p>这里补充一下授权码是怎么来的，以笔者为例，笔者用的是qq邮箱，所以到qq邮箱页面点击设置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256229.png" alt="在这里插入图片描述"></p>
<p>到下方找到关于pop3等一栏，选择服务将其开启，然后我们就可以拿到授权码了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256341.png" alt="在这里插入图片描述"></p>
<p>然后到我们的userSerivce上，添加一下关于告警邮箱号的配置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256644.png" alt="在这里插入图片描述"></p>
<p>完成xxl-job-admin配置之后，我们不妨来测试一下，回到我们的web项目。在SayHelloHandler中编写一个算术异常。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256142.png" alt="在这里插入图片描述"></p>
<p>将项目启动，调用一下用户注册的接口。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256318.png" alt="在这里插入图片描述"></p>
<p>1分钟之后，代码执行报错，打开我们的邮箱即可发现这个问题邮件。自此，该需求完成了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256382.png" alt="在这里插入图片描述"></p>
<h3>魔改xxl-job，封装自定义starter</h3>
<h4>需求</h4>
<p>我们在使用xxl-job时发现这么一件事情，每次需要配置新任务都需要在页面疯狂点击配置，对于几个简单的配置来说还好，但是对于需要经常新增任务的web项目来说，这种配置步骤十分繁琐。 此时，我们希望有没有这样一个工具，可以让我们只需一个注解即可将执行器和任务直接注册道xxl-job-admin上，这样我们只需在编码阶段写好任务将项目启动，就可以将任务注册道xxl-job-admin中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256304.png" alt="在这里插入图片描述"></p>
<h4>实现思路</h4>
<p>做到这一点其实很简单，我们可以借由spring-boot自动装配机制，并定义一个注解，扫描容器中所有执行器和带有这个注解的任务，然后调用xxl-job的api将这些任务注册到xxl-job-admin中。</p>
<h4>编写组件</h4>
<p>我们首先创建一个spring-boot项目，引入下面这几个依赖</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- xxl-job-core --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xuxueli<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxl-job-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${xxl-job.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${hutool.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>首先我们从xxl-job-admin中将这两个类拷过来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256957.png" alt="在这里插入图片描述"></p>
<p>我们在web界面操作xxl-job-admin时发现所有操作都需要基于一个cookie，而这个cookie是需要登录才能得到的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256261.png" alt="在这里插入图片描述"></p>
<p>所以我们定义一个接口，后续将登录和获取cookie保存到内存的操作补充上。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobLoginService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 登录xxl-job-admin
     */</span>
    <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取登录后的cookie
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre></div><p>同理然后编写一个接口，定义所有关于执行器的bean的操作。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobGroupService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 查询执行器
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> <span class="token function">getJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 自动注册执行器
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">autoRegisterGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 精确查询执行器
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">preciselyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre></div><p>上文提到我们也需要将任务注册到xxl-job上，所以在这里我们也把这个接口定义上。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobInfoService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 查询xxl-job-admin上是否有这个任务
     * <span class="token keyword">@param</span> <span class="token parameter">jobGroupId</span>
     * <span class="token keyword">@param</span> <span class="token parameter">executorHandler</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getJobInfo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> jobGroupId<span class="token punctuation">,</span> <span class="token class-name">String</span> executorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 添加任务到xxl-job-admin上
     * <span class="token keyword">@param</span> <span class="token parameter">xxlJobInfo</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">Integer</span> <span class="token function">addJobInfo</span><span class="token punctuation">(</span><span class="token class-name">XxlJobInfo</span> xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre></div><p>自此所有我们需要的行为都有了，我们就需要开始将逻辑补充上了。首先是登录和获取cookie的方法。代码含义都详细注释了，读者可以自行查阅，这里简单说明一下登录进行的操作就是:</p>
<ol>
<li>调用xxl-job登录接口</li>
<li>成功后获取cookie</li>
<li>将cookie缓存到map中</li>
</ol>
<p>而获取cookie的方式也很简单，从map中取出来返回出去就好了。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JobLoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">JobLoginService</span> <span class="token punctuation">{</span>


    <span class="token doc-comment comment">/**
     * 从配置文件获取的xxl-job地址
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.admin.addresses}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> adminAddresses<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 从配置文件获取的登录用户名
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.admin.username}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 从xxl-job获取的登录密码
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.admin.password}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 缓存cookie的密码
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> loginCookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 调用登录接口将XXL_JOB_LOGIN_IDENTITY缓存下来后续使用
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//调用登录接口</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> adminAddresses <span class="token operator">+</span> <span class="token string">"/login"</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//获取登录后的cookie</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpCookie</span><span class="token punctuation">&gt;</span></span> cookies <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//尝试获得XXL_JOB_LOGIN_IDENTITY</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpCookie</span><span class="token punctuation">&gt;</span></span> cookieOpt <span class="token operator">=</span> cookies<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>cookie <span class="token operator">-&gt;</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"XXL_JOB_LOGIN_IDENTITY"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cookieOpt<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"get xxl-job cookie error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//如果存在这个cookie则将其缓存起来</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> cookieOpt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        loginCookie<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"XXL_JOB_LOGIN_IDENTITY"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 尝试从内存中获取cookie，如果没有则尝试3次登录即可
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> cookieStr <span class="token operator">=</span> loginCookie<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"XXL_JOB_LOGIN_IDENTITY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cookieStr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"XXL_JOB_LOGIN_IDENTITY="</span> <span class="token operator">+</span> cookieStr<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"get xxl-job cookie error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre></div><p>然后就是执行器注册的逻辑了，整体来说有两个方法，分别是精确查询执行器和注册执行器的方法，含义都详尽注释在代码上，读者可自行参阅。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JobGroupServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">JobGroupService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.admin.addresses}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> adminAddresses<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.appname}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> appName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.title}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

    <span class="token comment">/*
     * 执行器地址类型：0=自动注册、1=手动录入
     * */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.addressType:0}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> addressType<span class="token punctuation">;</span>

    <span class="token comment">/*
     * 执行器地址列表，多地址逗号分隔(手动录入)
     * */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.addressList:}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> addressList<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JobLoginService</span> jobLoginService<span class="token punctuation">;</span>



    <span class="token doc-comment comment">/**
     * 精确查询执行器
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preciselyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//调用xxl-job模糊查询job的api</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> jobGroup <span class="token operator">=</span> <span class="token function">getJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//精确匹配执行器名称</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> has <span class="token operator">=</span> jobGroup<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>xxlJobGroup <span class="token operator">-&gt;</span> xxlJobGroup<span class="token punctuation">.</span><span class="token function">getAppname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span>
                        <span class="token operator">&amp;&amp;</span> xxlJobGroup<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//返回该执行器是否存在</span>
        <span class="token keyword">return</span> has<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 查询执行器列表
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> <span class="token function">getJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> adminAddresses <span class="token operator">+</span> <span class="token string">"/jobgroup/pageList"</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">"appname"</span><span class="token punctuation">,</span> appName<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span>jobLoginService<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSONArray</span> array <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getByPath</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> o<span class="token punctuation">,</span> <span class="token class-name">XxlJobGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 调用xxl-job保存执行器的api，将执行器保存到xxl-job上
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">autoRegisterGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//组装请求地址</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> adminAddresses <span class="token operator">+</span> <span class="token string">"/jobgroup/save"</span><span class="token punctuation">;</span>
        
        <span class="token comment">//组装表单参数</span>
        <span class="token class-name">HttpRequest</span> httpRequest <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">"appname"</span><span class="token punctuation">,</span> appName<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//组装地址类型和注册地址</span>
        httpRequest<span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">"addressType"</span><span class="token punctuation">,</span> addressType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>addressType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Strings</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>addressList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"手动录入模式下,执行器地址列表不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            httpRequest<span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">"addressList"</span><span class="token punctuation">,</span> addressList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//执行请求，带上我们之前缓存的cookie</span>
        <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span>jobLoginService<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> code <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getByPath</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//返回200就说明注册成功</span>
        <span class="token keyword">return</span> code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

   

<span class="token punctuation">}</span>
</code></pre></div><p>最后就是任务注册的接口实现了，核心方法也是模糊查询任务列表和注册任务两个方法，读者参阅注释即可理解，这里不多赘述。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JobInfoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">JobInfoService</span> <span class="token punctuation">{</span>

    <span class="token comment">//xxl-job地址</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.admin.addresses}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> adminAddresses<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JobLoginService</span> jobLoginService<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 模糊查询任务列表
     *
     * <span class="token keyword">@param</span> <span class="token parameter">jobGroupId</span>
     * <span class="token keyword">@param</span> <span class="token parameter">executorHandler</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getJobInfo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> jobGroupId<span class="token punctuation">,</span> <span class="token class-name">String</span> executorHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//组装查询url</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> adminAddresses <span class="token operator">+</span> <span class="token string">"/jobinfo/pageList"</span><span class="token punctuation">;</span>
        <span class="token comment">//调用查询接口</span>
        <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">"jobGroup"</span><span class="token punctuation">,</span> jobGroupId<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">"executorHandler"</span><span class="token punctuation">,</span> executorHandler<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">"triggerStatus"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span>jobLoginService<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSONArray</span> array <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getByPath</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobInfo</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> o<span class="token punctuation">,</span> <span class="token class-name">XxlJobInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//返回任务列表</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 添加一个任务到任务列表
     *
     * <span class="token keyword">@param</span> <span class="token parameter">xxlJobInfo</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">addJobInfo</span><span class="token punctuation">(</span><span class="token class-name">XxlJobInfo</span> xxlJobInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//组装查询url</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> adminAddresses <span class="token operator">+</span> <span class="token string">"/jobinfo/add"</span><span class="token punctuation">;</span>
        <span class="token comment">//执行添加逻辑</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> paramMap <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">beanToMap</span><span class="token punctuation">(</span>xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span>paramMap<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span>jobLoginService<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//处理并返回结果</span>
        <span class="token class-name">JSON</span> json <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> code <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">getByPath</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">getByPath</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"add jobInfo error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><p>自此所有核心工作方法都完成了。我们就可以基于spring-boot的自动装配自动调用这些方法完成执行器和任务的注册。</p>
<p>首先我们定义一个注解，用于要注册到xxl-job的任务的信息。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 用于实现任务自动注册
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">XxlRegister</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 任务执行的cron表达式
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 任务描述
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">jobDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"default jobDesc"</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 任务作者
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"default Author"</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     * 默认为 ROUND 轮询方式
     * 可选： FIRST 第一个
     * */</span>
    <span class="token class-name">String</span> <span class="token function">executorRouteStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"ROUND"</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 如果是1则自动注册
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">int</span> <span class="token function">triggerStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>重点来了,现在我们要编写一个XxlJobAutoRegister扫描容器中带有XxlJob、XxlRegister的方法，并通过xxl-job-admin的api将其注册上去。</p>
<p>代码逻辑很简单，通过ApplicationContextAware获取容器中的bean，然后基于ApplicationListener监听容器加载情况，在容器准备好提供服务时，做下面这几件事:</p>
<ol>
<li>通过ApplicationContextAware找到所有的bean</li>
<li>遍历bean，找到带有XxlJob的方法。</li>
<li>查看带有XxlJob的方法是否有XxlRegister，如果有则将其注册到xxl-job-admin</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxlJobAutoRegister</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationReadyEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
        <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JobGroupService</span> jobGroupService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JobInfoService</span> jobInfoService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationReadyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//注册执行器</span>
        <span class="token function">addJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//注册任务</span>
        <span class="token function">addJobInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//自动注册执行器</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果存在执行器，则直接返回，说明已经注册过了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jobGroupService<span class="token punctuation">.</span><span class="token function">preciselyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token comment">//否则手动注册一下执行器</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jobGroupService<span class="token punctuation">.</span><span class="token function">autoRegisterGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"auto register xxl-job group success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 将带有XxlRegister的注解的方法提交到xxl-job-admin中
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addJobInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> jobGroups <span class="token operator">=</span> jobGroupService<span class="token punctuation">.</span><span class="token function">getJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">XxlJobGroup</span> xxlJobGroup <span class="token operator">=</span> jobGroups<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//拿到所有的bean名称</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanDefinitionNames <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanDefinitionName <span class="token operator">:</span> beanDefinitionNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//找到这个bean中带有XxlJob的方法</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">XxlJob</span><span class="token punctuation">&gt;</span></span> methodWithXxlJob <span class="token operator">=</span> <span class="token class-name">MethodIntrospector</span><span class="token punctuation">.</span><span class="token function">selectMethods</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token class-name">MethodIntrospector<span class="token punctuation">.</span>MetadataLookup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJob</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> method <span class="token operator">-&gt;</span> <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">findMergedAnnotation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">XxlJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">XxlJob</span><span class="token punctuation">&gt;</span></span> methodXxlJobEntry <span class="token operator">:</span> methodWithXxlJob<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//带有XxlJob的方法名</span>
                <span class="token class-name">Method</span> executeMethod <span class="token operator">=</span> methodXxlJobEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//XxlJob注解配置的值</span>
                <span class="token class-name">XxlJob</span> xxlJob <span class="token operator">=</span> methodXxlJobEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//如果executeMethod带有XxlRegister注解</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>executeMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">XxlRegister</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>


                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobInfo</span><span class="token punctuation">&gt;</span></span> jobInfo <span class="token operator">=</span> jobInfoService<span class="token punctuation">.</span><span class="token function">getJobInfo</span><span class="token punctuation">(</span>xxlJobGroup<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xxlJob<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jobInfo<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">//因为是模糊查询，需要再判断一次</span>
                        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobInfo</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> jobInfo<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>xxlJobInfo <span class="token operator">-&gt;</span> xxlJobInfo<span class="token punctuation">.</span><span class="token function">getExecutorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>xxlJob<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">//如果任务已经存在则不管了</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">//创建任务并注册</span>
                    <span class="token class-name">XxlRegister</span> xxlRegister <span class="token operator">=</span> executeMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">XxlRegister</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">XxlJobInfo</span> xxlJobInfo <span class="token operator">=</span> <span class="token function">createXxlJobInfo</span><span class="token punctuation">(</span>xxlJobGroup<span class="token punctuation">,</span> xxlJob<span class="token punctuation">,</span> xxlRegister<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Integer</span> jobInfoId <span class="token operator">=</span> jobInfoService<span class="token punctuation">.</span><span class="token function">addJobInfo</span><span class="token punctuation">(</span>xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 基于XxlRegister封装成一个xxlJobInfo对象提交到xxl-job-admin中
     * <span class="token keyword">@param</span> <span class="token parameter">xxlJobGroup</span>
     * <span class="token keyword">@param</span> <span class="token parameter">xxlJob</span>
     * <span class="token keyword">@param</span> <span class="token parameter">xxlRegister</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">XxlJobInfo</span> <span class="token function">createXxlJobInfo</span><span class="token punctuation">(</span><span class="token class-name">XxlJobGroup</span> xxlJobGroup<span class="token punctuation">,</span> <span class="token class-name">XxlJob</span> xxlJob<span class="token punctuation">,</span> <span class="token class-name">XxlRegister</span> xxlRegister<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">XxlJobInfo</span> xxlJobInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setJobGroup</span><span class="token punctuation">(</span>xxlJobGroup<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setJobDesc</span><span class="token punctuation">(</span>xxlRegister<span class="token punctuation">.</span><span class="token function">jobDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>xxlRegister<span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setScheduleType</span><span class="token punctuation">(</span><span class="token string">"CRON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setScheduleConf</span><span class="token punctuation">(</span>xxlRegister<span class="token punctuation">.</span><span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setGlueType</span><span class="token punctuation">(</span><span class="token string">"BEAN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setExecutorHandler</span><span class="token punctuation">(</span>xxlJob<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setExecutorRouteStrategy</span><span class="token punctuation">(</span>xxlRegister<span class="token punctuation">.</span><span class="token function">executorRouteStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setMisfireStrategy</span><span class="token punctuation">(</span><span class="token string">"DO_NOTHING"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setExecutorBlockStrategy</span><span class="token punctuation">(</span><span class="token string">"SERIAL_EXECUTION"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setExecutorTimeout</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setExecutorFailRetryCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setGlueRemark</span><span class="token punctuation">(</span><span class="token string">"GLUE代码初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setTriggerStatus</span><span class="token punctuation">(</span>xxlRegister<span class="token punctuation">.</span><span class="token function">triggerStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> xxlJobInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><p>自此我们的组件开发完成了，为了让上面的XxlJobAutoRegister，我们需要编写一个配置类XxlJobPlusConfig，他会扫描XxlJobAutoRegister的包。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.xxl.job.plus.executor"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxlJobPlusConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后编写一个spring.factories，将XxlJobPlusConfig路径写入，确保其他引入该组件时会自动装配XxlJobAutoRegister将指定的xxl-job注册上去。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token operator">=</span><span class="token punctuation">\</span>
  com.xxl.job.plus.executor.config.XxlJobPlusConfig
</code></pre></div><h4>引入组件并进行测试</h4>
<p>首先将上述组件打包，然后在需要使用这个组件的应用中引入</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.cn.hydra<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxljob-autoregister-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>以笔者为例，这里直接使用xxl源码自带的spring-boot项目。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256822.png" alt="在这里插入图片描述"></p>
<p>编写一个自定义的bean</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>
    
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TestService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testJob"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@XxlRegister</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 0 0 * * ? *"</span><span class="token punctuation">,</span>
            author <span class="token operator">=</span> <span class="token string">"mjx"</span><span class="token punctuation">,</span>
            jobDesc <span class="token operator">=</span> <span class="token string">"测试job"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testJob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@XxlRegister</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 0 0 * * ? *"</span><span class="token punctuation">,</span>
            triggerStatus <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello this is mjx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre></div><p>最后新增如下配置</p>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># 新增配置项，必须项</span>
<span class="token comment"># admin用户名</span>
<span class="token key attr-name">xxl.job.admin.username</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>
<span class="token comment"># admin 密码</span>
<span class="token key attr-name">xxl.job.admin.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token comment"># 执行器名称</span>
<span class="token key attr-name">xxl.job.executor.title</span><span class="token punctuation">=</span><span class="token value attr-value">mjx</span>

<span class="token comment"># 新增配置项，可选项</span>
<span class="token comment"># 执行器地址类型：0=自动注册、1=手动录入，默认为0</span>
<span class="token key attr-name">xxl.job.executor.addressType</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token comment"># 在上面为1的情况下，手动录入执行器地址列表，多地址逗号分隔</span>
<span class="token key attr-name">xxl.job.executor.addressList</span><span class="token punctuation">=</span><span class="token value attr-value">http://127.0.0.1:9999</span>
</code></pre></div><p>最后将xxl-job-admin和xxl-job启动，打开xxl-job的管理页面，可以看到我们的任务都注册进来了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256178.png" alt="在这里插入图片描述"></p>
<p>执行该任务一次</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256241.png" alt="在这里插入图片描述"></p>
<p>可以看到，控制台成功，自此我们的实践都完成了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256121.png" alt="在这里插入图片描述"></p>
<h4>关于源码</h4>
<p>笔者本次功能都是参考这个仓库的项目，感兴趣的读者可以自行调试一下。</p>
<p>https://github.com/trunks2008/xxl-job-auto-register</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256032.png" type="image/png"/>
    </item>
    <item>
      <title></title>
      <link>https://maijunxuan.cn/%E6%97%A5%E5%B8%B8/windows%E7%AB%AF%E5%8F%A3%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3.html</link>
      <guid>https://maijunxuan.cn/%E6%97%A5%E5%B8%B8/windows%E7%AB%AF%E5%8F%A3%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3.html</guid>
      <source url="https://maijunxuan.cn/rss.xml"></source>
      <description>问题描述 windows上运行某些进程时出现端口冲突，由于笔者对Linux命令比较熟悉，对于windows查看端口以及管道符字符串匹配的指令不太熟悉。 所以记录一篇关于windows查端口的办法记录，方便后续查看解决。 解决办法 使用命令查看结果 首先键入以下命令查看端口号对应的进程的pid netstat -ano | findstr &amp;quot;:80 &amp;quot; ...</description>
      <pubDate>Mon, 28 Aug 2023 00:49:57 GMT</pubDate>
      <content:encoded><![CDATA[<h2>问题描述</h2>
<p><code>windows</code>上运行某些进程时出现端口冲突，由于笔者对<code>Linux</code>命令比较熟悉，对于<code>windows</code>查看端口以及管道符字符串匹配的指令不太熟悉。</p>
<p>所以记录一篇关于<code>windows</code>查端口的办法记录，方便后续查看解决。</p>
<h2>解决办法</h2>
<h3>使用命令查看结果</h3>
<p>首先键入以下命令查看端口号对应的进程的pid</p>
<p><code>netstat -ano | findstr ":80 "</code></p>
<p>每行数据自左向右依次为:协议 、本地地址 、 外部地址、 状态 、<code>PID</code>,以笔者为例可以看到80端口号的进程为<code>10076</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202304021052456.png" alt="image-20230315144837518"></p>
<h3>调出任务管理器，找到pid进程将其结束</h3>
<p>右键下方调出<code>任务管理器</code>-&gt;<code>详细信息</code> 将pid排序找到 刚刚的pid 将其结束</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202304021052239.png" alt="在这里插入图片描述"></p>
<p>点击pid升序排序，找到上面命令找到的进程pid将其右键关闭即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202304021052784.png" alt="image-20230315144849243"></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202304021052456.png" type="image/png"/>
    </item>
    <item>
      <title></title>
      <link>https://maijunxuan.cn/%E6%97%A5%E5%B8%B8/%E8%A7%A3%E5%86%B3%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81.html</link>
      <guid>https://maijunxuan.cn/%E6%97%A5%E5%B8%B8/%E8%A7%A3%E5%86%B3%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81.html</guid>
      <source url="https://maijunxuan.cn/rss.xml"></source>
      <description>问题 笔者最近创建一个模块引入mongoDB相关依赖，启动时出现下面这个问题，很明显是项目中某些依赖的log4j和slf4j依赖冲突了，所以我们必须定位到导致冲突的依赖并将这些依赖排除。 解决思路 下载安装Maven Helper 查阅网上资料大部分答案都推荐下载Maven Helper，所以笔者也下载了这个插件，通过这个插件定位到冲突的日志依赖。 如...</description>
      <pubDate>Mon, 28 Aug 2023 00:49:57 GMT</pubDate>
      <content:encoded><![CDATA[<p>问题</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202304021053501.png" type="image/png"/>
    </item>
    <item>
      <title>Arthas使用小结</title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/Arthas%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/Arthas%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Arthas使用小结</source>
      <description>Arthas使用小结 前言 可能由于日常开发的不注意，所以项目部署到生产环境时不时会出现一些奇奇怪怪的问题，这时候我们就需要一款便捷且轻量的工具监控并排查问题。 这时候我们就不得不提一下Arthas,Arthas是一款强大的开源Java诊断程序，它可以非常方便的启动并以界面式的方式和Java程序进行交互,支持监控程序的内存使用情况、线程信息、gc情况、...</description>
      <pubDate>Mon, 28 Aug 2023 00:49:57 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>前言</h2>
<p>可能由于日常开发的不注意，所以项目部署到生产环境时不时会出现一些奇奇怪怪的问题，这时候我们就需要一款便捷且轻量的工具监控并排查问题。</p>
<p>这时候我们就不得不提一下Arthas,Arthas是一款强大的开源Java诊断程序，它可以非常方便的启动并以界面式的方式和Java程序进行交互,支持监控程序的内存使用情况、线程信息、gc情况、甚至可以反编译并修改现上代码等。</p>
<p>如下图，arthas的运行原理大致是以下几个步骤:</p>
<ol>
<li>启动arthas选择目标Java程序后，artahs会向目标程序注入一个代理。</li>
<li>代理会创建一个集HTTP和Telnet的服务器与客户端建立连接。</li>
<li>客户端与服务端建立连接。</li>
<li>后续客户端需要监控或者调整程序都可以通过服务端Java Instrumentation机制和应用程序产生交互。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913847.png" alt="在这里插入图片描述"></p>
<p>为了让读者可以快速了并熟练掌握Arhtas的基本使用，笔者就以几个比较常见的例子来演示一下Arthas的日常使用的常规套路。</p>
<h2>实践</h2>
<h3>快速开始</h3>
<p>在介绍几个典型的案例之前，我们需要先下载一下Arthas，并了解Arthas的一些简单的使用方式(注意:笔者为了方便演示所用的环境都是基于win 10，对于Linux环境而言操作也差不多)，Arthas的官方地址如下:</p>
<p><a href="https://arthas.aliyun.com/" target="_blank" rel="noopener noreferrer">https://arthas.aliyun.com/(opens new window)</a></p>
<p>考虑到方便笔者一般是使用命令行的方式下载:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-O</span> https://arthas.aliyun.com/arthas-boot.jar
</code></pre></div><p>完成后我们通过下面这个命令就可以将Arthas启动了。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> arthas-boot.jar
</code></pre></div><p>可以看到刚刚进入界面时，Arthas就会分别为每个服务器中正在运行的Java程序标上序号，我们只需输入对应序号并点击回车即可进行对目标程序的监控，为了演示笔者任意选择一个2，并点击回车。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913853.png" alt="在这里插入图片描述"></p>
<p>随后我们就进入的交互界面，如下图:</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913034.png" alt="在这里插入图片描述"></p>
<p>Arthas最常用的监控指令就是dashboard，对于dashboard的使用说明，我们可以像使用Linux一下在dashboard命令后面追加一个--help。</p>
<p>如下图所示，可以看出dashboard的用法大抵是这样的:</p>
<ol>
<li>默认参数都不加，每隔5s刷新一次面板。</li>
<li>-i 指定刷新面板间隔。</li>
<li>-n 指定刷新次数。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913798.png" alt="在这里插入图片描述"></p>
<p>所以假如我们希望每10s刷新一次，重复执行3次的指令就是:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>dashboard <span class="token parameter variable">-i</span> <span class="token number">10000</span> <span class="token parameter variable">-n</span> <span class="token number">3</span>
</code></pre></div><p>此时面板就会每隔10s刷新一次界面，监控界面如下图所示，从图中不难看出dashboard大抵范围3个板块:</p>
<ol>
<li>线程信息版块，对应的列名分别是:id、线程名、所属线程组、优先级、线程运行状态、cpu使用率、延迟时间、运行时间、是否被打断。</li>
<li>内存使用版块，大体都是记录着各代内存和gc情况。</li>
<li>服务器运行参数版块，这一版块记录着程序当前运行服务器的内核版本信息、jdk版本等。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913509.png" alt="在这里插入图片描述"></p>
<p>在Arthas中，如果我们希望退出dashboard直接按ctrl+c即可，如果我们希望退出当前Java程序的交互界面，输入exit即可。</p>
<h3>定位CPU 100%问题</h3>
<p>CPU 100%问题算是生产环境下最难排查的问题了，在没有Arthas之前，我们常规的排查思路大致为:</p>
<ol>
<li>使用top确定是否为java进程。</li>
<li>如果是，则使用jps定位Java进程号。</li>
<li>找到最吃资源的线程号。</li>
<li>将线程号转为十六进制。</li>
<li>通过jstack导出日志并使用全局搜索十六进制线程号定位到问题代码段。</li>
</ol>
<p>如上所述，是不是很繁琐呢？有了Arthas之后，问题的定位就会简单快速许多，为了演示这个例子，笔者使用Spring Boot项目编写了一段模拟CPU 100%问题的代码段，可以看到笔者使用</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 一个线程数只有1的线程池
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"cpu-100"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">loopThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">cpuHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 极度消耗CPU的线程
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpuHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 添加到线程</span>
        threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cpu working"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 无限循环的线程
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loopThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"死循环线程工作中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"thread"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>完成编写后，我们将项目启动并请求该地址，不久后你就会发现CPU直接飙升接近100%，此时我们的arthas就派上用场了，首先我们自然是将arthas启动。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> arthas-boot.jar
</code></pre></div><p>此时控制台会出现下面几个选项，它通过不同序号标明不同的Java程序，我们看到我们的目标程序ArthasExampleApplication，序号为1，所以我们输入1按回车。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>F:<span class="token punctuation">\</span>github<span class="token operator">&gt;</span>java <span class="token parameter variable">-jar</span> arthas-boot.jar
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> JAVA_HOME: D:<span class="token punctuation">\</span>myinstall<span class="token punctuation">\</span>jdk8<span class="token punctuation">\</span>jre8
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> arthas-boot version: <span class="token number">3.6</span>.9
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Found existing <span class="token function">java</span> process, please choose one and input the serial number of the process, eg <span class="token builtin class-name">:</span> <span class="token number">1</span>. Then hit ENTER.
* <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: <span class="token number">18720</span> com.example.arthasExample.ArthasExampleApplication
  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: <span class="token number">19300</span> org.jetbrains.jps.cmdline.Launcher
  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>: <span class="token number">7876</span> org.jetbrains.idea.maven.server.RemoteMavenServer
  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>: <span class="token number">14488</span>
</code></pre></div><p>进入控制台，我们直接键入thread命令可以看到，有一个名为 pool-1-thread-1的线程CPU使用率非常高，所以我们需要定位它所工作的代码段。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913572.png" alt="在这里插入图片描述"></p>
<p>由控制台可知，它的序号为59，所以我们直接键入:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> thread <span class="token number">59</span>
</code></pre></div><p>很快的，我们直接定位到了问题代码段，在TestController的42行。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280838765.png" alt="在这里插入图片描述"></p>
<p>知道了代码的位置之后，我们根据类的包路径<code>com.example.arthasExample.TestController</code>直接通过Arthas反编译查看源码，命令如下:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>jad --source-only  com.example.arthasExample.TestController
</code></pre></div><p>最终我们定位到了问题代码，即时修复即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913367.png" alt="在这里插入图片描述"></p>
<h3>定位线程死锁问题</h3>
<p>对于线程死锁问题，我们也给出下面这样一段示例代码，线程1先取锁1再取锁2，线程2反之，两者取锁顺序构成环路造成死锁。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> //两把锁
    private Object lock1 <span class="token operator">=</span> new Object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    private Object lock2 <span class="token operator">=</span> new Object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    @RequestMapping<span class="token punctuation">(</span><span class="token string">"dead-lock"</span><span class="token punctuation">)</span>
    public void <span class="token function-name function">deadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        //线程1先取得锁1，休眠后取锁2
        new Thread<span class="token punctuation">((</span><span class="token punctuation">)</span> -<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            synchronized <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                try <span class="token punctuation">{</span>
                    log.info<span class="token punctuation">(</span><span class="token string">"t1 successfully acquired the lock1......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    TimeUnit.<span class="token environment constant">SECONDS</span>.sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>


                synchronized <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log.info<span class="token punctuation">(</span><span class="token string">"t1 successfully acquired the lock1......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>, <span class="token string">"t1"</span><span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        //线程2先取得锁2，休眠后取锁1
        new Thread<span class="token punctuation">((</span><span class="token punctuation">)</span> -<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            synchronized <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                try <span class="token punctuation">{</span>
                    log.info<span class="token punctuation">(</span><span class="token string">"t2 successfully acquired the lock2......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    TimeUnit.<span class="token environment constant">SECONDS</span>.sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>


                synchronized <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log.info<span class="token punctuation">(</span><span class="token string">"t2 successfully acquired the lock1......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>, <span class="token string">"t2"</span><span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>了解代码流程之后，我们直接调用这个接口，打开Arthas查看键入thread线程信息可以看到我们的t1和t2两个线程处于等待状态，大概率存在问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913618.png" alt="在这里插入图片描述"></p>
<p>随后我们直接键入<code>thread -b</code>，发现t2线程被锁住了，由此断定这两个线程看定存在死锁，</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913230.png" alt="在这里插入图片描述"></p>
<p>由上述结果我们可知两个线程的id分别是65和66，所以使用<code>thread id号</code>的命令直接定位到问题代码段并解决问题即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913040.png" alt="在这里插入图片描述"></p>
<h3>反编译查看代码</h3>
<p>上文我们其实已经用到了jad这个反编译命令，对于笔者来说，jad有两种比较常见的用法，除了上述那种反编译类的指令<code>jad --source-only 类的包路径</code>，还有一种定位方法代码段的命令<code>jad --source-only 类的包路径 方法名</code>。</p>
<p>例如笔者想定位TestController的deadLock代码，我们就可以键入:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>jad --source-only  com.example.arthasExample.TestController deadLock
</code></pre></div><p>如下图，我们可以直接看到的方法的代码:</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913501.png" alt="在这里插入图片描述"></p>
<h3>定位字段信息(不常用)</h3>
<p>我们希望看到某个类下所有字段的详情，我们就可以使用这条命令</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sc <span class="token parameter variable">-d</span> <span class="token parameter variable">-f</span> 类的包路径
</code></pre></div><p>例如笔者想查看TestController的字段详情，就可以键入这条命令</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sc <span class="token parameter variable">-d</span> <span class="token parameter variable">-f</span> com.example.arthasExample.TestController
</code></pre></div><p>可以看到这条指令不仅可以查看字段的定义和注解，还可以查看线程池的使用情况以及集合内部的value。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913330.png" alt="在这里插入图片描述"></p>
<h3>查看方法列表(不常用)</h3>
<p>这条命令笔者不是很常用，为了教程的完整性笔者也演示一下，假如我们希望查看某个类的方法，可以使用:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sm 类的包路径
</code></pre></div><p>以笔者为例,查看TestController的方法为:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> sm com.example.arthasExample.TestController
</code></pre></div><p>输出结果如下:</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913238.png" alt="在这里插入图片描述"></p>
<h3>静态变量监控(常用)</h3>
<p>Arthas提供了对静态变量的分析，以下面这段代码为例，如果笔者希望看到list 内部详情，我们就可以使用ognl。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> private static List<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> list <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    @RequestMapping<span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>
    public void <span class="token function-name function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            list.add<span class="token punctuation">(</span><span class="token string">"val"</span> + i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>在我们执行完接口完成添加操作之后，我们可以直接使用ognl进行监控。例如我们希望查看上述list的内容，我们就可以使用命令:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> ognl <span class="token string">'@类的包路径@变量名'</span>
</code></pre></div><p>所以如果笔者查看list的命令为:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> ognl <span class="token string">'@com.example.arthasExample.TestController@list'</span>
</code></pre></div><p>输出结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913978.png" alt="在这里插入图片描述"></p>
<p>当然ognl还有一些比较特殊的用法，例如查看集合的长度，添加元素到集合中等操作，具体可以参考GitHub这个issue:</p>
<p><a href="https://github.com/alibaba/arthas/issues/71" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/arthas/issues/71(opens new window)</a></p>
<h3>运行耗时性能问题排查</h3>
<p>对于统计耗时的操作我们经常会用打日志的方式来监控，在环境复杂的生产环境，我们常因为欠缺考虑而忘记对某些方法进行监控。 同样的Arthas也为我们提供了一些便捷的命令来完成对方法耗时的监控与统计:</p>
<p>笔者这里给出一段UserServiceImpl 模拟用户查询时进行参数校验、其他service调用、redis调用、MySQL调用。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@Service
@Slf4j
public class UserServiceImpl <span class="token punctuation">{</span>

    public JSONObject queryUser<span class="token punctuation">(</span>Integer uid<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>
        check<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redis<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token builtin class-name">return</span> mysql<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public void service<span class="token punctuation">(</span>Integer uid<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>
        log.info<span class="token punctuation">(</span><span class="token string">"调用其他service。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TimeUnit.<span class="token environment constant">SECONDS</span>.sleep<span class="token punctuation">(</span>RandomUtil.randomLong<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">))</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    public void redis<span class="token punctuation">(</span>Integer uid<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>
        log.info<span class="token punctuation">(</span><span class="token string">"查看redis缓存数据。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TimeUnit.MILLISECONDS.sleep<span class="token punctuation">(</span>RandomUtil.randomInt<span class="token punctuation">(</span><span class="token number">100</span>, <span class="token number">200</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public JSONObject mysql<span class="token punctuation">(</span>Integer uid<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>
        log.info<span class="token punctuation">(</span><span class="token string">"查询MySQL数据......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TimeUnit.<span class="token environment constant">SECONDS</span>.sleep<span class="token punctuation">(</span>RandomUtil.randomInt<span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">4</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
        JSONObject jsonObject <span class="token operator">=</span> new JSONObject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject.putOnce<span class="token punctuation">(</span><span class="token string">"name"</span>, <span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject.putOnce<span class="token punctuation">(</span><span class="token string">"age"</span>, <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin class-name">return</span> jsonObject<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public boolean check<span class="token punctuation">(</span>Integer uid<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uid <span class="token operator">==</span> null <span class="token operator">||</span> uid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log.error<span class="token punctuation">(</span><span class="token string">"非法用户id，uid:{}"</span>, uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            throw new Exception<span class="token punctuation">(</span><span class="token string">"非法用户id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>对应的controller代码如下，假如我们在生产环境下发现这个接口非常耗时，我们又没有日志，那么我们如何利用Arthas排查耗时问题呢？</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> @Autowired
    private UserServiceImpl userService<span class="token punctuation">;</span>

    @GetMapping<span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span>
    public JSONObject queryUser<span class="token punctuation">(</span>Integer uid<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>
        <span class="token builtin class-name">return</span> userService.queryUser<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre></div><p>我们可以用trace命令，我们首先用trace追踪一下TestController 的queryUser耗时的调用:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>trace com.example.arthasExample.TestController queryUser
</code></pre></div><p>可以发现TestController 并无异常，所有的耗时都在UserServiceImpl</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913210.png" alt="在这里插入图片描述"></p>
<p>所以我们再对UserServiceImpl 的queryUser进行追钟。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> trace com.example.arthasExample.UserServiceImpl queryUser
</code></pre></div><p>完成命令键入后，控制台就会阻塞监控这个方法，然后我们调用一下这个接口，可以发现原来是MySQL查询非常耗时，由此我们就可以进一步去推断问题了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913234.png" alt="在这里插入图片描述"></p>
<h3>方法耗时统计</h3>
<p>有时候我们希望监控某个方法单位时间内请求的耗时和调用情况，我们就可以使用monitor命令，例如我们希望每5s查看TestController 的queryUser的情况，我们就可以键入:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> monitor  <span class="token parameter variable">-c</span> <span class="token number">5</span> com.example.arthasExample.TestController queryUser
</code></pre></div><p>可以看到控制台会每5s输入请求次数、成功和失败次数以及平均耗时等信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913144.png" alt="在这里插入图片描述"></p>
<h3>定位出入参错误问题</h3>
<p>有时候我们希望定位某个日志没有打到的方法的出入参详情，例如上面的mysql()的出入参，我们完全可以通过Arthas的watch方法做到，对应命令为:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">watch</span> com.example.arthasExample.UserServiceImpl mysql <span class="token string">'{params[0],returnObj}'</span>
</code></pre></div><p>可以看到，我们的入参为1，出参是一个对象。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913828.png" alt="在这里插入图片描述"></p>
<p>更进一步，假如我们希望可以打印出对象的内容，那么我们就可以使用toString方法做到</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">watch</span> com.example.arthasExample.UserServiceImpl mysql <span class="token string">'{params[0],returnObj.toString()}'</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913920.png" alt="在这里插入图片描述"></p>
<p>除此之外watch 还支持很多的骚操作，具体可以参考官方文档:</p>
<p><a href="https://arthas.aliyun.com/doc/watch.html" target="_blank" rel="noopener noreferrer">https://arthas.aliyun.com/doc/watch.html(opens new window)</a></p>
<h3>监控方法调用路径</h3>
<p>还是以上文mysql方法为例，如果我们希望快速定位到它的调用路径，我们可以使用stack方法:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>stack com.example.arthasExample.UserServiceImpl mysql
</code></pre></div><p>可以看到详细的调用路径直接输出到控制台。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913207.png" alt="在这里插入图片描述"></p>
<h3>获取方法调用的过程</h3>
<p>我们希望查看方法调用时出现异常的原因，出参和入参时，可以使用tt这条指令,例如我们想查看check方法为何会报错，我们就可以使用tt</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>tt <span class="token parameter variable">-t</span> com.example.arthasExample.UserServiceImpl check
</code></pre></div><p>从输出结果来看，第二次抛出异常了，我们可以基于1001这个索引去定位问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913879.png" alt="在这里插入图片描述"></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> tt <span class="token parameter variable">-i</span> <span class="token number">1001</span>
</code></pre></div><p>最终可以得出，入参为-1</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913198.png" alt="在这里插入图片描述"></p>
<p>如果我们想重新发起调用，可以直接使用</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>tt <span class="token parameter variable">-i</span> <span class="token number">1001</span> <span class="token parameter variable">-p</span>
</code></pre></div><h3>oom问题</h3>
<p>以下面这段代码为例，笔者将堆内存改为100m，命令为<code>-Xms100m -Xmx100m</code>,启动后直接重现oom问题</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>final ThreadPoolExecutor poolExecutor <span class="token operator">=</span> new ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">100</span>, <span class="token number">100</span>, <span class="token number">1</span>, TimeUnit.MINUTES,
            new LinkedBlockingQueue<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>// 创建线程池，通过线程池，保证创建的线程存活

    @RequestMapping<span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/oom"</span><span class="token punctuation">)</span>
    public String oom<span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        poolExecutor.execute<span class="token punctuation">((</span><span class="token punctuation">)</span> -<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            Byte<span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> new Byte<span class="token punctuation">[</span><span class="token number">4</span>* <span class="token number">1024</span>* <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            localVariable.set<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>// 为线程添加变量

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin class-name">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>然后通过arthas发现老年代内存几乎已满，gc也十分频繁。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913599.png" alt="在这里插入图片描述"></p>
<p>由此我们可以直接使用Arthas的heapdump 导出文件到mat中进行进一步分析。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> heapdump D://heap.hprof
</code></pre></div><p>导出的结果如下，后续我们就可以点击detail推断到问题的源头了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913359.png" alt="在这里插入图片描述"></p>
<p>最终我们很快速的定位到了问题代码:</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913281.png" alt="在这里插入图片描述"></p>
<h3>线上替换代码</h3>
<p>有时候我们测试难免会遗漏一些情况，如下所示，我们业务要求id小于1才抛出异常，但是我们因为粗心而将判断条件写成id&lt;2，结果懵懵懂懂的就将这段代码部到了生产环境，导致业务查询出了问题。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@GetMapping<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"/user/{id}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    public JSONObject findUserById<span class="token punctuation">(</span>@PathVariable Integer <span class="token function">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log.info<span class="token punctuation">(</span><span class="token string">"id: {}"</span>,id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">id</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             throw new IllegalArgumentException<span class="token punctuation">(</span><span class="token string">"id &lt; 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token builtin class-name">return</span> new JSONObject<span class="token punctuation">(</span><span class="token punctuation">)</span>.putOnce<span class="token punctuation">(</span><span class="token string">"name"</span>,<span class="token string">"user"</span>+id<span class="token punctuation">)</span>.putOnce<span class="token punctuation">(</span><span class="token string">"age"</span>,18<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>对于生产环境，我们肯定是无法立刻重启替换jar包的，对于这类问题，我们完全可以使用arthas实现在线热更新。</p>
<p>首先第一步，我们将生产环境的字节码反编译并导出到本地，如下所示</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>jad  --source-only com.example.arthasExample.TestController <span class="token operator">&gt;</span>  d://TestController.java
</code></pre></div><p>然后我们修改一下对应的代码段</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913293.png" alt="在这里插入图片描述"></p>
<p>然后我们需要找到这个类对应类加载器的hash码</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sc <span class="token parameter variable">-d</span> *TestController <span class="token operator">|</span> <span class="token function">grep</span> classLoaderHash
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913527.png" alt="在这里插入图片描述"></p>
<p>找到对应hash码之后，我们就可以基于这个类加载器将修改后的Java文件编译成字节码文件:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> <span class="token function">mc</span> <span class="token parameter variable">-c</span> 18b4aac2 d://TestController.java <span class="token parameter variable">-d</span> d://
</code></pre></div><p>最后我们将代码热更新到正在运行的程序</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redefine d://com/example/arthasExample/TestController.class
</code></pre></div><p>此时我们传1作为参数就不会报错了，说明代码热更新成功了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913841.png" alt="在这里插入图片描述"></p>
<h3>获取spring上下文进行进一步分析操作</h3>
<p>有时候我们希望在线上获取Spring容器分析定位问题，我们完全可以通过arthas拦截到这个类并进行进一步调用和分析。</p>
<p>读过Spring MVC源码的读者可能都知道，每当又HTTP请求发送到web容器时请求进行映射转发处理时都会经过RequestMappingHandlerAdapter，从下面的类图不难看出它继承了WebApplicationObjectSupport，而该类有一个方法getWebApplicationContext可以让我们获取到spring容器的上下文，进而去分析管理spring容器。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913364.png" alt="在这里插入图片描述"></p>
<p>所以我们可以使用arthas的tt指令追踪这个类的调用：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>tt <span class="token parameter variable">-t</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod
</code></pre></div><p>然后我们随便调用一个接口，得到调用记录</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913661.png" alt="在这里插入图片描述"></p>
<p>我们就以索引为1000的调用记录，通过-w指定ognl获取到spring上下文并获取到testController然后完成一个方法调用。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>tt <span class="token parameter variable">-i</span> <span class="token number">1000</span> <span class="token parameter variable">-w</span> <span class="token string">'target.getApplicationContext().getBean("testController").findUserById(3)'</span>
</code></pre></div><p>如下图，可以看到，我们成功的完成了调用并得到了返回结果。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913634.png" alt="在这里插入图片描述"></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202307050913847.png" type="image/png"/>
    </item>
    <item>
      <title>基于Gitee实现Jenkins自动化部署SpringBoot项目</title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/%E5%9F%BA%E4%BA%8EGitee%E5%AE%9E%E7%8E%B0Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/%E5%9F%BA%E4%BA%8EGitee%E5%AE%9E%E7%8E%B0Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">基于Gitee实现Jenkins自动化部署SpringBoot项目</source>
      <description>基于Gitee实现Jenkins自动化部署SpringBoot项目 前言 近期项目组需要对老项目做一些持续集成和持续部署的要求，所以再次部署了一边Jenkins，将整个配置过程记录到博客中。 在部署的过程中笔者尝试通过阿里云的方式部署了一遍，而本文为了更直观的介绍整个过程会给予虚拟机再次进行部署。 注:本篇教程部署过程是基于外网部署的，关于内网的部署过...</description>
      <pubDate>Mon, 28 Aug 2023 00:49:57 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>前言</h2>
<p>近期项目组需要对老项目做一些持续集成和持续部署的要求，所以再次部署了一边Jenkins，将整个配置过程记录到博客中。 在部署的过程中笔者尝试通过阿里云的方式部署了一遍，而本文为了更直观的介绍整个过程会给予虚拟机再次进行部署。</p>
<p>注:本篇教程部署过程是基于外网部署的，关于内网的部署过程后续笔者会将文章整理出来。</p>
<h2>预期效果</h2>
<p>如下图我们本次配置的Jenkins可以做到下图所示的效果:</p>
<ol>
<li>我们本地开发项目提交到gitee上。</li>
<li>gitee根据我们的配置通知Jenkins更新。</li>
<li>Jenkins收到更新通知完成最新分支拉取并更新服务器项目。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719479.png" alt="在这里插入图片描述"></p>
<p>所以我们现在在gitee上准备了这样一个spring boot项目。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719266.png" alt="在这里插入图片描述"></p>
<p>可以看到如果我们键入</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>curl 127.0.0.1:9500/hello
</code></pre></div><p>那么就会输出</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Hello mjx!
</code></pre></div><p>这一点，我们也可以在服务器上得以印证。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719933.png" alt="在这里插入图片描述"></p>
<p>现在我们不妨做个修改，将输出结果改为hello java</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719098.png" alt="在这里插入图片描述"></p>
<p>然后将项目提交</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719552.png" alt="在这里插入图片描述"></p>
<p>随后可以看到我们服务器上的Jenkins自动开始打包。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719928.png" alt="在这里插入图片描述"></p>
<p>再次curl一遍，发现结果更新了。这就是我们的持续集成和持续部署的一次完整的流程，是不是比手动打包更方便呢？</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719465.png" alt="在这里插入图片描述"></p>
<p>了解了整体预期效果之后，我们就开始Jenkins的安装和配置过程。</p>
<h2>Jenkins安装与配置</h2>
<h3>准备jdk11</h3>
<p>注意，最新版本的Jenkins基本都是使用jdk11，所以我们这里需要提前准备一下jdk11。这一步网上应该很多地方都可以找到资料，感兴趣的读者可以自行配置。笔者这里服务器已经提前准备好了，就不多赘述了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719460.png" alt="在这里插入图片描述"></p>
<h3>下载Jenkins安装包</h3>
<p>首先自然是到Jenkins官网下载，笔者为了简单，就直接采用war包的形式进行部署。对应war包地址下载如下:</p>
<p><a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener noreferrer">http://mirrors.jenkins.io/war-stable/latest/jenkins.war(opens new window)</a></p>
<p>完成war包下载之后，我们将这个包推送到服务器上。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719598.png" alt="在这里插入图片描述"></p>
<h3>启动Jenkins</h3>
<p>为了保证后续步骤的顺利，我们先使用前台命令启动一下Jenkins。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/root/jdk11/bin/java <span class="token parameter variable">-jar</span> jenkins.war <span class="token parameter variable">--httpPort</span><span class="token operator">=</span><span class="token number">8080</span>
</code></pre></div><p>如下图所示，如果我们可以通过8080端口打开看到这个页面就说明Jenkins启动成功了。那么我们就可以开始进行Jenkins的初始化配置了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719811.png" alt="在这里插入图片描述"></p>
<h3>进行Jenkins初始化配置</h3>
<p>从上文图中我们知道初次访问Jenkins需要键入管理员密码，密码位置在上图也已经展示，我们按需找到对应文件复制粘贴即可。</p>
<p>我们键入命令</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> <span class="token function">cat</span> /root/.jenkins/secrets/initialAdminPassword
</code></pre></div><p>然后会看到一段输出结果，我们将其复制粘贴到页面上即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719438.png" alt="在这里插入图片描述"></p>
<p>然后直接点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719808.png" alt="在这里插入图片描述"></p>
<p>下一个页面，我们按照默认选择推荐插件安装即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719369.png" alt="在这里插入图片描述"></p>
<p>这一步可能比较久，大家需要耐心等待一会就好了。等到这一步完成之后我们进入用户基本信息配置了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719284.png" alt="在这里插入图片描述"></p>
<h3>基本信息页面配置用户基本信息</h3>
<p>如下图所示，我们只要配置后续用到的登录用户信息即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719583.png" alt="在这里插入图片描述"></p>
<p>这里选择默认即可，点击下一步即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719666.png" alt="在这里插入图片描述"></p>
<p>自此我们就完成了Jenkins最基础的配置了，后续我们就进入页面进行系统全局的配置了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719106.png" alt="在这里插入图片描述"></p>
<h3>常规插件安装</h3>
<p>笔者本次安装的版本为2.387.2，界面看起来还是蛮清爽的。这里我们需要点击下图所示的按钮进入管理界面，找到插件管理进行一些插件安装。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833088.png" alt="在这里插入图片描述"></p>
<p>如下图，我们点击manage plugins</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833008.png" alt="在这里插入图片描述"></p>
<p>首先找到Publish over SSH，点击安装。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719205.png" alt="在这里插入图片描述"></p>
<p>同理由于我们的项目为spring boot项目，所以我们要找到maven插件点击安装。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833222.png" alt="在这里插入图片描述"></p>
<p>由于我们的项目存放在gitee上，所以最后就是gitee插件了的安装了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833380.png" alt="在这里插入图片描述"></p>
<p>上述步骤安装完成之后，我们重启一下Jenkins确保插件生效以及后台启动开始进入下一步配置步骤。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nohup</span> /root/jdk11/bin/java  <span class="token parameter variable">-jar</span> /home/jenkins/jenkins.war <span class="token parameter variable">--httpPort</span><span class="token operator">=</span><span class="token number">8080</span> <span class="token operator">&amp;</span>
</code></pre></div><h3>Jenkins系统配置</h3>
<p>我们点击系统配置进入Jenkins全局配置页面。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833674.png" alt="在这里插入图片描述"></p>
<p>首先滑到最下方，找到 Publish over SSH进行远程服务器配置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833735.png" alt="在这里插入图片描述"></p>
<p>再往下滑一些输入远程服务器信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833392.png" alt="在这里插入图片描述"></p>
<p>点击一下测试配置，确认连通性，如果没问题，点击保存即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833065.png" alt="在这里插入图片描述"></p>
<h3>跨域配置解决</h3>
<p>笔者上一次搭建过程中，会遇到跨域的问题，所以这里提前设置的一下，解决跨域问题。首先我们点击全局安全设置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833032.png" alt="在这里插入图片描述"></p>
<p>找到跨域请求伪造保护，勾选启动代理兼容器，完成后点击保存即可。 <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833329.png" alt="在这里插入图片描述"></p>
<p>这里还需要补充一部，笔者上一次部署Jenkins时gitee推送请求到Jenkins报了<code>403 No valid crumb was included in the request</code>，所以我们还需要点击脚本命令行输入一段指令解决另一个跨域问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833459.png" alt="在这里插入图片描述"></p>
<p>如下图所示,在文本框中输入</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre></div><p>然后点击运行</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719603.png" alt="在这里插入图片描述"></p>
<p>出现result为true，就说明这一步成功了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835703.png" alt="在这里插入图片描述"></p>
<p>回到我们的全局安全配置页面，可以看到跨站请求伪造保护变成这样的文本，由此确认所有的跨域问题都配置解决了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719714.png" alt="在这里插入图片描述"></p>
<h3>插件配置</h3>
<p>接下来就是jdk、maven、git相关插件的配置了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833262.png" alt="在这里插入图片描述"></p>
<p>首先是maven的配置，这里只需指定maven的setting文件路径即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719978.png" alt="在这里插入图片描述"></p>
<p>然后就是jdk的配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719973.png" alt="在这里插入图片描述"></p>
<p>然后就是git的安装和配置了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833647.png" alt="在这里插入图片描述"></p>
<p>最后我们再配置一下maven的路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833946.png" alt="在这里插入图片描述"></p>
<h2>项目配置</h2>
<h3>准备一个spring-boot项目</h3>
<p>关于Jenkins的基本配置都差不多完成了，接下来我们就可以准备一个web项目实现持续集成和持续部署了。</p>
<p>这里笔者也提前准备好了一个spring boot项目并将其初始化提交到gitee仓库。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833390.png" alt="在这里插入图片描述"></p>
<h3>Jenkins上创建一个item</h3>
<p>点击新建任务</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833748.png" alt="在这里插入图片描述"></p>
<p>输入项目名称，选择构建一个maven项目并点击确定。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833469.png" alt="在这里插入图片描述"></p>
<p>然后我们就到达了项目配置页面了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832585.png" alt="在这里插入图片描述"></p>
<p>我们不妨先添加一段描述</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832645.png" alt="在这里插入图片描述"></p>
<p>然后输入项目的远程仓库地址，可以看到这里抛出了未认证的问题，原因很简单，我们没有键入git的账号和密码，所以我们点击添加键配置一下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832596.png" alt="在这里插入图片描述"></p>
<p>点击添加，选择Jenkins凭据提供者。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832235.png" alt="在这里插入图片描述"></p>
<p>输入gitee账号和密码，然后点击确定。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832726.png" alt="在这里插入图片描述"></p>
<p>然后页面就会跳转回源码管理的页面，我们选择刚刚配置的账号即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832775.png" alt="在这里插入图片描述"></p>
<p>可以看到现在不仅不会报错了，还输出了一段分支的情况，这里我们默认选择master即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832208.png" alt="在这里插入图片描述"></p>
<p>我们继续往下滑找到build，输入构建的maven命令，以笔者为例，键入的maven命令为:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>clean package <span class="token parameter variable">-U</span> <span class="token parameter variable">-Dmaven.testskip</span><span class="token operator">=</span>true
</code></pre></div><p>注意，上述测试命令无法避免编译测试，如果希望跳过所有测试的用户建议使用下面这个命令:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>clean package <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true <span class="token parameter variable">-D.test.skip</span><span class="token operator">=</span>true
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832452.png" alt="在这里插入图片描述"></p>
<p>然后我们就继续配置后置构建完成后的操作了，因为笔者后续会将项目存到tmp目录，所以笔者这里会在tmp目录写一个名为stop.sh的脚本，内容如下:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token builtin class-name">echo</span> <span class="token string">"Stop Procedure : jenkins-spring-boot.jar"</span>
<span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token function">java</span><span class="token operator">|</span><span class="token function">grep</span> jenkins-spring-boot.jar<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $2}'</span><span class="token variable">`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">'old Procedure pid:'</span><span class="token variable">$pid</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$pid</span>"</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
<span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token variable">$pid</span>
<span class="token keyword">fi</span>
<span class="token builtin class-name">exit</span> <span class="token number">0</span>
</code></pre></div><p>完成后将这个脚本权限设置为777</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">777</span> stop.sh
</code></pre></div><p>完成这个脚本配置之后，我们就可以配置post step了</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832471.png" alt="在这里插入图片描述"></p>
<p>从上图中可以看到笔者键入了一段脚本，如下所示，这段脚本做的步骤为:</p>
<ol>
<li>maven打包</li>
<li>将打包的jar包复制到tmp目录下，注意这个目录路径格式为<code>Jenkins工作路径+创建的item名+target+jar包名称</code>。</li>
<li>进入tmp目录。</li>
<li>执行停止脚本。</li>
<li>重点！！！改变BUILD_ID值，避免Jenkins脚本执行结束后将我们启动的maven项目关闭。</li>
<li>启动项目。</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 复制文件</span>
<span class="token function">cp</span> /root/.jenkins/workspace/first-project/target/jenkins-spring-boot.jar /tmp/
<span class="token comment"># 进入服务器目录</span>
<span class="token builtin class-name">cd</span> /tmp/
<span class="token comment"># 停止</span>
<span class="token function">sh</span> stop.sh
<span class="token comment"># 修改BUILD_ID避免下面的启动命令启动的子进程被Jenkins杀掉</span>
<span class="token assign-left variable">BUILD_ID</span><span class="token operator">=</span>dontKillMe
<span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> jenkins-spring-boot.jar <span class="token operator">&amp;</span>
</code></pre></div><h3>测试部署过程是否成功</h3>
<p>完成所有配置后，我们可以先看看配置是否准确，这里点击构建测试一下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832198.png" alt="在这里插入图片描述"></p>
<p>可以看到任务栏显示我们正在构建的任务，我们可以点击进度条查看进度。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832630.png" alt="在这里插入图片描述"></p>
<p>点击控制台输出可以查看构建详情。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832866.png" alt="在这里插入图片描述"></p>
<p>经过漫长的等待，可以看到我的部署成功了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832752.png" alt="在这里插入图片描述"></p>
<p>我们到服务器看看有没有启动的Java进程，如下所示，可以可以看到Jenkins成功的拉到我们的项目并将项目启动了。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost tmp<span class="token punctuation">]</span><span class="token comment"># ps -ef |grep java</span>
root       <span class="token number">9237</span>      <span class="token number">1</span>  <span class="token number">0</span> 02:54 ?        00:01:16 /root/jdk11/bin/java <span class="token parameter variable">-jar</span> jenk                                                                              ins.war <span class="token parameter variable">--httpPort</span><span class="token operator">=</span><span class="token number">8080</span>
root      <span class="token number">12928</span>      <span class="token number">1</span> <span class="token number">22</span> 05:38 ?        00:00:03 <span class="token function">java</span> <span class="token parameter variable">-jar</span> jenkins-spring-boot.                                                                              jar
root      <span class="token number">12969</span>   <span class="token number">9681</span>  <span class="token number">0</span> 05:38 pts/3    00:00:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto <span class="token function">java</span>
</code></pre></div><p>测试连通性，可以看到输出了hello java，自此Jenkins的基本部署配置是完成了。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost tmp<span class="token punctuation">]</span><span class="token comment"># curl 127.0.0.1:9500/hello</span>
Hello <span class="token function">java</span> <span class="token operator">!</span><span class="token punctuation">[</span>root@localhost tmp<span class="token punctuation">]</span><span class="token comment">#</span>
</code></pre></div><h2>基于gitee的webhook实现自动化部署</h2>
<h3>配置Jenkins中的gitee配置</h3>
<p>我们上文演示的项目可以看到，我们只需提交一下代码，Jenkins就会自动完成打包部署，这一点就是通过在gitee配置Jenkins的更新触发地址实现的，所以确保上述部署过程是成功的之后，我们不妨完善一下gitee的配置实现自动化部署。</p>
<p>我们在系统管理中找到系统配置选择gitee配置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832363.png" alt="在这里插入图片描述"></p>
<p>如下图先输入完gitee链接名和url地址。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834311.png" alt="在这里插入图片描述"></p>
<p>然后点击添加配置gitee令牌。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834504.png" alt="在这里插入图片描述"></p>
<p>点击添加后会出现一个弹窗，如下图我们将类型设置为gitee api令牌，然后点击截图所示的地址到gitee去创建令牌。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835994.png" alt="在这里插入图片描述"></p>
<p>如下图点开这个链接输入我们的账号密码就会到达这个界面，我们需要点击添加创建一个令牌。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834713.png" alt="在这里插入图片描述"></p>
<p>如下图，我们编辑好描述直接点击提交。 <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280836946.png" alt="在这里插入图片描述"></p>
<p>然后我们就会得到一串令牌的值，点击复制。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834081.png" alt="在这里插入图片描述"></p>
<p>回到Jenkins粘贴上去，然后点击添加。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834736.png" alt="在这里插入图片描述"></p>
<p>此时页面就会跳转回gitee配置页面，我们选择刚刚配置的令牌。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834592.png" alt="在这里插入图片描述"></p>
<p>点击一下测试链接，确保成功之后，我们继续下一步。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719419.png" alt="在这里插入图片描述"></p>
<h3>配置构建触发器</h3>
<p>回到Jenkins主页，点击我们配置的item</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834827.png" alt="在这里插入图片描述"></p>
<p>点击配置，进入配置界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834411.png" alt="在这里插入图片描述"></p>
<p>找到构建触发器，勾选gitee webhook触发构建，将截图中的url地址记下来，后面配置gitee会用到。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280836254.png" alt="在这里插入图片描述"></p>
<p>往下走一点，找到webhook密码点击生成，生成后将其复制下来，配置gitee会用到。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719938.png" alt="在这里插入图片描述"></p>
<p>完成配置并将url和生成密码记下来之后点击保存，进入gitee的配置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834948.png" alt="在这里插入图片描述"></p>
<h3>配置gitee webhook</h3>
<p>上文我们得到的Jenkins触发地址和webhook密码，这里我们到gitee界面完成剩余配置。首先点击我们的gitee上对应项目的地址，选择管理。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834879.png" alt="在这里插入图片描述"></p>
<p>点击添加web hook,将刚刚复制的url和密码粘贴上去，完成后点击更新。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834358.png" alt="在这里插入图片描述"></p>
<p>我们回到页面，可以看到gitee自动触发了一次构建，可以看到请求结果为成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834982.png" alt="在这里插入图片描述"></p>
<p>我们立刻到Jenkins上看看，可以看到Jenkins收到了gitee的一次构建请求，自此自动化部署就算完全打通了，我们不妨修改一下代码测试一下全流程。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834355.png" alt="在这里插入图片描述"></p>
<h3>全流程测试</h3>
<p>如下图，我们将代码修改一下并提交，只要我们看到最终服务器上输出结果为hello shak-chili就说明Jenkins回自动化部署更新了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719202.png" alt="在这里插入图片描述"></p>
<p>代码提交后不久，我们看到看了Jenkins自动触发了一次更新。我们耐心等它构建完成。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835527.png" alt="在这里插入图片描述"></p>
<p>完成后，我们请求一下这个地址。可以看到输出结果为hello shack-chili，由此可知整个自动化部署步骤算是完结了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835120.png" alt="在这里插入图片描述"></p>
<h2>其他</h2>
<p>有时候我们希望重启Jenkins让某些配置生效，亦或者让Jenkins关闭，这里笔者就介绍Jenkins中几个页面上重启和关闭的方式。</p>
<h3>浏览器进入Jenkins完成登录</h3>
<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>http<span class="token operator">:</span><span class="token comment">//Jenkins的ip地址:Jenkins启动端口/</span>
</code></pre></div><h3>关闭Jenkins</h3>
<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>http<span class="token operator">:</span><span class="token comment">//Jenkins的ip地址:Jenkins启动端口/exit </span>
</code></pre></div><h3>重启Jenkies</h3>
<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>http<span class="token operator">:</span><span class="token comment">//Jenkins的ip地址:Jenkins启动端口/restart </span>
</code></pre></div><h3>重新加载配置信息</h3>
<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>http<span class="token operator">:</span><span class="token comment">//Jenkins的ip地址:Jenkins启动端口/reload </span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719479.png" type="image/png"/>
    </item>
    <item>
      <title>基于jmeter完成压测</title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/%E5%9F%BA%E4%BA%8Ejmeter%E5%AE%8C%E6%88%90%E5%8E%8B%E6%B5%8B.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/%E5%9F%BA%E4%BA%8Ejmeter%E5%AE%8C%E6%88%90%E5%8E%8B%E6%B5%8B.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">基于jmeter完成压测</source>
      <description>基于jmeter完成压测 前言 jmeter算是我们日常比较常用的压测工具，这篇文章笔者就介绍一下基于win10完成jmeter的安装及使用。 安装 下载 首先我们必须到达官网下载对应的安装包。 https://archive.apache.org/dist/jmeter/binaries/(opens new window) 注意下载的时候必须下载B...</description>
      <pubDate>Mon, 28 Aug 2023 00:49:57 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>前言</h2>
<p><code>jmeter</code>算是我们日常比较常用的压测工具，这篇文章笔者就介绍一下基于<code>win10</code>完成<code>jmeter</code>的安装及使用。</p>
<h2>安装</h2>
<h3>下载</h3>
<p>首先我们必须到达官网下载对应的安装包。</p>
<p><a href="https://archive.apache.org/dist/jmeter/binaries/" target="_blank" rel="noopener noreferrer">https://archive.apache.org/dist/jmeter/binaries/(opens new window)</a></p>
<p>注意下载的时候必须下载<code>Binaries</code>类型而非源码类型，否则启动时可能会抛出<code>Unable to access jarfile ApacheJMeter</code>，如下图所示，笔者本次下载的就是<code>5.1</code>版本。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801797.png" alt="在这里插入图片描述"></p>
<h3>配置环境变量</h3>
<p>完成下载后，我们可以将<code>jmeter</code>存放到自己喜欢的目录然后设置环境变量。首先添加一个环境变量<code>JMETER_HOME</code>，值为<code>jmeter</code>的存放路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801761.png" alt="在这里插入图片描述"></p>
<p>然后在环境变量<code>path</code>添加一条<code>%JMETER_HOME%\bin</code></p>
<h3>启动测试</h3>
<p>配置完成环境变量后，我们就可以启动测试可用性了，我们打开<code>cmd</code>控制台输入<code>jmeter</code>，如下所示，如果输出这样一段文字并且启动的<code>jmeter</code>的图形界面则说明安装成功了。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Zsy<span class="token operator">&gt;</span>jmeter
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Don't use GUI mode <span class="token keyword">for</span> load testing <span class="token operator">!</span>, only <span class="token keyword">for</span> Test creation and Test debugging.
For load testing, use CLI Mode <span class="token punctuation">(</span>was NON GUI<span class="token punctuation">)</span>:
   jmeter <span class="token parameter variable">-n</span> <span class="token parameter variable">-t</span> <span class="token punctuation">[</span>jmx file<span class="token punctuation">]</span> <span class="token parameter variable">-l</span> <span class="token punctuation">[</span>results file<span class="token punctuation">]</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">-o</span> <span class="token punctuation">[</span>Path to web report folder<span class="token punctuation">]</span>
<span class="token operator">&amp;</span> increase Java Heap to meet your <span class="token builtin class-name">test</span> requirements:
   Modify current <span class="token function">env</span> variable <span class="token assign-left variable">HEAP</span><span class="token operator">=</span><span class="token string">"-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m"</span> <span class="token keyword">in</span> the jmeter batch <span class="token function">file</span>
Check <span class="token builtin class-name">:</span> https://jmeter.apache.org/usermanual/best-practices.html
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
</code></pre></div><h3>调整为中文</h3>
<p>我们进入<code>apache-jmeter-5.1\bin</code>找到文件<code>jmeter.properties</code>，如下图，找到<code>language</code>改为<code>zh_CN</code>，下次启动直接生效。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280837492.png" alt="在这里插入图片描述"></p>
<h2>压测</h2>
<h3>创建线程组</h3>
<p>要进行压测，我们首先需要创建一个线程组。如下图所示:</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280837042.png" alt="在这里插入图片描述"></p>
<p>创建线程组之后，我们就可以设置线程组名称，压测参数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280837720.png" alt="在这里插入图片描述"></p>
<h3>创建压测地址</h3>
<p>如下图，右键创建<code>HTTP</code>请求。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280837595.png" alt="在这里插入图片描述"></p>
<p>输入请求的协议类型，地址、端口号、映射路径、参数等。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280837765.png" alt="在这里插入图片描述"></p>
<h3>添加结果树和聚合报告</h3>
<p>然后我们就可以进行压测了，但是笔者希望看到压测结果和聚合报告，这时候我们就可以右键刚刚创建的<code>HTTP</code>请求，添加结果树和聚合报告</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280837193.png" alt="在这里插入图片描述"></p>
<h3>点击启动进行压测</h3>
<p>如下图，我们点击这个绿色按钮即可开始压测。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280837596.png" alt="在这里插入图片描述"></p>
<p>点击结果树就能看到请求结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280837037.png" alt="在这里插入图片描述"></p>
<p>点击聚合报告就能看到性能测试报告</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801274.png" alt="在这里插入图片描述"></p>
<h2>一些比较特殊的压测</h2>
<h3>基于Jmeter测试POST请求</h3>
<p>了解了jmeter整体的操作之后，我们再来补充一下日常用的最多的json传参的post请求，由于jmeter界面发起POST稍微有些麻烦，所以笔者就在这里补充一下post请求的配置步骤：</p>
<ol>
<li>首先自然是填写<code>HTTP</code>请求的常规信息，如下图，设置请求方式、映射地址、请求参数、端口号等信息:</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801288.png" alt="在这里插入图片描述"></p>
<ol>
<li>重点来了，我们必须手动创建<code>HTTP</code>信息头管理器，配置文本类型告知<code>Jmeter</code>我们当前发起的请求是参数为<code>JSON</code>格式的<code>POST</code>请求，如下图所示点击对应选项创建<code>HTTP</code>信息头管理器。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801706.png" alt="在这里插入图片描述"></p>
<p>如下图，<code>key</code>和<code>value</code>分别配置<code>Content-Type</code>和<code>application/json;charset=UTF-8</code>，完成信息头的配置之后，我们就可以发起<code>POST</code>请求开始着手压测了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280837856.png" alt="在这里插入图片描述"></p>
<h3>基于jmeter压测UDP请求</h3>
<p>某些情况下，我们可能需要对UDP进行压测，但是jmeter默认情况下是不提供UDP请求，所以我们需要下载一下UDP插件。</p>
<p>首先我们必须要下载一个jmeter插件管理器:</p>
<p><a href="https://jmeter-plugins.org/install/Install/" target="_blank" rel="noopener noreferrer">https://jmeter-plugins.org/install/Install/(opens new window)</a></p>
<p>如下图，点击这个jar包下载完成后，将其放到lib的ext目录下即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801730.png" alt="在这里插入图片描述"></p>
<p>如下图，可以看到笔者将这个插件复制到了ext目录下:</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801715.png" alt="在这里插入图片描述"></p>
<p>然后我们再次启动jmeter找到选项，找到插件管理</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801734.png" alt="在这里插入图片描述"></p>
<p>搜索UDP并选择应用改变再重启</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801013.png" alt="在这里插入图片描述"></p>
<p>可以看到重启后创建取样器就可以找到UDP的了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280837092.png" alt="在这里插入图片描述"></p>
<p>以笔者取样器为例，编码类型选的是<code>kg.apc.jmeter.samplers.UDPSampler</code>，即最基本的文本格式,更多格式可以参考jmeter官方文档中关于UDP测试模板的样例:<a href="https://jmeter-plugins.org/wiki/UDPRequest/?utm_source=jmeter&amp;utm_medium=helplink&amp;utm_campaign=UDPRequest" target="_blank" rel="noopener noreferrer">https://jmeter-plugins.org/wiki/UDPRequest/?utm_source=jmeter&amp;utm_medium=helplink&amp;utm_campaign=UDPRequest(opens new window)</a></p>
<p>可以看到笔者请求的是7000端口,发送的udp报文为hello</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801120.png" alt="在这里插入图片描述"></p>
<p>点击压测后虚拟机中的服务确实收到了udp报文，自此我们的UDP报文压测配置成功了</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801228.png" alt="在这里插入图片描述"></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202307021801797.png" type="image/png"/>
    </item>
    <item>
      <title>Netty基础概念入门小结</title>
      <link>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Netty/Netty%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8%E5%B0%8F%E7%BB%93.html</link>
      <guid>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Netty/Netty%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8%E5%B0%8F%E7%BB%93.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Netty基础概念入门小结</source>
      <description>Netty基础概念入门小结 来了解一下需要NIO 在了解Netty之前，我们必须了解一些基础的概念，首先自然是传统的BIO模型，我们以代码示例的方式给出BIO服务端的代码，逻辑非常清晰: 创建一个服务端，端口号设置为8888。 创建一个线程，等待客户端建立连接。 为了实现多客户端通信，收到客户端连接申请，需要专门创建一个新的线程和当前客户端保持通信状态...</description>
      <pubDate>Mon, 28 Aug 2023 00:49:57 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>来了解一下需要NIO</h2>
<p>在了解Netty之前，我们必须了解一些基础的概念，首先自然是传统的BIO模型，我们以代码示例的方式给出BIO服务端的代码，逻辑非常清晰:</p>
<ol>
<li>创建一个服务端，端口号设置为8888。</li>
<li>创建一个线程，等待客户端建立连接。</li>
<li>为了实现多客户端通信，收到客户端连接申请，需要专门创建一个新的线程和当前客户端保持通信状态。</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * BIO 服务端
 *
 * <span class="token keyword">@author</span> shrk-chili
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IOServer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建一个线程等待连接进来的客户端</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">waitConnect</span><span class="token punctuation">(</span>serverSocket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">waitConnect</span><span class="token punctuation">(</span><span class="token class-name">ServerSocket</span> serverSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 1. 阻塞方法获取新连接</span>
                <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 2. 每个客户端来了，就专门创建一个新的连接处理</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 3. 按字节流方式读取数据</span>
                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" receive msg:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>同理我们也给出客户端代码，笔者这里创建了3个线程创建客户端，并向客户端写数据:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * BIO 客户端
 *
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IOClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": hello world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"client-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>随后我们将服务端和客户端启动，可以看到服务端会输出下面这样的结果，可以看到服务端为了客户端专门创建一个线程确保何其通信。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Thread-1 receive msg:Tue Aug <span class="token number">22</span> <span class="token number">23</span>:03:32 CST <span class="token number">2023</span>: hello world
Thread-3 receive msg:Tue Aug <span class="token number">22</span> <span class="token number">23</span>:03:32 CST <span class="token number">2023</span>: hello world
Thread-2 receive msg:Tue Aug <span class="token number">22</span> <span class="token number">23</span>:03:32 CST <span class="token number">2023</span>: hello world
Thread-2 receive msg:Tue Aug <span class="token number">22</span> <span class="token number">23</span>:03:33 CST <span class="token number">2023</span>: hello world
Thread-3 receive msg:Tue Aug <span class="token number">22</span> <span class="token number">23</span>:03:33 CST <span class="token number">2023</span>: hello world
Thread-1 receive msg:Tue Aug <span class="token number">22</span> <span class="token number">23</span>:03:33 CST <span class="token number">2023</span>: hello world
</code></pre></div><p>这样就会导致下面这些问题：</p>
<ol>
<li>高并发场景下，多线程会导致频繁的上下文切换，导致某些任务可能迟迟无法结束。</li>
<li>资源浪费，创建一个线程需要在斩上分配64k甚至是1M的内存空间。</li>
<li>每一个和客户端保持通信的线程并不是实时都有消息接受，可能会有很长一段时间处于空闲阻塞状态，造成没必要的性能开销。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202308231025428.png" alt="在这里插入图片描述"></p>
<p>于是我们就有了NIO的概念，如下图所示，在NIO模型上，我们只需用一个线程处理每个客户端的连接请求，收到请求后不再建立新的连接，而是将连接绑定到clientSelector上。 之后客户端的读写请求都会被clientSelector线程轮询到，我们完全可以建立一个线程池将这些事件扔到线程池中，但是这里笔者做了简化，直接用clientSelector的线程处理读写请求，不难看出NIO模型做到了用最少的线程处理尽可能多的连接。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202308231025405.png" alt="在这里插入图片描述"></p>
<p>于是我们给出了NIO的示例代码，可以看到代码非常冗长且复杂，但是整体逻辑也很笔者上述差不多:</p>
<ol>
<li>创建serverSelector 轮询是否有新连接。</li>
<li>创建serverSelector 轮询到新连接，则建立连接后注册读事件到clientSelector 上。</li>
<li>clientSelector 轮询，处理每个客户端的连接。</li>
<li>clientSelector 处理完轮询到的事件后将事件的key移除。</li>
</ol>
<p>这里笔者都已给出注释，读者可自行参阅。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIOServer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//负责轮询是否有新连接</span>
        <span class="token class-name">Selector</span> serverSelector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//负责处理每个客户端是否有数据可读</span>
        <span class="token class-name">Selector</span> clientSelector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">//创建服务端socket监听通道</span>
                <span class="token class-name">ServerSocketChannel</span> listenerChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//绑定端口</span>
                listenerChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//设置为非阻塞监听</span>
                listenerChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//注册感兴趣的事件为OP_ACCEPT事件</span>
                listenerChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>serverSelector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//阻塞1毫秒查看是否有新的连接进来</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>serverSelector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> serverSelector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keyIterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token keyword">while</span> <span class="token punctuation">(</span>keyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> keyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token comment">//判断是否是新的socket连接加入</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有新的socket连接加入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token comment">//接收此通道与socket的连接</span>
                                <span class="token class-name">SocketChannel</span> clientChannel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                clientChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token comment">//服务端监测到新连接之后，不再创建一个新线程，而是直接将</span>
                                <span class="token comment">//新连接绑定到clientSelector上</span>
                                clientChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>clientSelector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                keyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>


            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">//通过clientSelector.select(1)方法可以轮询</span>
                    <span class="token comment">//出来，进而批量处理</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>clientSelector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> clientSelector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keyIterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">while</span> <span class="token punctuation">(</span>keyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> keyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                    <span class="token comment">//获取事件的通道</span>
                                    <span class="token class-name">SocketChannel</span> clientChannel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token comment">//数据的读写面向Buffer</span>
                                    <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token comment">//读取数据到buffer中</span>
                                    clientChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    byteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                                    keyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>调试的客户端代码完成可以基于上一个例子，运行后从输出结果可以看出3个客户端对应的请求都用一个线程处理了。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>有新的socket连接加入
有新的socket连接加入
有新的socket连接加入
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">32</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> hello world
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">32</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> hello world
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">32</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> hello world
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">33</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> hello world
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">33</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> hello world
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">33</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> hello world
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">34</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> hello world
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">34</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> hello world
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">34</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> hello world
</code></pre></div><p>可以看出原生NIO虽然相对BIO减小了一定开销且提高一定的性能，但是缺点也很明显:</p>
<ol>
<li>原生的JDK的NIO概念非常多，使用非常复杂对新手不友好。</li>
<li>底层使用epoll，很容易导致空轮询进而出现CPU100%。</li>
<li>没有对建立连接和处理请求的两个处理建立线程模型，无法较好的发挥它的优势，需要自己进行扩展实现。</li>
<li>项目庞大后，会出现各种奇奇怪怪的bug，很难排查，且维护成本较高。</li>
</ol>
<h2>Netty详解</h2>
<h3>Netty简介</h3>
<p>相对与JDK的原生nio，Netty与之相比有着一下的优势:</p>
<ol>
<li>统一的API，支持多种传输类型、阻塞的和非阻塞的简单而强大的线程模型，真正的无连接数据报套接字，支持链接逻辑组件以支持复用。</li>
<li>易于使用，各种配置只需几个方法的调用就能完成。</li>
<li>性能较好，拥有比 Java 的核心API更高的吞吐量以及更低的延迟得益于池化和复用，拥有更低的资源消耗最少的内存复制。</li>
<li>健壮，不会因为慢速、快速或者超载的连接而导致OutOfMemoryError消除在高速网络中NIO应用程序常见的不公平读/写比率。</li>
<li>安全，完整的SSL/TLS以及 StartTLS支持可用于受限环境下，如Applet和 OSGI。</li>
<li>社区活跃。</li>
</ol>
<h3>代码示例</h3>
<h4>基础代码示例</h4>
<p>同样以上面的NIO模型，我们使用Netty编写的服务端代码示例如下，整体步骤非常简单就能完成服务端配置了:</p>
<ol>
<li>创建serverBootstrap，创建两个NioEventLoopGroup即可完成连接监听和事件处理的线程组配置。</li>
<li>channel方法即可完成模型的配置，这里我们选择NIO模型。</li>
<li>childHandler即可完成对读写事件处理的配置。</li>
<li>在childHandler里笔者添加了一个SimpleChannelInboundHandler的处理器，该处理器会在服务端与客户端建立连接后调用initChannel，于是笔者通过nioSocketChannel.pipeline()得到处理链添加一个SimpleChannelInboundHandler用于处理所有客户端的发送的消息。</li>
<li>后续一些serverBootstrap的各种配置即可完成TCP等参数配置，读者可自行参阅。</li>
<li>调用bind完成异步连接端口，该方法返回一个future用于判断连接状态。</li>
</ol>
<p>对应完整的代码，笔者都已详尽注释，读者可自行参阅。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 启动一个netty服务端需要指定 线程模型 IO模型 业务处理逻辑</span>

        <span class="token comment">// 引导类负责引导服务端启动工作</span>
        <span class="token class-name">ServerBootstrap</span> serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 以下两个对象可以看做是两个线程组</span>

        <span class="token comment">// 负责监听端口，接受新的连接</span>
        <span class="token class-name">NioEventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 负责处理每一个连接读写的线程组</span>
        <span class="token class-name">NioEventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 配置线程组并指定NIO模型</span>
        serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>
                <span class="token comment">//设置IO模型，这里为NioServerSocketChannel,建议Linux服务器使用 EpollServerSocketChannel</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token comment">// 定义后续每个连接的数据读写，对于业务处理逻辑</span>
                <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> nioSocketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                        nioSocketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token annotation punctuation">@Override</span>
                                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> channelHandlerContext<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// handler() 方法 用于指定服务端启动时的一些逻辑; 注意 childHandler() 方法是为每个新连接添加的处理逻辑，通常用不到</span>
<span class="token comment">//        serverBootstrap.handler(new ChannelInitializer&lt;NioSocketChannel&gt;() {</span>
<span class="token comment">//            @Override</span>
<span class="token comment">//            protected void initChannel(NioSocketChannel nioSocketChannel) throws Exception {</span>
<span class="token comment">//</span>
<span class="token comment">//            }</span>
<span class="token comment">//        });</span>


        <span class="token comment">// attr() 方法 用于给 NioServerSocketChannel 维护一个 Map，通常也用不到这个方法</span>
        serverBootstrap<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token class-name">AttributeKey</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"serverName"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"nettyServer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// childAttr() 方法 可以为每个连接都指定自定义的属性</span>
        serverBootstrap<span class="token punctuation">.</span><span class="token function">childAttr</span><span class="token punctuation">(</span><span class="token class-name">AttributeKey</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"clientKey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"clientValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// option() 方法 用于给服务端Channel设置一些TCP参数 SO_BACKLOG 表示系统用于临时存放已完成三次握手的请求的队列的最大长度</span>
        serverBootstrap<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_BACKLOG</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// childOption() 方法 用于给每个连接都设置一些TCP参数，SO_KEEPALIVE 表示是否开启TCP心跳机制</span>
        serverBootstrap<span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TCP_NODELAY 表示是否开启Nagle算法,如果要求高实时性，有数据发送时就马上发送，就设置为关闭；如果需要减少发送次数，减少网络交互，就设置为开启</span>
        serverBootstrap<span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">TCP_NODELAY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">bind</span><span class="token punctuation">(</span>serverBootstrap<span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 以端口号递增的形式尝试绑定端口号
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">ServerBootstrap</span> serverBootstrap<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// bind 方法是异步的，为其添加监听器，如果绑定成功则结束，反之端口号+1进行绑定</span>
        serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>future <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"端口["</span> <span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">"]绑定成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"端口["</span> <span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">"]绑定失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">bind</span><span class="token punctuation">(</span>serverBootstrap<span class="token punctuation">,</span> port <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>同样的客户端代码如下，整体步骤也差不多，唯一区别就是客户端没有bossGroup，读者可参考注释理解:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClient</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 最大重连间隔
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_RETRY</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 整体即完成netty客户端需要指定线程模型、IO模型、业务处理逻辑</span>

        <span class="token comment">// 负责客户端的启动</span>
        <span class="token class-name">Bootstrap</span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 客户端的线程模型</span>
        <span class="token class-name">NioEventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 指定线程组</span>
        bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>workerGroup<span class="token punctuation">)</span>
                <span class="token comment">//指定NIO模型</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token comment">// IO处理逻辑</span>
                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                        channel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// attr() 方法 用于给NioSocketChannel指定一个Map 按需从其中取值</span>
        bootstrap<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token class-name">AttributeKey</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"clientName"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"nettyClient"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// option() 方法用于指定一些TCP参数 CONNECT_TIMEOUT_MILLIS 指定连接超时的时间</span>
        bootstrap<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">CONNECT_TIMEOUT_MILLIS</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// SO_KEEPALIVE 表示是否开启TCP心跳机制</span>
        bootstrap<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TCP_NODELAY 表示是否开启Nagle算法</span>
        bootstrap<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">TCP_NODELAY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 建立连接</span>
                <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">,</span> <span class="token constant">MAX_RETRY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"发送消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 建立连接的方法，使用监听器来进行重试
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Channel</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">Bootstrap</span> bootstrap<span class="token punctuation">,</span> <span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//connect会返回一个异步的future，所以我们可以通过添加监听查看连接结果</span>
        <span class="token keyword">return</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>future <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retry <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重试次数已用完，放弃连接！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 第几次重连</span>
                        <span class="token keyword">int</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">MAX_RETRY</span> <span class="token operator">-</span> retry<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                        <span class="token comment">// 定时任务下次执行重连的时间</span>
                        <span class="token keyword">int</span> delay <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> order<span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": 连接失败，第"</span> <span class="token operator">+</span> order <span class="token operator">+</span> <span class="token string">"次重连……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">//递归进入下一次重连</span>
                        bootstrap<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">connect</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> retry <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                delay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>启动后服务端输出结果:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>端口<span class="token punctuation">[</span><span class="token number">8888</span><span class="token punctuation">]</span>绑定成功<span class="token operator">!</span>
nioEventLoopGroup<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">15</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> <span class="token class-name">Hello</span> world<span class="token operator">!</span>
nioEventLoopGroup<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">15</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> <span class="token class-name">Hello</span> world<span class="token operator">!</span>
nioEventLoopGroup<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">15</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> <span class="token class-name">Hello</span> world<span class="token operator">!</span>
nioEventLoopGroup<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> <span class="token class-name">Hello</span> world<span class="token operator">!</span>
nioEventLoopGroup<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> <span class="token class-name">Hello</span> world<span class="token operator">!</span>
nioEventLoopGroup<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token class-name">Tue</span> <span class="token class-name">Aug</span> <span class="token number">22</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> <span class="token class-name">Hello</span> world<span class="token operator">!</span>
</code></pre></div><p>客户端输出结果:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>发送消息
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>发送消息
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>发送消息
连接成功<span class="token operator">!</span>
连接成功<span class="token operator">!</span>
连接成功<span class="token operator">!</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>发送消息
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>发送消息
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>发送消息
</code></pre></div><h4>客户端服务端双向通信示例</h4>
<p>上一个示例我们完成了客户端和服务端基础使用示例，接下来我们要实现一个需求，我们希望客户端发送给服务端<code>hello Netty Server</code>后，服务端会向客户端回复:<code>Hello Netty client</code>。</p>
<p>于是我们的服务端配置代码如下，可以看出该客户端按需添加了这样一条逻辑链:</p>
<ol>
<li>收到客户端消息后，InboundHandlerA先处理消息。</li>
<li>InboundHandlerB再处理。</li>
<li>FirstServerHandler再处理。</li>
<li>写出数据时，OutboundHandlerA先写，OutboundHandlerB后写。</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServerBootstrap</span> serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">NioEventLoopGroup</span> boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">NioEventLoopGroup</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>boss<span class="token punctuation">,</span> worker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 处理读数据的逻辑</span>
                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InboundHandlerA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InboundHandlerB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token comment">//负责处理客户端的读写事件</span>
                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FirstServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token comment">// 处理写数据的逻辑</span>
                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutboundHandlerA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutboundHandlerB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>对应InboundHandlerA代码如下，InboundHandlerB同理仅修改输出结果:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InboundHandlerA</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InBoundHandlerA: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">channelRead</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>FirstServerHandler 代码如下，该类继承ChannelInboundHandlerAdapter并注册到逻辑链上，使得服务端收到消息时会回调channelRead方法，我们就可以通过这个方法处理读请求，并将需要写的数据发送给客户端。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 收到客户端数据后会回调该方法
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteBuf</span> byteBuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
        <span class="token comment">//打印读取到的数据</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": 服务端读到数据 -&gt; "</span> <span class="token operator">+</span> byteBuf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 回复客户端数据</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": 服务端写出数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//组装数据并发送</span>
        <span class="token class-name">ByteBuf</span> out <span class="token operator">=</span> <span class="token function">getByteBuf</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">ByteBuf</span> <span class="token function">getByteBuf</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteBuf</span> buffer <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"Hello Netty client "</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        buffer<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>OutboundHandlerA 代码如下，OutboundHandlerB同理仅修改输出。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutboundHandlerA</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelOutboundHandlerAdapter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OutBoundHandlerA: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>同理服务端配置类代码如下，可以看到逻辑链山添加一个FirstClientHandler处理器。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Bootstrap</span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">NioEventLoopGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//和服务端建立连接后会调用该方法</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                        <span class="token comment">//返回逻辑处理链</span>
                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token comment">//添加客户端逻辑处理器</span>
                       <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FirstClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>对应FirstClientHandler 代码如下，可以看到该类继承ChannelInboundHandlerAdapter ，使得客户端处理做到以下几点:</p>
<ol>
<li>和服务端建立连接后调用channelActive，我们就可以再此时发送数据给服务端。</li>
<li>服务端回复消息时，逻辑链就会回调channelRead，我们就可以读取服务端的消息。</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 客户端连接服务端成功后会回调该方法
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": 客户端写出数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取数据</span>
        <span class="token class-name">ByteBuf</span> byteBuf <span class="token operator">=</span> <span class="token function">getByteBuf</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 把数据写到服务端</span>
        ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">ByteBuf</span> <span class="token function">getByteBuf</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"hello Netty Server"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ByteBuf</span> buffer <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        buffer<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 收到服务端数据后，会回调该方法
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token class-name">ByteBuf</span> byteBuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端读到数据 -&gt; "</span> <span class="token operator">+</span> byteBuf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>启动后服务端输出结果如下，可以看到输出顺序就是我们逻辑链上配置的顺序，唯一就是OutBound顺序相反了:<code>InBoundHandlerA-&gt;InBoundHandlerB-&gt;FirstServerHandler-&gt;OutBoundHandlerB OutBoundHandlerA</code>。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">InBoundHandlerA</span><span class="token operator">:</span> <span class="token class-name">PooledUnsafeDirectByteBuf</span><span class="token punctuation">(</span>ridx<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> widx<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> cap<span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">)</span>
<span class="token class-name">InBoundHandlerB</span><span class="token operator">:</span> <span class="token class-name">PooledUnsafeDirectByteBuf</span><span class="token punctuation">(</span>ridx<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> widx<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> cap<span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">)</span>
<span class="token class-name">Wed</span> <span class="token class-name">Aug</span> <span class="token number">23</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">17</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> 服务端读到数据 <span class="token operator">-&gt;</span> hello <span class="token class-name">Netty</span> <span class="token class-name">Server</span>
<span class="token class-name">Wed</span> <span class="token class-name">Aug</span> <span class="token number">23</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">17</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> 服务端写出数据
<span class="token class-name">OutBoundHandlerB</span><span class="token operator">:</span> <span class="token class-name">PooledUnsafeDirectByteBuf</span><span class="token punctuation">(</span>ridx<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> widx<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span> cap<span class="token operator">:</span> <span class="token number">256</span><span class="token punctuation">)</span>
<span class="token class-name">OutBoundHandlerA</span><span class="token operator">:</span> <span class="token class-name">PooledUnsafeDirectByteBuf</span><span class="token punctuation">(</span>ridx<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> widx<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span> cap<span class="token operator">:</span> <span class="token number">256</span><span class="token punctuation">)</span>
</code></pre></div><p>客户端输出结果，可以看到收到服务端的回复了:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Wed</span> <span class="token class-name">Aug</span> <span class="token number">23</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">17</span> <span class="token constant">CST</span> <span class="token number">2023</span><span class="token operator">:</span> 客户端写出数据
客户端读到数据 <span class="token operator">-&gt;</span> <span class="token class-name">Hello</span> <span class="token class-name">Netty</span> client 
</code></pre></div><h3>异步和事件驱动</h3>
<p>Netty的设计思想就是通过选择器使用较少的线程监听更多的连接上的事件，实现非阻塞式的网络IO，结合异步回调的方式调用用户对于IO的逻辑，正是这种工作机制，使得Netty可以从容的应付高并发场景。</p>
<h2>Netty核心组件概览</h2>
<h3>管道(Channel)</h3>
<p>我们常常称之为管道，这里我们暂时可以将其理解为一个数据的载体，通过Channel我们可以收到别的数据，也可以将自己的数据发送出去，同样的我们也可以将这个管道打开或者关闭。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202308231025160.png" alt="在这里插入图片描述"></p>
<h3>什么是回调</h3>
<p>这个和Netty无关，我们可以说回调其实是一种设计思想，我们还是以Netty为例，例如我们希望在连接被建立进行一些响应的处理，那么Netty就会在连接建立的时候预埋一个接口方法。</p>
<p>如下图，AbstractChannelHandlerContext就编写了一个ChannelInboundHandler接口channelActive方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202308231025859.png" alt="在这里插入图片描述"></p>
<p>如果我们希望在源码下方即连接建立的时候进行响应的处理，我们就可以继承这个接口，然后编写自己的逻辑，如下代码所示(具体案例笔者会在后文介绍，这里暂时了解一下就行了):</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>public class ConnectHandler extends ChannelInboundHandlerAdapter <span class="token punctuation">{</span>
    @Override
    //当一个新的连接已经被建立时，channelActive<span class="token punctuation">(</span>ChannelHandlerContext<span class="token punctuation">)</span>将会被调用
    public void channelActive<span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span>
            throws Exception <span class="token punctuation">{</span>
        System.out.println<span class="token punctuation">(</span>
                <span class="token string">"Client "</span> + ctx.channel<span class="token punctuation">(</span><span class="token punctuation">)</span>.remoteAddress<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">" connected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>Future和channel串联</h3>
<p>jdk中也有Future相关的概念，只不过Netty对此进行了进一步的优化，如下代码所示，当Netty需要建立连接时，只需使用connect方法建立连接即可，该方法会返回一个ChannelFuture 。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> //异步地连接到远程节点
        ChannelFuture future <span class="token operator">=</span> channel.connect<span class="token punctuation">(</span>
                new InetSocketAddress<span class="token punctuation">(</span><span class="token string">"192.168.0.1"</span>, <span class="token number">25</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
</code></pre></div><p>而ChannelFuture 则是Netty继承JDK的Future之后自己编写的Future。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202308231025768.png" alt="在这里插入图片描述"></p>
<p>那么ChannelFuture 的优化点在哪呢？如下图所示，可以看到Netty使用异步建立连接任务之后，会通过回调的方式，调用我们的注册到future监听上的事件，这就使得我们无需像使用Future那样去阻塞等待或者说时不时的手动判断连接情况，对于连接完成的处理会变得更加高效灵活。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202308231025781.png" alt="在这里插入图片描述"></p>
<h3>EventLoop</h3>
<p>Netty通过EventLoop将Selector抽象出来,EventLoop为我们做了如下几件事情：</p>
<ol>
<li>注册感兴趣的事件。</li>
<li>派发请求给响应Handler。</li>
<li>安排进一步的工作。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202308231025149.png" alt="在这里插入图片描述"></p>
<h2>Netty基础示例演示</h2>
<h3>服务端代码示例</h3>
<p>通过上文我们了解了关于Netty一些概念，我们不妨编写一段代码入门一下Netty，首先我们编写一下服务端的代码，我们首先编写一下服务端的回调处理器，具体参见下方注释，可以看到逻辑很简单:</p>
<ol>
<li>当服务端收到请求，我们会让服务端走到我们EchoServerHandler ，它会通过channelRead接受客户端请求并输出到控制台，然后告诉客户端收到请求了。</li>
<li>通过channelReadComplete告知channelRead当前读取的消息是最后一条消息了。</li>
<li>当遇到异常时，通过exceptionCaught进行处理错误，避免该请求走到后续注册到ChannelPipeline的channel收到这个请求。</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>//标示一个ChannelHandler可以被多个 Channel 安全地共享
@Sharable
public class EchoServerHandler extends ChannelInboundHandlerAdapter <span class="token punctuation">{</span>
    @Override
    public void channelRead<span class="token punctuation">(</span>ChannelHandlerContext ctx, Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ByteBuf <span class="token keyword">in</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>

        // 创建一个Bytebuf，默认创建的容量是256
        ByteBuf buffer <span class="token operator">=</span> ByteBufAllocator.DEFAULT.buffer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String resp <span class="token operator">=</span> <span class="token string">"服务端收到你的请求了"</span><span class="token punctuation">;</span>
        // 将数据写入ByteBuf
        buffer.writeBytes<span class="token punctuation">(</span>resp.getBytes<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>


        //将消息记录到控制台
        System.out.println<span class="token punctuation">(</span>
                <span class="token string">"服务端收到客户端的请求: "</span> + in.toString<span class="token punctuation">(</span>CharsetUtil.UTF_8<span class="token punctuation">))</span><span class="token punctuation">;</span>
        //将接收到的消息写给发送者，而不冲刷出站消息
        ctx.write<span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    @Override
    public void channelReadComplete<span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span>
            throws Exception <span class="token punctuation">{</span>
        //将未决消息冲刷到远程节点，并且关闭该 Channel
        ctx.writeAndFlush<span class="token punctuation">(</span>Unpooled.EMPTY_BUFFER<span class="token punctuation">)</span>
                .addListener<span class="token punctuation">(</span>ChannelFutureListener.CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    @Override
    public void exceptionCaught<span class="token punctuation">(</span>ChannelHandlerContext ctx,
                                Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        //打印异常栈跟踪
        cause.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        //关闭该Channel
        ctx.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>完成处理器的逻辑之后，我们就可以创建服务端了，代码如下，笔者已经给出详细逻辑这里就不多赘述了，唯一需要注意的就是<code>ch.pipeline().addLast(serverHandler);</code>就是告知服务端，收到请求后要走的回调处理器要用到我们的EchoServerHandler。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>public class EchoServer <span class="token punctuation">{</span>
    private final int port<span class="token punctuation">;</span>

    public EchoServer<span class="token punctuation">(</span>int port<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        this.port <span class="token operator">=</span> port<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
        throws Exception <span class="token punctuation">{</span>

        //设置端口值
        int port <span class="token operator">=</span> <span class="token number">7000</span><span class="token punctuation">;</span>
        //调用服务器的 start<span class="token punctuation">(</span><span class="token punctuation">)</span>方法
        new EchoServer<span class="token punctuation">(</span>port<span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public void start<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>
        //自定义的ChannelHandler
        final EchoServerHandler serverHandler <span class="token operator">=</span> new EchoServerHandler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        //<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 创建EventLoopGroup
        EventLoopGroup group <span class="token operator">=</span> new NioEventLoopGroup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        try <span class="token punctuation">{</span>
            //<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 创建ServerBootstrap
            ServerBootstrap b <span class="token operator">=</span> new ServerBootstrap<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b.group<span class="token punctuation">(</span>group<span class="token punctuation">)</span>
                //<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 指定所使用的 NIO 传输 Channel
                .channel<span class="token punctuation">(</span>NioServerSocketChannel.class<span class="token punctuation">)</span>
                //<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 使用指定的端口设置套接字地址
                .localAddress<span class="token punctuation">(</span>new InetSocketAddress<span class="token punctuation">(</span>port<span class="token punctuation">))</span>
                //<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 添加一个EchoServerHandler到于Channel的 ChannelPipeline
                .childHandler<span class="token punctuation">(</span>new ChannelInitializer<span class="token operator">&lt;</span>SocketChannel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    @Override
                    public void initChannel<span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>
                        //EchoServerHandler 被标注为@Shareable，所以我们可以总是使用同样的实例
                        //这里对于所有的客户端连接来说，都会使用同一个 EchoServerHandler，因为其被标注为@Sharable，
                        //这将在后面的章节中讲到。
                        ch.pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>.addLast<span class="token punctuation">(</span>serverHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            //<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> 异步地绑定服务器；调用 sync<span class="token punctuation">(</span><span class="token punctuation">)</span>方法阻塞等待直到绑定完成
            ChannelFuture f <span class="token operator">=</span> b.bind<span class="token punctuation">(</span><span class="token punctuation">)</span>.sync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System.out.println<span class="token punctuation">(</span>EchoServer.class.getSimpleName<span class="token punctuation">(</span><span class="token punctuation">)</span> +
                <span class="token string">" 开始异步地绑定服务器: "</span> + f.channel<span class="token punctuation">(</span><span class="token punctuation">)</span>.localAddress<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
            //<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> 获取 Channel 的CloseFuture，并且阻塞当前线程直到它完成
            f.channel<span class="token punctuation">(</span><span class="token punctuation">)</span>.closeFuture<span class="token punctuation">(</span><span class="token punctuation">)</span>.sync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> finally <span class="token punctuation">{</span>
            //<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> 关闭 EventLoopGroup，释放所有的资源
            group.shutdownGracefully<span class="token punctuation">(</span><span class="token punctuation">)</span>.sync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>客户端示例</h3>
<p>同样我们编写客户端的回调处理器:</p>
<ol>
<li>它会在连接建立时触发channelActive回调，发送给服务端"你好，我是客户端"。通过channelRead0获取服务端发送的消息。</li>
<li>通过channelRead0收到服务器的请求。</li>
<li>通过exceptionCaught记录连接过程中的错误。</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>//标记该类的实例可以被多个 Channel 共享
@Sharable
public class EchoClientHandler
    extends SimpleChannelInboundHandler<span class="token operator">&lt;</span>ByteBuf<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    @Override
    public void channelActive<span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        //当被通知 Channel是活跃的时候，发送一条消息
        ctx.writeAndFlush<span class="token punctuation">(</span>Unpooled.copiedBuffer<span class="token punctuation">(</span><span class="token string">"你好，我是客户端"</span>, CharsetUtil.UTF_8<span class="token punctuation">))</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    @Override
    public void channelRead0<span class="token punctuation">(</span>ChannelHandlerContext ctx, ByteBuf <span class="token keyword">in</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        //记录已接收消息的转储
        System.out.println<span class="token punctuation">(</span>
                <span class="token string">"客户端收到服务端消息: "</span> + in.toString<span class="token punctuation">(</span>CharsetUtil.UTF_8<span class="token punctuation">))</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    @Override
    //在发生异常时，记录错误并关闭Channel
    public void exceptionCaught<span class="token punctuation">(</span>ChannelHandlerContext ctx,
        Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cause.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后编写客户端的启动代码</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>public class EchoClient <span class="token punctuation">{</span>
    private final String <span class="token function">host</span><span class="token punctuation">;</span>
    private final int port<span class="token punctuation">;</span>

    public EchoClient<span class="token punctuation">(</span>String host, int port<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        this.host <span class="token operator">=</span> <span class="token function">host</span><span class="token punctuation">;</span>
        this.port <span class="token operator">=</span> port<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public void start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        throws Exception <span class="token punctuation">{</span>
        EventLoopGroup group <span class="token operator">=</span> new NioEventLoopGroup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        try <span class="token punctuation">{</span>
            //创建 Bootstrap
            Bootstrap b <span class="token operator">=</span> new Bootstrap<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            //指定 EventLoopGroup 以处理客户端事件；需要适用于 NIO 的实现
            b.group<span class="token punctuation">(</span>group<span class="token punctuation">)</span>
                //适用于 NIO 传输的Channel 类型
                .channel<span class="token punctuation">(</span>NioSocketChannel.class<span class="token punctuation">)</span>
                //设置服务器的InetSocketAddress
                .remoteAddress<span class="token punctuation">(</span>new InetSocketAddress<span class="token punctuation">(</span>host, port<span class="token punctuation">))</span>
                //在创建Channel时，向 ChannelPipeline中添加一个 EchoClientHandler实例
                .handler<span class="token punctuation">(</span>new ChannelInitializer<span class="token operator">&lt;</span>SocketChannel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    @Override
                    public void initChannel<span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span>
                        throws Exception <span class="token punctuation">{</span>
                        ch.pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>.addLast<span class="token punctuation">(</span>
                             new EchoClientHandler<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            //连接到远程节点，阻塞等待直到连接完成
            ChannelFuture f <span class="token operator">=</span> b.connect<span class="token punctuation">(</span><span class="token punctuation">)</span>.sync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            //阻塞，直到Channel 关闭
            f.channel<span class="token punctuation">(</span><span class="token punctuation">)</span>.closeFuture<span class="token punctuation">(</span><span class="token punctuation">)</span>.sync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> finally <span class="token punctuation">{</span>
            //关闭线程池并且释放所有的资源
            group.shutdownGracefully<span class="token punctuation">(</span><span class="token punctuation">)</span>.sync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
            throws Exception <span class="token punctuation">{</span>


        final String <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>
        final int port <span class="token operator">=</span> <span class="token number">7000</span><span class="token punctuation">;</span>
        new EchoClient<span class="token punctuation">(</span>host, port<span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>运行效果</h3>
<p>如下图我们首先运行服务端,可以看到服务端监听7000端口了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202308231025218.png" alt="在这里插入图片描述"></p>
<p>然后将客户端启动，服务端就会收到消息</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202308231025292.png" alt="在这里插入图片描述"></p>
<p>同样的客户端也会收到服务端的回复</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202308231025592.png" alt="在这里插入图片描述"></p>
<p>自此我们就简单的完成了Netty的基础入门。</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202308231025428.png" type="image/png"/>
    </item>
    <item>
      <title>Vue3中为什么不能使用this</title>
      <link>https://maijunxuan.cn/%E6%97%A5%E5%B8%B8/Vue3%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8this.html</link>
      <guid>https://maijunxuan.cn/%E6%97%A5%E5%B8%B8/Vue3%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8this.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Vue3中为什么不能使用this</source>
      <description>Vue3中为什么不能使用this 原因 官方是这样说的：在 setup() 内部，this 不会是该活跃实例的引用（即不指向vue实例），因为 setup() 是在解析其它组件选项之前被调用的，所以 setup() 内部的 this 的行为与其它选项中的 this 完全不同。这在和其它选项式 API 一起使用 setup() 时可能会导致混淆。 因此s...</description>
      <pubDate>Tue, 21 Mar 2023 08:40:07 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>原因</h2>
<p>官方是这样说的：在 setup() 内部，this 不会是该活跃实例的引用（即不指向vue实例），因为 setup() 是在解析其它组件选项之前被调用的，所以 setup() 内部的 this 的行为与其它选项中的 this 完全不同。这在和其它选项式 API 一起使用 setup() 时可能会导致混淆。</p>
<p>因此setup函数中不能使用this。所以Vue为了避免我们错误的使用，直接将setup函数中的this修改成了 undefined）</p>
<h2>解决方法</h2>
<p>如果要在vue3中使用this，vue为我们提供了<em>getCurrentInstance</em>方法，该方法返回了ctx和proxy。控制台打印出来的和vue2的this相同</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>defineComponent<span class="token punctuation">,</span> getCurrentInstance<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> proxy<span class="token punctuation">,</span> ctx <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> _this <span class="token operator">=</span> ctx
    
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getCurrentInstance()中的ctx:'</span><span class="token punctuation">,</span> _this<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getCurrentInstance()中的proxy:'</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>问题描述</title>
      <link>https://maijunxuan.cn/%E6%97%A5%E5%B8%B8/IDEA%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E6%9B%B4%E6%96%B0TKK%E7%9A%84%E9%97%AE%E9%A2%98.html</link>
      <guid>https://maijunxuan.cn/%E6%97%A5%E5%B8%B8/IDEA%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E6%9B%B4%E6%96%B0TKK%E7%9A%84%E9%97%AE%E9%A2%98.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">问题描述</source>
      <description>问题描述 使用翻译插件翻译源码注释时，idea插件translation经过长时间等待后抛出一个更新 TKK 失败，请检查网络连接。无论重启还是科学上网都无法解决问题。 原因 经过查阅网上资料得知，是谷歌翻译网站抽风了，读者可以使用下面这段命令确定一下自己的网络能否访问该网站 解决方案 获取谷歌翻译ip地址 编辑hosts文件，使用谷歌翻译地址绑定tr...</description>
      <pubDate>Sun, 09 Oct 2022 18:21:13 GMT</pubDate>
      <content:encoded><![CDATA[
<p>使用翻译插件翻译源码注释时，idea插件translation经过长时间等待后抛出一个<code>更新 TKK 失败，请检查网络连接</code>。无论重启还是科学上网都无法解决问题。</p>
<h1>原因</h1>
<p>经过查阅网上资料得知，是谷歌翻译网站抽风了，读者可以使用下面这段命令确定一下自己的网络能否访问该网站</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ping</span> translate.googleapis.com
</code></pre></div><h1>解决方案</h1>
<h2>获取谷歌翻译ip地址</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ping</span> translate.google.cn
</code></pre></div><h2>编辑hosts文件，使用谷歌翻译地址绑定translate.googleapis.com的地址</h2>
<p>以笔者为例，<code>ping translate.google.cn</code>得到得到的ip为<code>114.250.66.34</code>，所以我们就通过在hosts配置下面这段配置避免idea更新ttk时通过dns解析<code>translate.googleapis.com</code></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">114.250</span>.66.34   translate.googleapis.com
</code></pre></div><h2>测试</h2>
<p>可以看到问题得以解决</p>
<p><img src="https://s2.loli.net/2023/06/14/Ym2LzgKuUovqiBf.png" alt="在这里插入图片描述"></p>
]]></content:encoded>
      <enclosure url="https://s2.loli.net/2023/06/14/Ym2LzgKuUovqiBf.png" type="image/png"/>
    </item>
    <item>
      <title>简介</title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Docker/DokcerCompose%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Docker/DokcerCompose%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">简介</source>
      <description>简介 我们的使用docker部署微服务时，如果每个微服务都要手动启停，效率是非常低的，所以我们需要一个工具来一键管理这庞大的微服务，Docker Compose就是最好的帮手。 安装Docker Compose 步骤 安装Docker Compose 如下命令所示，这条命令会自动安装适应系统版本的compose 为命令添加可执行权限 查看是否安装成功 ...</description>
      <pubDate>Sun, 09 Oct 2022 18:21:13 GMT</pubDate>
      <content:encoded><![CDATA[
<p>我们的使用docker部署微服务时，如果每个微服务都要手动启停，效率是非常低的，所以我们需要一个工具来一键管理这庞大的微服务，Docker Compose就是最好的帮手。</p>
<h1>安装Docker Compose</h1>
<h2>步骤</h2>
<h3>安装Docker Compose</h3>
<p>如下命令所示，这条命令会自动安装适应系统版本的compose</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.10.0/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
</code></pre></div><h3>为命令添加可执行权限</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre></div><h3>查看是否安装成功</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span>
</code></pre></div><p>如下图所示，显示版本号即说明安装成功了</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010152067.png" alt="在这里插入图片描述"></p>
<h3>安装命令补全工具</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://raw.githubusercontent.com/docker/compose/<span class="token variable"><span class="token variable">$(</span><span class="token function">docker-compose</span> version--short<span class="token variable">)</span></span>/contrib/completion/bash/docker-compose <span class="token parameter variable">-o</span> /etc/bash_completion.d/docker-compose
</code></pre></div><h1>一个快速入门的例子</h1>
<h2>步骤</h2>
<h3>打个jar包扔到服务器上</h3>
<p>这里使用书本中参考的源码，具体可以去这里下载 <a href="http://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker.git" target="_blank" rel="noopener noreferrer">https://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker.git</a> 如下图所示，将这个eureka的项目打成jar扔到自己的服务器上</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010153309.png" alt="image-20221001015252436"></p>
<h3>编写一个Dockerfile</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>FROM java:8
VOLUME /tmp
ADD microservice-discovery-eureka-0.0.1.jar app.jar
RUN <span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">'touch /app.jar'</span>
EXPOSE <span class="token number">8761</span>
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app.jar"</span><span class="token punctuation">]</span>
</code></pre></div><h3>编写一个docker-compose.yml</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>version: <span class="token string">'2'</span>
services:
  eureka: <span class="token comment"># 指定服务名称</span>
    build: <span class="token builtin class-name">.</span> <span class="token comment"># 使用当前路径的Dockerfile</span>
    ports:
      - <span class="token string">"8761:8761"</span> <span class="token comment"># 类似与docker run -p 的端口映射</span>
</code></pre></div><h3>使用docker-compose up 启动</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre></div><h3>测试</h3>
<p>如下图所示，使用ip:8761即可进入eureka界面，说明配置完成了</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010153027.png" alt="image-20221001015321845"></p>
<h1>来聊聊Docker-compose.yml常用指令</h1>
<h2>image</h2>
<p>指定镜像名称或者镜像id，如果该镜像在本地不存在，Compose会尝试pull下来。</p>
<p>示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>image: <span class="token function">java</span>
</code></pre></div><h2>build</h2>
<p>指定Dockerfile的路径，如下所示，这就说明Dockerfile文件在当前目录的dir目录下</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>build: ./dir
</code></pre></div><h2>command</h2>
<p>覆盖之前的容器启动后默认执行的指令 示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>command: bundle <span class="token builtin class-name">exec</span> thin <span class="token parameter variable">-p</span> <span class="token number">3000</span>
<span class="token comment"># 也可以是一个list，类似于Dockerfile总的CMD指令，格式如下：</span>

command: <span class="token punctuation">[</span>bundle, exec, thin, -p, <span class="token number">3000</span><span class="token punctuation">]</span>
</code></pre></div><h2>links</h2>
<p>链接到其他服务中的容器。可以指定服务名称然后给他起一个别名来使用，就有点mysql语法中的as的意思，如下所示连接到db，我们给他起了哥别名database，后续需要使用这个链接的时候一律使用database：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>web:
  links:
   - db
   - db:database
   - redis
</code></pre></div><h2>external_links</h2>
<p>表示链接到docker-compose.yml外部的容器，甚至并非Compose管理的容器，特别是对于那些提供共享容器或共同服务。格式跟links类似，示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>external_links:
 - redis_1
 - project_db_1:mysql
 - project_db_1:postgresql
</code></pre></div><h2>ports</h2>
<p>暴露端口信息。使用宿主端口:容器端口的格式，或者仅仅指定容器的端口（此时宿主机将会随机指定端口），类似于docker run -p ，示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ports:
 - <span class="token string">"3000"</span>
 - <span class="token string">"3000-3005"</span>
 - <span class="token string">"8000:8000"</span>
 - <span class="token string">"9090-9091:8080-8081"</span>
 - <span class="token string">"49100:22"</span>
 - <span class="token string">"127.0.0.1:8001:8001"</span>
 - <span class="token string">"127.0.0.1:5000-5010:5000-5010"</span>
</code></pre></div><h2>expose</h2>
<p>暴露端口，只将端口暴露给连接的服务，而不暴露给宿主机，示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>expose:
 - <span class="token string">"3000"</span>
 - <span class="token string">"8000"</span>
</code></pre></div><h2>volumes</h2>
<p>卷挂载路径设置。可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST<img src="http://github.githubassets.com/images/icons/emoji/CONTAINER.png" alt="CONTAINER">ro）。示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>volumes:
  <span class="token comment"># Just specify a path and let the Engine create a volume</span>
  - /var/lib/mysql

  <span class="token comment"># Specify an absolute path mapping</span>
  - /opt/data:/var/lib/mysql

  <span class="token comment"># Path on the host, relative to the Compose file</span>
  - ./cache:/tmp/cache

  <span class="token comment"># User-relative path</span>
  - ~/configs:/etc/configs/:ro

  <span class="token comment"># Named volume</span>
  - datavolume:/var/lib/mysql
</code></pre></div><h2>volumes_from</h2>
<p>从另一个服务或者容器挂载卷。可以指定只读或者可读写，如果访问模式没有指定，则默认是可读写。示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>volumes_from:
 - service_name
 - service_name:ro
 - container:container_name
 - container:container_name:rw
</code></pre></div><h2>environment</h2>
<p>设置环境变量。可以使用数组或者字典两种方式。只有一个key的环境变量可以在运行Compose的机器上找到对应的值，这有助于加密的或者特殊主机的值。示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>environment:
  RACK_ENV: development
  SHOW: <span class="token string">'true'</span>
  SESSION_SECRET:

environment:
  - <span class="token assign-left variable">RACK_ENV</span><span class="token operator">=</span>development
  - <span class="token assign-left variable">SHOW</span><span class="token operator">=</span>true
  - SESSION_SECRET
</code></pre></div><h2>env_file</h2>
<p>从文件中获取环境变量，可以为单独的文件路径或列表。如果通过 docker-compose -f FILE 指定了模板文件，则 env_file 中路径会基于模板文件路径。如果有变量名称与 environment 指令冲突，则以envirment 为准。示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>env_file: .env

env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/secrets.env
</code></pre></div><h2>extends</h2>
<p>继承另一个服务，基于已有的服务进行扩展。</p>
<h2>net</h2>
<p>设置网络模式。示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>net: <span class="token string">"bridge"</span>
net: <span class="token string">"host"</span>
net: <span class="token string">"none"</span>
net: <span class="token string">"container:[service name or container name/id]"</span>
</code></pre></div><h2>dns</h2>
<p>配置dns服务器。可以是一个值，也可以是一个列表。示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>dns: <span class="token number">8.8</span>.8.8
dns:
  - <span class="token number">8.8</span>.8.8
  - <span class="token number">9.9</span>.9.9
</code></pre></div><h2>dns_search</h2>
<p>配置DNS的搜索域，可以是一个值，也可以是一个列表，示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>dns_search: example.com
dns_search:
  - dc1.example.com
  - dc2.example.com
</code></pre></div><h1>更进一步，使用Docker编排微服务</h1>
<h2>需求分析</h2>
<p>根据笔者了解的资料，为了专注于了解Docker编排微服务，笔者这个实验只用两个服务进行演示，即源码中的eureka模块和user模块，如下图所示两个</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010154468.png" alt="image-20221001015418328"></p>
<h2>步骤</h2>
<h3>两个模块的pom文件都添加构建docker镜像的配置</h3>
<h4>eureka模块</h4>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 添加spring-boot的maven插件 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>

      <span class="token comment">&lt;!-- 添加docker-maven插件 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forceTags</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>forceTags</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">&gt;</span></span>zhangshiyu3007/microservice-discovery-eureka:0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>baseImage</span><span class="token punctuation">&gt;</span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>baseImage</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entryPoint</span><span class="token punctuation">&gt;</span></span>["java", "-jar", "/${project.build.finalName}.jar"]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entryPoint</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h4>user模块</h4>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 添加spring-boot的maven插件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>

      <span class="token comment">&lt;!-- 添加docker-maven插件 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forceTags</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>forceTags</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">&gt;</span></span>zhangshiyu3007/microservice-provider-user:0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>baseImage</span><span class="token punctuation">&gt;</span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>baseImage</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entryPoint</span><span class="token punctuation">&gt;</span></span>["java", "-jar", "/${project.build.finalName}.jar"]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entryPoint</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>编写docker-compose.yml</h3>
<p>由于docker中网络模式默认未bridge，而各个容器的ip又不同，因此使用localhost访问是不行的，所以笔者在配置user模块的link时，使用<code>microservice-discovery-eureka</code>并起了个别名<code>discovery</code></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>version: <span class="token string">'2'</span>        <span class="token comment"># 表示该docker-compose.yml文件使用的是Version 2 file format</span>
services:           <span class="token comment"># Version 2 file format的固定写法，为project定义服务。</span>
  microservice-discovery-eureka:                                  <span class="token comment"># 指定服务名称</span>
    image: zhangshiyu3007/microservice-discovery-eureka:0.0.1    <span class="token comment"># 指定服务所使用的镜像</span>
    ports:                                                        <span class="token comment"># 暴露端口信息</span>
      - <span class="token string">"8761:8761"</span>
  microservice-provider-user:
    image: zhangshiyu3007/microservice-provider-user:0.0.1
    ports:                                                        <span class="token comment"># 暴露端口信息</span>
    - <span class="token string">"8000:8000"</span>
    links:          <span class="token comment"># 链接到microservice-discovery-eureka，这边使用的是SERVICE:ALIAS的形式</span>
      - microservice-discovery-eureka:discovery
</code></pre></div><h3>修改两者的application.yml文件</h3>
<p>由于docker中网络模式默认未bridge，而各个容器的ip又不同，因此使用localhost访问是不行的，所以我们可以在user中注册的eureka网络ip使用eureka对应的hostname，由于笔者上文指定eureka链接的别名为discovery，所以下述配置直接使用该名字了，两者的application.yml配置如下所示</p>
<h4>eureka</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>server:
  port: <span class="token number">8761</span>                    <span class="token comment"># 指定该Eureka实例的端口</span>
eureka:
  client:
    registerWithEureka: <span class="token boolean">false</span>
    fetchRegistry: <span class="token boolean">false</span>
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

<span class="token comment"># 参考文档：http://projects.spring.io/spring-cloud/docs/1.0.3/spring-cloud.html#_standalone_mode</span>
<span class="token comment"># 参考文档：http://my.oschina.net/buwei/blog/618756</span>
</code></pre></div><h4>user</h4>
<p>可以看到user指定的eureka的defaultZone为<code>http://discovery:8761/eureka/</code></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>server:
  port: <span class="token number">8000</span>
spring:
  application:
    name: microservice-provider-user
  jpa:
    generate-ddl: <span class="token boolean">false</span>
    show-sql: <span class="token boolean">true</span>
    hibernate:
      ddl-auto: none
  datasource:                           <span class="token comment"># 指定数据源</span>
    platform: h2                        <span class="token comment"># 指定数据源类型</span>
    schema: classpath:schema.sql        <span class="token comment"># 指定h2数据库的建表脚本</span>
    data: classpath:data.sql            <span class="token comment"># 指定h2数据库的insert脚本</span>
logging:                                <span class="token comment"># 配置日志级别，让hibernate打印出执行的SQL</span>
  level:
    root: INFO
    org.hibernate: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE
eureka:
  client:
    serviceUrl:
      defaultZone: http://discovery:8761/eureka/
  instance:
    prefer-ip-address: <span class="token boolean">true</span>
</code></pre></div><h3>扔到服务器中使用命令<code>mvn clean package docker:build</code></h3>
<h3>到达docker-compose.yml的文件夹执行命令<code>docker-compose up</code></h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre></div><h3>测试</h3>
<p>最终通过8761和8000都能访问到对应的页面</p>
<h4>8761访问eureka界面成功并且可以看到user服务</h4>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010155442.png" alt="image-20221001015544306"> 键入8000端口的网址可以得到如下结果，说明部署成功了</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>http://ip:8000/1
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010155122.png" alt="image-20221001015557123"></p>
<h1>更进一步，使用Docker编排高可用eureka</h1>
<h2>步骤</h2>
<h3>找到项目中的eureka模块</h3>
<h3>配置application.yml</h3>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> microservice<span class="token punctuation">-</span>discovery<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>ha
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010152067.png" type="image/png"/>
    </item>
    <item>
      <title>为什么要AQS</title>
      <link>https://maijunxuan.cn/JUC/AQS%E7%AE%80%E8%BF%B0.html</link>
      <guid>https://maijunxuan.cn/JUC/AQS%E7%AE%80%E8%BF%B0.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">为什么要AQS</source>
      <description>为什么要AQS 无论是倒计时门闩、还是可重入锁或者读写锁等，他们都有一个共同点，那就是协作，所以Doug Lea就提取了这些类写作的共性，协同了大名鼎鼎的AQS使得各种锁只需处理自己的逻辑即可，无需关心线程间取锁和解锁的具体底层实现逻辑。 AQS三要素 state 如下所示，这就是AQS中重要的变量，他主要是用于同步状态用的，具体情况笔者会在后续在不同...</description>
      <pubDate>Sun, 25 Sep 2022 17:42:45 GMT</pubDate>
      <content:encoded><![CDATA[
<p>无论是倒计时门闩、还是可重入锁或者读写锁等，他们都有一个共同点，那就是协作，所以Doug Lea就提取了这些类写作的共性，协同了大名鼎鼎的AQS使得各种锁只需处理自己的逻辑即可，无需关心线程间取锁和解锁的具体底层实现逻辑。</p>
<h1>AQS三要素</h1>
<h2>state</h2>
<p>如下所示，这就是AQS中重要的变量，他主要是用于同步状态用的，具体情况笔者会在后续在不同锁之间进行分析</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
     * The synchronization state.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>
</code></pre></div><h2>队列</h2>
<p>AQS在底层实现了一个基于链表的FIFO队列，会在所有需要等待的线程存放至这个队列中，当锁释放时就会将合适的节点从队列中取出释放并运行。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252233102.png" alt="image-20220925223339992"></p>
<h2>获取和释放方法</h2>
<p>源码如下所示，AQS相当于为我们提供了获取锁和释放锁的模板方法，我们只需按需重写<code>tryAcquire</code>、<code>tryRelease</code>即可。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//获取锁的逻辑</span>
 <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">//短路运算技巧，当取锁失败就添加到等待队列，并将其这个线程打断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment">//释放锁的逻辑</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//如果释放锁成功就通知后继节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h1>用一次debug各种并发流程工具对AQS的运用</h1>
<p>由于信号量、可重入锁等对于AQS运用都差不多，我们就以countDownLatch为例的源码进行介绍</p>
<h2>debug示例代码</h2>
<p>如下所示，这就是笔者本次debug的示例代码，在debug之前我们必须知道本次debug的目的</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>        <span class="token number">1.</span> await如何阻塞主线程
        <span class="token number">2.</span> countDown如何控制并发流程并唤醒主线程
</code></pre></div><p>以下便是笔者的本次debug所用示例代码</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchBaseUse</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> no <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

                <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
                            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No"</span> <span class="token operator">+</span> no <span class="token operator">+</span> <span class="token string">"完成了检查"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待所有检查完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有人都完成了工作，进入下一个环节。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>debug</h2>
<h3>先行步骤</h3>
<p>如图所示笔者在await和countdown都设置了断点，并且suspend设置为thread <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252227581.png" alt="image-20220925222750622"></p>
<h3>await如何阻塞主线程</h3>
<p>如下图所示，我们debug到main线程</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252228824.png" alt="image-20220925222826904"></p>
<p>我们步进看到调用sync调用的方法 <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252228815.png" alt="在这里插入图片描述"></p>
<p>这时候他会尝试获取共享锁，我们步进看看</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252228901.png" alt="image-20220925222855137"></p>
<p>由于倒计时门闩设置为5，一次没扣，所以这里返回-1，上方代码会走到do逻辑，我们不妨看看do逻辑做了什么事情</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252229637.png" alt="image-20220925222911326"></p>
<p>可以看到，就是添加一个node节点，如果取锁失败，则添加到队列中，然后执行<code>shouldParkAfterFailedAcquire</code>和<code>parkAndCheckInterrupt()</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252233785.png" alt="image-20220925223314695"></p>
<p>这时候main线程状态就被设置为wait，cpu时间片就让出给其他子线程了</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252229960.png" alt="image-20220925222926890"></p>
<p>第一个问题解决，我们继续debug的代码解决第二个问题</p>
<h3>countDown如何控制并发流程并唤醒主线程</h3>
<p>可以看到线程执行到了thread-4</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252230775.png" alt="image-20220925222959869"></p>
<p>他调用了释放锁的逻辑 <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252230737.png" alt="在这里插入图片描述"></p>
<p>调用<code>tryReleaseShared</code>尝试释放锁，我们步入看看</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252232578.png" alt="image-20220925223254343"></p>
<p>逻辑很简单，使用cas扣除state值。这里使用for循环的目的也很简单，考虑到可能存在cas操作失败的情况(即同样一个线程拿到当前c的值，先于本线程完成cas操作导致state设置失败的情况) 完成扣除操作返回当前count是否为0，如果为0就说明倒计时门闩倒计时，完成，就会执行上述do逻辑</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252230176.png" alt="image-20220925223028988"></p>
<p>我们不妨看看do逻辑做了什么</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252230242.png" alt="image-20220925223051091"></p>
<p>获取当前头节点状态，若为<code>SIGNAL</code>则执行cas操作讲h节点状态设置为0，再执行<code>unparkSuccessor</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252231768.png" alt="image-20220925223106756"></p>
<p><code>unparkSuccessor</code>逻辑也很简单，即讲头节点之后的节点释放</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252231652.png" alt="image-20220925223127572"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252231203.png" alt="image-20220925223149155"></p>
<p>此时main线程就得以解脱，状态变为running</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252232739.png" alt="image-20220925223209790"></p>
<p>自此代码运行完成</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252232567.png" alt="在这里插入图片描述"></p>
<h1>自定义一把一次性门闩demo</h1>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyOneDownLatch</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Sync</span> sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 取锁逻辑
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sync<span class="token punctuation">.</span><span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 释放锁
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//这里等于1说明调用了tryReleaseShared 可以释放节点了</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 将state设置为1，返回true说明取锁成功
         * <span class="token keyword">@param</span> <span class="token parameter">arg</span>
         * <span class="token keyword">@return</span>
         */</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyOneDownLatch</span> oneDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyOneDownLatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"等待中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                oneDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知所有线程运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oneDownLatch<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252233102.png" type="image/png"/>
    </item>
    <item>
      <title>并发容器概览</title>
      <link>https://maijunxuan.cn/JUC/Java%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8.html</link>
      <guid>https://maijunxuan.cn/JUC/Java%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">并发容器概览</source>
      <description>并发容器概览 在并发情况下，我经常需要一些容器来存储数据，对此我们的容器就必须考虑到线程安全问题，对此jdk也在这些场景为我们提供了如下并发容器 ConcurrentHashMap:线程安全的HashMap CopyOrWriteList:线程安全的list BlockingQueue:阻塞队列，非常适用于作为共享通道 传统的并发容器 简介 在jdk1...</description>
      <pubDate>Sun, 25 Sep 2022 17:42:45 GMT</pubDate>
      <content:encoded><![CDATA[
<p>在并发情况下，我经常需要一些容器来存储数据，对此我们的容器就必须考虑到线程安全问题，对此jdk也在这些场景为我们提供了如下并发容器</p>
<ol>
<li>ConcurrentHashMap:线程安全的HashMap</li>
<li>CopyOrWriteList:线程安全的list</li>
<li>BlockingQueue:阻塞队列，非常适用于作为共享通道</li>
</ol>
<h1>传统的并发容器</h1>
<h2>简介</h2>
<p>在jdk1.2版本中以及为我们提供的线程安全的同期vector和hashtable，但是他们保证线程安全的方式是使用互斥锁sync，在高并发场景下，这种方式会使得性能大打折扣。</p>
<h2>使用实例</h2>
<h3>Vector示例以及源码解析</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public class VectorDemo {

    public static void main(String[] args) {
        Vector&lt;String&gt; vector = new Vector&lt;&gt;();
        vector.add("test");
        System.out.println(vector.get(0));
    }

}

</code></pre></div><p>通过源码我们可以看到add加了sync锁，这就是导致性能下降的主要原因</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> public synchronized boolean add(E e) {
        modCount++;
        ensureCapacityHelper(elementCount + 1);
        elementData[elementCount++] = e;
        return true;
    }
</code></pre></div><h3>hashTable示例以及源码解析</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>/**
 * 描述：     古老的线程安全的hashTable public synchronized V put(K key, V value)
 */
public class HashtableDemo {
    public static void main(String[] args) {
        Hashtable&lt;String, String&gt; hashtable = new Hashtable&lt;&gt;();
        hashtable.put("key", "value");
        System.out.println(hashtable.get("key"));
    }

}

</code></pre></div><p>通过原本我们可以发现无论get还是set也是都加了sync锁。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> public synchronized V get(Object key) {
        Entry&lt;?,?&gt; tab[] = table;
        int hash = key.hashCode();
        int index = (hash &amp; 0x7FFFFFFF) % tab.length;
        for (Entry&lt;?,?&gt; e = tab[index] ; e != null ; e = e.next) {
            if ((e.hash == hash) &amp;&amp; e.key.equals(key)) {
                return (V)e.value;
            }
        }
        return null;
    }
</code></pre></div><h1>传统容器并发缺陷</h1>
<p>如下源码所示，不难发现这些早期的容器为了控制并发都在方法上使用了sync锁，虽然保证了线程安全，但是这种锁粒度以及锁的工作方式很明显会造成性能下降。</p>
<h2>基于arrayList示例</h2>
<p>读者可以通过以下的例子查看输出结果，可以发现arayList的数组长度始终不可能达到2000，原因也很简单，我们完全可以在源码中找到答案</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>package collections.predecessor;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 * list线程不安全的示例
 */
public class baseArrayList {


    public static void main(String[] args) throws InterruptedException {
        final List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
//        final List&lt;Integer&gt; list = Collections.synchronizedList(new ArrayList&lt;Integer&gt;());
//        final List&lt;Integer&gt; list =new CopyOnWriteArrayList&lt;Integer&gt;();

        // 线程A将0-1000添加到list
        new Thread(new Runnable() {
            public void run() {
                for (int i = 0; i &lt; 1000 ; i++) {
                    list.add(i);

                    try {
                        Thread.sleep(1);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();

        // 线程B将1000-2000添加到列表
        new Thread(new Runnable() {
            public void run() {
                for (int i = 1000; i &lt; 2000 ; i++) {
                    list.add(i);

                    try {
                        Thread.sleep(1);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();

        Thread.sleep(2000);



        // 打印所有结果
        for (int i = 0; i &lt; list.size(); i++) {
            System.out.println("第" + (i + 1) + "个元素为：" + list.get(i));
        }
        System.out.println("list:size "+list.size());
    }



}

</code></pre></div><p>源码如下所示，可以发现arrayList在添加操作的时候需要分析对容量进行判断，假如容量不够则需要扩容，所以这期间如果多线程执行add的话，很可能出现以下几种情况： 情况1：</p>
<ol>
<li>线程1在9位置插入，进行扩容判断时，发现size为10的时候才需要扩容，所以直接插入</li>
<li>线程2在线程1工作期间也进行了这样的判断和操作，由于线程2操作晚于线程1，结果线程2在size=10的位置添加元素导致了索引越界。</li>
</ol>
<p>情况2：</p>
<ol>
<li>
<p>线程1在9位置插入，进行扩容判断时，发现size为10的时候才需要扩容，所以直接插入</p>
</li>
<li>
<p>线程2在线程1工作期间也进行了这样的判断和操作，由于线程2操作晚于线程1，</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>ensureCapacityInternal(size + 1) elementData[size++] = e;
</code></pre></div><p>非原子性操作，很可能导致线程1扩容并添加完成元素后，线程2的扩容导致线程1的操作全部被清空，进而导致数组大小与预期不符。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public boolean add(E e) {
     ensureCapacityInternal(size + 1);  // Increments modCount!!
     elementData[size++] = e;
     return true;
 }
</code></pre></div></li>
</ol>
<h2>改进</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>/**
 * list线程不安全的示例
 */
public class baseArrayList {


    public static void main(String[] args) throws InterruptedException {
//        final List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
        final List&lt;Integer&gt; list = Collections.synchronizedList(new ArrayList&lt;Integer&gt;());
//        final List&lt;Integer&gt; list =new CopyOnWriteArrayList&lt;Integer&gt;();

        // 线程A将0-1000添加到list
        new Thread(new Runnable() {
            public void run() {
                for (int i = 0; i &lt; 1000 ; i++) {
                    list.add(i);

                    try {
                        Thread.sleep(1);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();

        // 线程B将1000-2000添加到列表
        new Thread(new Runnable() {
            public void run() {
                for (int i = 1000; i &lt; 2000 ; i++) {
                    list.add(i);

                    try {
                        Thread.sleep(1);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();

        Thread.sleep(2000);



        // 打印所有结果
        for (int i = 0; i &lt; list.size(); i++) {
            System.out.println("第" + (i + 1) + "个元素为：" + list.get(i));
        }
        System.out.println("list:size "+list.size());
    }



}

</code></pre></div><p>通过源码我们可以发现，这种操作不过是基于原有list的基础上加一个sync锁，虽然起到了线程安全的作用，但也很可能出现性能下降的风险。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> public boolean add(E e) {
            synchronized (mutex) {return c.add(e);}
        }
</code></pre></div><p>所以我们就需要介绍更加强大的并发工具<strong>CopyOrWritterList</strong>，使用代码如下所示</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>package collections.predecessor;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 * list线程不安全的示例
 */
public class baseArrayList {


    public static void main(String[] args) throws InterruptedException {
//        final List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
//        final List&lt;Integer&gt; list = Collections.synchronizedList(new ArrayList&lt;Integer&gt;());
        final List&lt;Integer&gt; list =new CopyOnWriteArrayList&lt;Integer&gt;();

        // 线程A将0-1000添加到list
        new Thread(new Runnable() {
            public void run() {
                for (int i = 0; i &lt; 1000 ; i++) {
                    list.add(i);

                    try {
                        Thread.sleep(1);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();

        // 线程B将1000-2000添加到列表
        new Thread(new Runnable() {
            public void run() {
                for (int i = 1000; i &lt; 2000 ; i++) {
                    list.add(i);

                    try {
                        Thread.sleep(1);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();

        Thread.sleep(2000);



        // 打印所有结果
        for (int i = 0; i &lt; list.size(); i++) {
            System.out.println("第" + (i + 1) + "个元素为：" + list.get(i));
        }
        System.out.println("list:size "+list.size());
    }



}

</code></pre></div><p>通过源码我们可以发现，CopyOrWriteList添加保证线程安全的做法是加可重入锁，但是他每次进行写操作时都会赋值一份这就是导致大量写操作的情况下性能会十分差劲</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> public boolean add(E e) {
        final ReentrantLock lock = this.lock;
        lock.lock();
        try {
            Object[] elements = getArray();
            int len = elements.length;
            Object[] newElements = Arrays.copyOf(elements, len + 1);
            newElements[len] = e;
            setArray(newElements);
            return true;
        } finally {
            lock.unlock();
        }
    }
</code></pre></div><p>但是读的情况下性能却非常优秀，没有加任何锁</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> public E get(int index) {
        return get(getArray(), index);
    }
</code></pre></div><p>需要唯一注意的一点是，使用CopyOnWriteArrayList迭代器时，你在何时声明迭代器，后续无论如何添加，对他遍历的结果都没有任何作用，如下所示</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public class CopyOnWriteArrayListBaseUse {

    /**
     * 读写分离，写不改变读的遍历
     * @param args
     */
    public static void main(String[] args) {
        CopyOnWriteArrayList&lt;Integer&gt; list=new CopyOnWriteArrayList&lt;&gt;();
//        ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();

        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);

        Iterator&lt;Integer&gt; it = list.iterator();
        while (it.hasNext()) {
            Integer cur = it.next();
            if (cur.equals(3)){
                Integer obj=5;
               list.remove(obj);
            }
            if (cur.equals(4)){
                list.add(444);
            }
            System.out.println("curNode "+cur+" list "+list);
        }
    }
}
</code></pre></div><h1>并发容器</h1>
<h2>先行介绍一下HashMap</h2>
<h3>HashMap和优缺点</h3>
<p>传统HashMap(这里以jdk8为例)它底层就是基于一个数组实现的hash表，在单线程情况下，他的查找和添加、删除效率都是相当不错的。 但是，在单线程情况下，HashMap进行put操作可能会导致以下问题</p>
<ol>
<li>多线程put导致数据丢失</li>
<li>多线程put扩容导致数据丢失</li>
<li>多线程put扩容导致cpu 100%</li>
</ol>
<p>对于第三点，我们不妨先回顾以下HashMap的相关源码</p>
<p>添加操作源码</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public V put(K key, V value)
{
    ......
    //算Hash值
    int hash = hash(key.hashCode());
    int i = indexFor(hash, table.length);
    //如果该key已被插入，则替换掉旧的value （链接操作）
    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) {
        Object k;
        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) {
            V oldValue = e.value;
            e.value = value;
            e.recordAccess(this);
            return oldValue;
        }
    }
    modCount++;
    //该key不存在，需要增加一个结点
    addEntry(hash, key, value, i);
    return null;
}
</code></pre></div><p>检查容量是否超标</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>void addEntry(int hash, K key, V value, int bucketIndex)
{
    Entry&lt;K,V&gt; e = table[bucketIndex];
    table[bucketIndex] = new Entry&lt;K,V&gt;(hash, key, value, e);
    //查看当前的size是否超过了我们设定的阈值threshold，如果超过，需要resize
    if (size++ &gt;= threshold)
        resize(2 * table.length);
} 
</code></pre></div><p>新建一个更大尺寸的hash表，然后把数据从老的Hash表中迁移到新的Hash表中。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>void resize(int newCapacity)
{
    Entry[] oldTable = table;
    int oldCapacity = oldTable.length;
    ......
    //创建一个新的Hash Table
    Entry[] newTable = new Entry[newCapacity];
    //将Old Hash Table上的数据迁移到New Hash Table上
    transfer(newTable);
    table = newTable;
    threshold = (int)(newCapacity * loadFactor);
}
</code></pre></div><p>元素迁移的源代码</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>void transfer(Entry[] newTable)
{
    Entry[] src = table;
    int newCapacity = newTable.length;
    //下面这段代码的意思是：
    //  从OldTable里摘一个元素出来，然后放到NewTable中
    for (int j = 0; j &lt; src.length; j++) {
        Entry&lt;K,V&gt; e = src[j];
        if (e != null) {
            src[j] = null;
            do {
                Entry&lt;K,V&gt; next = e.next; //记录迁移节点的后继节点
                int i = indexFor(e.hash, newCapacity);
                e.next = newTable[i]; //指向新容器的第一个元素
                newTable[i] = e;//新容器链表头节点指向被迁移节点
                e = next; //将指向需要被迁移节点的指针，指向后继节点
            } while (e != null);
        }
    }
} 
</code></pre></div><p>了解了这些源码之后，我们不妨描述这样一个场景，我们现在声明了一个size为2的HashMap,添加3、7、5三个元素。 可以看到添加到5之后容量就超过2了。 所以我们需要进行元素迁移。 按照transfer代码来看，在单线程情况下3、7还是会被迁移到同一个槽位中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209260011338.webp" alt="img"></p>
<p>我们再来看看多线程情况下的bug。假如多线程情况下，我们线程1执行到<code>Entry&lt;K,V&gt; next = e.next; //记录迁移节点的后继节点</code>被挂起。线程完成像上文单线程的迁移操作。</p>
<p>线程1拿到cpu时间片再次回来执行。他会完成这样下述步骤：</p>
<ol>
<li>将key 3的元素的next指针指向线程1开辟的新容器的首节点，即null</li>
<li>新容器指向key为3</li>
<li>e指针指向7</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209260021924.png" alt="在这里插入图片描述"></p>
<p>然后在进行如下操作：</p>
<ol>
<li>next指向3</li>
<li>7的next指向新容器槽位3的第一个元素，即3</li>
<li>新容器头指针指向7</li>
<li>e指向3</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209260021483.png" alt="在这里插入图片描述"></p>
<p>最后我们会执行这样一个步骤：</p>
<ol>
<li>next指向7</li>
<li><code>e.next = newTable[i]</code> 3的next指向新容器的next即7于是环形链形成，cpu就此被打爆。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209260021836.png" alt="image-20220926002148838"></p>
<h3>为什么jdk8的HashMap会在链表长度超过8的时候转为红黑树</h3>
<p>这里我们也可以补充一个有趣的事情，为什么jdk8的HashMap会在链表长度超过8的时候转为红黑树，当离散算法设计良好的话链表长度到达8的概率不到千分之一，假如你的链表长度达到8就说明你的hash算法设计的有问题，这时候就需要转为红黑树了</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> * 0:    0.60653066
     * 1:    0.30326533
     * 2:    0.07581633
     * 3:    0.01263606
     * 4:    0.00157952
     * 5:    0.00015795
     * 6:    0.00001316
     * 7:    0.00000094
     * 8:    0.00000006
     * more: less than 1 in ten million
</code></pre></div><h2>图示以及源码了解ConcurrentHashMap在jdk7和jdk8的区别</h2>
<p>如下图所示，jdk7的concurentHashMap,可以看出jdk7版本的ConcurrentHashMap最外层是一个segment，内部结构就是和jdk7版本的HashMap一样的结构，依然是数组+链表形成的拉链法键值对。 而且每个segment都会持有一个reentrantLock,这使得各自的并发操作是互相不会影响的。所以你有几个segment就支持几个并发操作。 同样的缺点也很明显，正是因为这样的操作，导致我们若手动指定segment就会导致map无法进行扩容操作。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209260052904.png" alt="image-20220926005229747"> <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209260052973.png" alt="image-20220926005212047"></p>
<p>相比之下jdk8版本的ConcurrentHashMap就与传统的HashMap无异了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209260052870.png" alt="image-20220926005249580">从源码中我们也能看出ConcurrentHashMap实现线程安全的核心核心</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//计算f在表的哪个位置</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                             <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment">// no lock when adding to empty bin</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>
                tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token comment">//使用节点作为锁完成元素添加操作</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token class-name">K</span> ek<span class="token punctuation">;</span>
                            <span class="token comment">//如果key的值一样则执行覆盖逻辑</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                                    <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>
                                     <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>
                                        e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
                                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                                <span class="token comment">//如果后继节点为空则执行后继插入操作</span>
                                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>
                                                              value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span>
                            binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>
                                                           value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>
                                    p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span><span class="token punctuation">)</span>
                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>ConcurrentHashMap使用注意事项</h2>
<p>如下所示，由于+1并不是原子操作，所以这样使用很可能导致线程安全问题</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 描述：     ConcurrentHashMap错误使用示例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentHashMapDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMapDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMapDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>




    <span class="token doc-comment comment">/**
     * 线程不安全示例
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>


    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre></div><p>所以正确方案可以是如下两种，需要了解的是第一种锁粒度太大了，建议使用ConcurrentHashMap提供的第二种解决方案</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 使用sync示例
 */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">ConcurrentHashMapDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
           <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
 <span class="token doc-comment comment">/**
     * 最佳线程安全使用示例
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">int</span> old<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> newVal<span class="token operator">=</span>old<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">boolean</span> b <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">,</span> old<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>



            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>


    <span class="token punctuation">}</span>
</code></pre></div><p>通过源码我们就能发现它使用的添加操作工作原理和上述put差不多，锁也是锁节点，而不像我们一样锁一个类，减少了粒度，提高了性能。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209260053186.png" alt="image-20220926005327166"></p>
<h2>阻塞队列</h2>
<h3>简介</h3>
<p>队列的作用在并发编程中也是非常重要的，通过并发队列，我们可以使用生产者和消费者模式的方式完成，数据在线程间的传递，同时也将线程安全的问题从我们转移到队列上。</p>
<h3>图解阻塞队列工作机制</h3>
<p>如下图所示，阻塞队列就是典型的生产者和消费者模式，当队列满时put就会阻塞，当队列为空时get就会为空。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209260053188.png" alt="image-20220926005337197"></p>
<h3>阻塞队列常见方法</h3>
<ol>
<li>put、take:添加或取出操作可能会阻塞</li>
<li>add、remove、element:添加取出时可能会报异常</li>
<li>offer、poll(取出时会删除该元素)、peek:第三组操作完成后会有返回值</li>
</ol>
<h3>ArrayBlockingQueue</h3>
<p>如下所示，这就是典型阻塞队列用法，通过下属示例就会发现当队列满的时侯，就会阻塞put操作。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">collections<span class="token punctuation">.</span>queue</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BlockingQueue</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayBlockingQueueTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Producer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Consumer1</span> consumer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer1</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有10个人前来面试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"候选人"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"候选人"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"入座"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"候选人全部入队"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">Consumer1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Consumer1</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//睡一会让生产者阻塞</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span> man<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"stop"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>man <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>man <span class="token operator">+</span> <span class="token string">" 面试中。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"面试结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>其他队列简介</h3>
<h4>LinkedBlockingQueue</h4>
<ol>
<li>默认无界队列</li>
<li>如下所示，使用两把锁完成入队和出队操作</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token doc-comment comment">/** Lock held by take, poll, etc */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> takeLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/** Lock held by put, offer, etc */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> putLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4>PriorityBlockingQueue</h4>
<ol>
<li>支持优先级</li>
<li>自然顺序</li>
<li>无界队列</li>
</ol>
<h4>SynchronousQueue</h4>
<ol>
<li>
<p>容量为0的队列</p>
</li>
<li>
<p>直接传递数据</p>
</li>
<li>
<p>cacheThread专用队列</p>
</li>
</ol>
<h4>ConcurrentLinkedQueue</h4>
<p>非阻塞队列，使用cas完成数据操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209260054918.png" alt="image-20220926005358910"></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209260011338.webp" type="image/webp"/>
    </item>
    <item>
      <title>Redis的3种特殊类型</title>
      <link>https://maijunxuan.cn/Redis/Redis%E7%9A%843%E7%A7%8D%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B.html</link>
      <guid>https://maijunxuan.cn/Redis/Redis%E7%9A%843%E7%A7%8D%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Redis的3种特殊类型</source>
      <description>Redis的3种特殊类型 Redis除了中5种基础数据类型，还有三种特殊的数据类型，分别是 HyperLogLogs（基数统计）， Bitmaps (位图) 和 geospatial （地理位置）。 HyperLogLogs（基数统计） Redis 2.8.9 版本更新了 Hyperloglog 数据结构！ 什么是基数？ 举个例子，A = {1, 2,...</description>
      <pubDate>Sun, 25 Sep 2022 17:42:45 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Redis除了中5种基础数据类型，还有三种特殊的数据类型，分别是 <strong>HyperLogLogs</strong>（基数统计）， <strong>Bitmaps</strong> (位图) 和 <strong>geospatial</strong> （地理位置）。</p>
</blockquote>
<h2>HyperLogLogs（基数统计）</h2>
<blockquote>
<p>Redis 2.8.9 版本更新了 Hyperloglog 数据结构！</p>
</blockquote>
<ul>
<li><strong>什么是基数？</strong></li>
</ul>
<p>举个例子，A = {1, 2, 3, 4, 5}， B = {3, 5, 6, 7, 9}；那么基数（不重复的元素）= 1, 2, 4, 6, 7, 9； （允许容错，即可以接受一定误差）</p>
<ul>
<li><strong>HyperLogLogs 基数统计用来解决什么问题</strong>？</li>
</ul>
<p>这个结构可以非常省内存的去统计各种计数，比如注册 IP 数、每日访问 IP 数、页面实时UV、在线用户数，共同好友数等。</p>
<ul>
<li><strong>它的优势体现在哪</strong>？</li>
</ul>
<p>一个大型的网站，每天 IP 比如有 100 万，粗算一个 IP 消耗 15 字节，那么 100 万个 IP 就是 15M。而 HyperLogLog 在 Redis 中每个键占用的内容都是 12K，理论存储近似接近 2^64 个值，不管存储的内容是什么，它一个基于基数估算的算法，只能比较准确的估算出基数，可以使用少量固定的内存去存储并识别集合中的唯一元素。而且这个估算的基数并不一定准确，是一个带有 0.81% 标准错误的近似值（对于可以接受一定容错的业务场景，比如IP数统计，UV等，是可以忽略不计的）。</p>
<ul>
<li><strong>相关命令使用</strong></li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfadd key1 a b c d e f g h i	<span class="token comment"># 创建第一组元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfcount key1					<span class="token comment"># 统计元素的基数数量</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">9</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfadd key2 c j k l m e g a		<span class="token comment"># 创建第二组元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfcount key2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfmerge key3 key1 key2			<span class="token comment"># 合并两组：key1 key2 -&gt; key3 并集</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfcount key3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">13</span>
</code></pre></div><h2>Bitmap （位存储）</h2>
<blockquote>
<p>Bitmap 即位图数据结构，都是操作二进制位来进行记录，只有0 和 1 两个状态。</p>
</blockquote>
<ul>
<li><strong>用来解决什么问题</strong>？</li>
</ul>
<p>比如：统计用户信息，活跃，不活跃！ 登录，未登录！ 打卡，不打卡！ <strong>两个状态的，都可以使用 Bitmaps</strong>！</p>
<p>如果存储一年的打卡状态需要多少内存呢？ 365 天 = 365 bit 1字节 = 8bit 46 个字节左右！</p>
<ul>
<li><strong>相关命令使用</strong></li>
</ul>
<p>使用bitmap 来记录 周一到周日的打卡！ 周一：1 周二：0 周三：0 周四：1 ......</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">0</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">1</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">2</span> <span class="token number">0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">3</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">4</span> <span class="token number">0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">5</span> <span class="token number">0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">6</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
</code></pre></div><p>查看某一天是否有打卡！</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getbit sign <span class="token number">3</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getbit sign <span class="token number">5</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
</code></pre></div><p>统计操作，统计 打卡的天数！</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> bitcount sign <span class="token comment"># 统计这周的打卡记录，就可以看到是否有全勤！</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
</code></pre></div><h2>geospatial (地理位置)</h2>
<blockquote>
<p>Redis 的 Geo 在 Redis 3.2 版本就推出了! 这个功能可以推算地理位置的信息: 两地之间的距离, 方圆几里的人</p>
</blockquote>
<h3>geoadd</h3>
<blockquote>
<p>添加地理位置</p>
</blockquote>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geoadd china:city <span class="token number">118.76</span> <span class="token number">32.04</span> manjing <span class="token number">112.55</span> <span class="token number">37.86</span> taiyuan <span class="token number">123.43</span> <span class="token number">41.80</span> shenyang
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geoadd china:city <span class="token number">144.05</span> <span class="token number">22.52</span> shengzhen <span class="token number">120.16</span> <span class="token number">30.24</span> hangzhou <span class="token number">108.96</span> <span class="token number">34.26</span> xian
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
</code></pre></div><p><strong>规则</strong></p>
<p>两级无法直接添加，我们一般会下载城市数据(这个网址可以查询 GEO： http://www.jsons.cn/lngcode)！</p>
<ul>
<li>有效的经度从-180度到180度。</li>
<li>有效的纬度从-85.05112878度到85.05112878度。</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geoadd china:city <span class="token number">39.90</span> <span class="token number">116.40</span> beijin
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR invalid longitude,latitude pair <span class="token number">39.900000</span>,116.400000
</code></pre></div><h3>geopos</h3>
<blockquote>
<p>获取指定的成员的经度和纬度</p>
</blockquote>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geopos china:city taiyuan manjing
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.54999905824661255"</span>
   <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"37.86000073876942196"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.75999957323074341"</span>
   <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span>
</code></pre></div><p>获得当前定位, 一定是一个坐标值!</p>
<h3>geodist</h3>
<blockquote>
<p>如果不存在, 返回空</p>
</blockquote>
<p>单位如下</p>
<ul>
<li>m</li>
<li>km</li>
<li>mi 英里</li>
<li>ft 英尺</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geodist china:city taiyuan shenyang m
<span class="token string">"1026439.1070"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geodist china:city taiyuan shenyang km
<span class="token string">"1026.4391"</span>
</code></pre></div><h3>georadius</h3>
<blockquote>
<p>附近的人 ==&gt; 获得所有附近的人的地址, 定位, 通过半径来查询</p>
</blockquote>
<p>获得指定数量的人</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km			以 <span class="token number">100,30</span> 这个坐标为中心, 寻找半径为1000km的城市
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"manjing"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km withdist
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km withcoord withdist count <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"manjing"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"864.9816"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.75999957323074341"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span>
</code></pre></div><p>参数 key 经度 纬度 半径 单位 [显示结果的经度和纬度] [显示结果的距离] [显示的结果的数量]</p>
<h3>georadiusbymember</h3>
<blockquote>
<p>显示与指定成员一定半径范围内的其他成员</p>
</blockquote>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadiusbymember china:city taiyuan <span class="token number">1000</span> km
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"manjing"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadiusbymember china:city taiyuan <span class="token number">1000</span> km withcoord withdist count <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"0.0000"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.54999905824661255"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"37.86000073876942196"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"514.2264"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span>
</code></pre></div><p>参数与 georadius 一样</p>
<h3>geohash</h3>
<blockquote>
<p>该命令返回11个字符的hash字符串</p>
</blockquote>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geohash china:city taiyuan shenyang
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"ww8p3hhqmp0"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"wxrvb9qyxk0"</span>
</code></pre></div><p>将二维的经纬度转换为一维的字符串, 如果两个字符串越接近, 则距离越近</p>
<h3>底层</h3>
<blockquote>
<p>geo底层的实现原理实际上就是Zset, 我们可以通过Zset命令来操作geo</p>
</blockquote>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">type</span> china:city
zset
</code></pre></div><p>查看全部元素 删除指定的元素</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrange china:city <span class="token number">0</span> <span class="token parameter variable">-1</span> withscores
 <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
 <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"4040115445396757"</span>
 <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span>
 <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"4054133997236782"</span>
 <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"manjing"</span>
 <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"4066006694128997"</span>
 <span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>
 <span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"4068216047500484"</span>
 <span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"shenyang"</span>
<span class="token number">1</span><span class="token punctuation">)</span>  <span class="token string">"4072519231994779"</span>
<span class="token number">2</span><span class="token punctuation">)</span>  <span class="token string">"shengzhen"</span>
<span class="token number">3</span><span class="token punctuation">)</span>  <span class="token string">"4154606886655324"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrem china:city manjing
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrange china:city <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"shenyang"</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"shengzhen"</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>String、StringBuffer、StringBuilder 的区别</title>
      <link>https://maijunxuan.cn/Java/Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2.html</link>
      <guid>https://maijunxuan.cn/Java/Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">String、StringBuffer、StringBuilder 的区别</source>
      <description>String、StringBuffer、StringBuilder 的区别 从可变性分析 String不可变 StringBuffer、StringBuilder都继承自AbstractStringBuilder ，两者的底层的数组value并没有使用private和final修饰，所以是可变的。 AbstractStringBuilder 源码如下所...</description>
      <pubDate>Sun, 25 Sep 2022 13:54:43 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>从可变性分析</h2>
<ol>
<li>String不可变</li>
<li>StringBuffer、StringBuilder都继承自AbstractStringBuilder ，两者的底层的数组value并没有使用private和final修饰，所以是可变的。</li>
</ol>
<p><code>AbstractStringBuilder</code> 源码如下所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Appendable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">appendNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>count <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里会进行数组拷贝将新字符串存到数组中</span>
        str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> value<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">+=</span> len<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><h2>从线程安全性考虑</h2>
<ol>
<li>String类是常量线程安全</li>
<li>StringBuilder 线程不安全</li>
<li>StringBuffer线程安全</li>
</ol>
<h2>从性能上分析</h2>
<ol>
<li>
<p>String是常量每次添加字符串都会将引用指向新的字符串</p>
</li>
<li>
<p>StringBuilder 非线程安全所以性能上相较于StringBuffer会快10%-15%</p>
</li>
</ol>
<h2>三者使用场景建议</h2>
<ol>
<li>
<p>操作少量数据，String即可</p>
</li>
<li>
<p>单线程操作大量字符串，建议使用StringBuilder</p>
</li>
<li>
<p>多线程用StringBuffer</p>
</li>
</ol>
<h1>String 不可变的原因</h1>
<p>从源码可以看到String底层是使用字符数组存储值的，之所以不可变是因为:</p>
<ol>
<li>value私有且final也没有对外提供字符串操作的方法。</li>
<li>类设置为final，子类也无法继承该类对其进行修改</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>
        <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** The value is used for character storage. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h1>字符串拼接用“+” 的底层工作机制</h1>
<p>如下所示代码</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"guy"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s4 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2 <span class="token operator">+</span> s3<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>查看其字节码可以看到jvm为了避免大量常量创建，会将其进行优化，改用StringBuilder进行拼接后toString。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">INVOKESPECIAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
        <span class="token constant">ALOAD</span> <span class="token number">1</span>
        <span class="token constant">INVOKEVIRTUAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">;</span>
        <span class="token constant">ALOAD</span> <span class="token number">2</span>
        <span class="token constant">INVOKEVIRTUAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">;</span>
        <span class="token constant">ALOAD</span> <span class="token number">3</span>
        <span class="token constant">INVOKEVIRTUAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">;</span>
        <span class="token constant">INVOKEVIRTUAL</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">.</span>toString <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>
        <span class="token constant">ASTORE</span> <span class="token number">4</span>
</code></pre></div><p>但是在循环体内使用+=的情况下很可能造成性能灾难</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"guys"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        string <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
</code></pre></div><p>可以看到在循环体内会不断创建StringBuilder进行拼接</p>
<p><img src="https://s2.loli.net/2023/06/14/zGbBZWUiAuE4oYl.png" alt="在这里插入图片描述"></p>
<p>来看看我们手动创建StringBuilder 进行拼接和+=由jvm优化后的性能差距</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            string <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用+=耗时:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用StringBuilder耗时:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre></div><p>输出结果，可以看到StringBuilder比+=快了将近6倍。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>使用+=耗时:6
使用StringBuilder耗时:1```

# String和Object的equals() 的区别

String对equals进行了重写，String比较的是字符串的值是否一致

```java
public boolean equals(Object anObject) {
        if (this == anObject) {
            return true;
        }
        if (anObject instanceof String) {
            String anotherString = (String)anObject;
            int n = value.length;
            if (n == anotherString.value.length) {
                char v1[] = value;
                char v2[] = anotherString.value;
                int i = 0;
                while (n-- != 0) {
                    if (v1[i] != v2[i])
                        return false;
                    i++;
                }
                return true;
            }
        }
        return false;
    }
</code></pre></div><p>而Object比较的则是两者的引用地址是否一致</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h1>字符串常量池</h1>
<p>如下代码所示，Java会将字符串存放在方法区的字符串常量池，后续如有变量需要可以直接复用，关于字符串常量池后文会介绍。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stringConst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
    <span class="token punctuation">}</span>
</code></pre></div><h1>图解String s1 = new String("abc");</h1>
<p>这段代码实际上会创建两个对象:</p>
<ol>
<li>创建String对象s1指向堆区的String对象</li>
<li>在字符串常量池中创建字符串abc</li>
</ol>
<p><img src="https://s2.loli.net/2023/06/14/QgjmB8r5t4MVpDh.png" alt="在这里插入图片描述"></p>
<h1>intern 方法</h1>
<p>该方法会将字符串值存放到字符串常量池中，并返回该引用。注意如果常量池存在则直接返回引用。若不存在才会创建并返回引用。</p>
<h2>常量intern</h2>
<p>可以看到下面这段代码，调用intern 的字符串和常量池的对象==比较返回的是true</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">internTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"s"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>常量+=intern</h2>
<p>再补充一个神奇的现象，常量字符串进行+=时会被jvm在编译自动优化，例如<code>String s1="a"+"b"</code>实际上会被优化为<code>String s1="ab"</code>，所以下面这段intern就会出现下面的结果</p>
<p>原因也很简单:</p>
<blockquote>
<p>对于编译期可以确定值的字符串，也就是常量字符串 ，jvm 会将其存入字符串常量池。并且，字符串常量拼接得到的字符串常量在编译阶段就已经被存放字符串常量池，这个得益于编译器的优化。 在编译过程中，Javac 编译器会进行一个叫做 常量折叠(Constant Folding) 的代码优化。</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">internTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"s"</span><span class="token operator">+</span><span class="token string">"tring"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>这一点我们查看字节码文件就得以印证</p>
<p><img src="https://s2.loli.net/2023/06/14/EHp4fY6tkjJZc2z.png" alt="在这里插入图片描述"></p>
<h2>final+=的intern</h2>
<p>final字符串会被jvm优化为常量，所以下面这段代码也会返回true</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Test
    public void internTest3() {
        final String s1 = "hello";
        final String s2 = "world";
        String s3 = s1 + s2;
        String s4 = "helloworld";

        System.out.println(s3 == s4);//true
    }
</code></pre></div><p>查看字节码得以印证</p>
<p><img src="https://s2.loli.net/2023/06/14/jgozKYPMSlhAIWi.png" alt="在这里插入图片描述"></p>
<h2>引用或者函数获取的+=</h2>
<p>注意jvm不会对引用和方法这种动态变化的情况进行优化，所以下面这段代码就会返回false。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">internTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>
        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
        <span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"world"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://s2.loli.net/2023/06/14/zGbBZWUiAuE4oYl.png" type="image/png"/>
    </item>
    <item>
      <title>概述</title>
      <link>https://maijunxuan.cn/Java/Java%E5%8F%8D%E5%B0%84%E5%B0%8F%E7%BB%93.html</link>
      <guid>https://maijunxuan.cn/Java/Java%E5%8F%8D%E5%B0%84%E5%B0%8F%E7%BB%93.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">概述</source>
      <description>概述 都说反射是各种框架的灵魂，就想Spring等框架需要获取注解上的bean名称等都会用到反射这个技术，所以我们不妨基于这篇文章来简单再复习一下反射。 Class类简介 每一个类都只会有一个Class对象，如下代码所示，他们都得得到一个true，这是为什么呢？ 实际上jvm在加载每个类时都会为每个类通过类加载器中的defineClass 去创建一个C...</description>
      <pubDate>Sun, 25 Sep 2022 13:54:43 GMT</pubDate>
      <content:encoded><![CDATA[
<p>都说反射是各种框架的灵魂，就想Spring等框架需要获取注解上的bean名称等都会用到反射这个技术，所以我们不妨基于这篇文章来简单再复习一下反射。</p>
<h1>Class类简介</h1>
<p>每一个类都只会有一个Class对象，如下代码所示，他们都得得到一个true，这是为什么呢？ 实际上jvm在加载每个类时都会为每个类通过类加载器中的<code>defineClass</code> 去创建一个Class对象，而且只创建一次，所以后续我们无论通过何种方式获取到的某个类的Class对象都是一样的。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取Class对象的三种方式
 * 1 Object ——&gt; getClass();
 * 2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性
 * 3 通过Class类的静态方法：forName（String  className）(常用)
 *
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FansheConstruct</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//第一种方式获取Class对象</span>
        <span class="token class-name">StudentConstruct</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentConstruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一new 产生一个Student对象，一个Class对象。</span>
        <span class="token class-name">Class</span> stuClass <span class="token operator">=</span> stu1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Class对象</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//第二种方式获取Class对象</span>
        <span class="token class-name">Class</span> stuClass2 <span class="token operator">=</span> <span class="token class-name">StudentConstruct</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuClass <span class="token operator">==</span> stuClass2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断第一种方式获取的Class对象和第二种方式获取的是否是同一个</span>

        <span class="token comment">//第三种方式获取Class对象</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span> stuClass3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"edu.zhku.mjx.interview.javaBase.refect.StudentConstruct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuClass3 <span class="token operator">==</span> stuClass2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断三种方式是否获取的是同一个Class对象</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>输出结果</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>调用了公有、无参构造方法执行了。。。
<span class="token class-name"><span class="token namespace">edu<span class="token punctuation">.</span>zhku<span class="token punctuation">.</span>mjx<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javaBase<span class="token punctuation">.</span>refect<span class="token punctuation">.</span></span>StudentConstruct</span>
<span class="token boolean">true</span>
<span class="token boolean">true</span>
</code></pre></div><h1>几个反射的示例</h1>
<h2>通过反射获取构造方法</h2>
<h3>基础学生类</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>

    <span class="token comment">//</span></code></pre></div>]]></content:encoded>
      <enclosure url="https://s2.loli.net/2023/06/14/KYyIvo5EjMQiqah.png" type="image/png"/>
    </item>
    <item>
      <title>标识符</title>
      <link>https://maijunxuan.cn/Java/Java%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93.html</link>
      <guid>https://maijunxuan.cn/Java/Java%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">标识符</source>
      <description>标识符 标识符和关键字的区别是什么？ 标识符就是我们使用的对象或者变量的名字，关键字就是被Java作为特殊标识的单词。 Java语言的关键字 访问控制 类，方法和变量修饰符 关键字 final 这几个关键字中我们还需要注意的是，final关键字修饰的变量是不可变的，但是对于引用类型来说，他代表的意思是引用的指向不变，但是引用指向的对象的值是可变的，参见...</description>
      <pubDate>Sun, 25 Sep 2022 13:54:43 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>标识符和关键字的区别是什么？</h2>
<p>标识符就是我们使用的对象或者变量的名字，关键字就是被Java作为特殊标识的单词。</p>
<h2>Java语言的关键字</h2>
<h3>访问控制</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. private:仅本类可以访问    
2. protected:对本包或者子类都可见
3. public:所有类可见
4. default:不修饰访问级别就是default，访问级别仅仅是本包的成员可以访问
</code></pre></div><h3>类，方法和变量修饰符</h3>
<h4>关键字</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. abstract    
2. class    
3. extends    
4. final    
5. implements    
6. interface    
7. native:该修饰符修饰的方法说明该方法不一定是Java实现的而是一个原生态的方法，是用其他的语言实现的，Java仅仅是通过JNI接口调用而已。
8. new    
9. static    
10. strictfp    
11. synchronized    
12. transient    
13. volatile    
14. enum
</code></pre></div><h4>final</h4>
<p>这几个关键字中我们还需要注意的是，final关键字修饰的变量是不可变的，但是对于引用类型来说，他代表的意思是引用的指向不变，但是引用指向的对象的值是可变的，参见以下代码</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * final对于引用来说代表仅代表引用指向不可变，不代表指向的对象不可变
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> evaluations<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> evaluations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>evaluations <span class="token operator">=</span> evaluations<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">giveGoldStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        evaluations<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：Gold star"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre></div><h4>transient</h4>
<p>transient使得我们的关键字不会被序列化</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * transient关键字防止序列化 注意该类需要实现Serializable 否则会报错
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Jackson"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"password123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//begin serializing</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">ObjectOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"bean.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"local serialized done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"de-serialzing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">ObjectInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"bean.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> fis<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User name: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  password:"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>new关键字使用注意事项(使用clone提高创建速度)</h4>
<p>Java的new关键字对轻量级对象非常支持，可以非常光速的new一个对象。但是对于那些重量级对象，构造函数存在大量的对象创建可能就非常耗时，所有我们建议使用clone方法。</p>
<p>如下所示，new 关键字对调用无参构造方法，需要3秒，对此我们可以使用clone方法绕过构造方法创建一个对象，但是clone出来的对象存在一个浅拷贝的问题，所以我们需要自行解决一下。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zsy<span class="token punctuation">.</span>javatuning<span class="token punctuation">.</span>tech</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Vector</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> vector<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getVector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> vector<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVector</span><span class="token punctuation">(</span><span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>vector <span class="token operator">=</span> vector<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建对象需要三秒......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Student</span> clone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//避免clone导致浅拷贝问题</span>
        <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> srcVector <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dstVector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> v <span class="token operator">:</span> srcVector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dstVector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        clone<span class="token punctuation">.</span><span class="token function">setVector</span><span class="token punctuation">(</span>dstVector<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> clone<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><p>测试代码</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> @Test
    public void cloneTest() throws CloneNotSupportedException {

        long start,end;
        start=System.currentTimeMillis();
        Student student=new Student();
        end=System.currentTimeMillis();
        System.out.println("学生1创建时间长 "+(end-start));


        student.setId("1");
        student.setName("小明");
        Vector&lt;String&gt; v = new Vector&lt;&gt;();
        v.add("000000");
        v.add("000001");
        student.setVector(v);

        start=System.currentTimeMillis();
        Student student2= student.newInstance();
        end=System.currentTimeMillis();
        System.out.println("学生2创建时间长 "+(end-start));


        for (String s : student2.getVector()) {
            System.out.println(s);
        }
//        false则说明深拷贝成功
        System.out.println(student.getVector()==student2.getVector());
    }
</code></pre></div><p>输出结果</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>创建对象需要三秒......
学生1创建时间长 3013
学生2创建时间长 0
000000
000001
false
</code></pre></div><h3>程序控制</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. break    
2. continue    
3. return    
4. do    
5. while    
6. if    
7. else
8. for    
9. instanceof:在 Java 中可以使用 instanceof 关键字判断一个对象是否为一个类（或接口、抽象类、父类）的实例
10. switch    
11. case    
12. default    
13. assert
</code></pre></div><h3>错误处理</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. try    
2. catch    
3. throw    
4. throws    
5. finally
</code></pre></div><h3>包相关</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. import    
2. package
</code></pre></div><h3>基本类型</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. boolean    
2. byte    
3. char    
4. double    
5. float    
6. int    
7. long
8. short
</code></pre></div><h3>变量引用</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. super    
2. this    
3. void    
</code></pre></div><h3>保留字</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. goto    
2. const
</code></pre></div><h1>Java注释有哪几种形式</h1>
<ol>
<li>单行注释 格式：</li>
</ol>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> //注释文字
</code></pre></div><ol>
<li>多行注释 格式：</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> /* 
 注释文字
*/
</code></pre></div><ol>
<li>文档注释 格式</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/** 
注释文字 
*/
</code></pre></div><p>例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/**
这是我的Hello World程序。
@author 开发者名字
*/
class Demo
<span class="token punctuation">{</span>
/*
这是主函数，是程序的入口
它的出现可以保证程序的独立运行，
*/
public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
//这是输出语句用于将括号内的数据打印到控制台。
System.out.println<span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h1>进制数</h1>
<h2>概念</h2>
<p>在计算机中数据都是以2进制存储的，但为了更方便的表述数据，又出现了八进制、十六进制。</p>
<h2>进制间的转换</h2>
<h3>十进制转二进制</h3>
<p>如下图二进制转为十进制的结果</p>
<p><img src="https://s2.loli.net/2023/06/14/iwfF56St18QRBx2.png" alt="在这里插入图片描述"></p>
<h3>二进制转十进制</h3>
<p>如下图将二进制转为十进制</p>
<p><img src="https://s2.loli.net/2023/06/14/FtW746kQlPvBfYZ.png" alt="在这里插入图片描述"></p>
<h3>其他进制间的转换</h3>
<p>二进制转十六进制，如下图二进制的4个位相当于一个十六进制，所以我们可以4个位置先换算成十进制再转为十六进制即可。八进制同理不多赘述。</p>
<p><img src="https://s2.loli.net/2023/06/14/NcFYQ5V8gTeGKxz.png" alt="在这里插入图片描述"></p>
<h3>负数的二进制表现形式</h3>
<p><strong>规律</strong>：正数的最高位为0，负数则为1</p>
<p><img src="https://s2.loli.net/2023/06/14/elH6ADIzM45Epgq.png" alt="在这里插入图片描述"></p>
<h1>变量</h1>
<h2>变量的概念</h2>
<ol>
<li>内存中的一个存储区域</li>
<li>该区域有自己的名称（变量名）和类型（数据类型）</li>
<li>该区域的数据可以在同一类型范围内不断变化</li>
</ol>
<h2>类型</h2>
<p>java是一门<strong>强类型语言</strong>，所有对数据类型区分的很明显</p>
<h2>种类</h2>
<h3>数值型(常量整数默认为int)</h3>
<ol>
<li>byte：1个字节，-128~128 (-2 ^ 7 ~ 2^7)</li>
<li>short: 2个字节， -32768 ~ 32767 (-2 ^ 15 ~ 2^15)</li>
<li>int : 4个字节，用高位表示符号，( - 2 ^ 32 ~ 2^32)</li>
<li>long:8个字节</li>
</ol>
<h3>浮点型</h3>
<ol>
<li>float(单精度浮点型)：<code>float f=2.3f //不加f编译会认为可能会出现精度丢失，而编译不通过</code></li>
<li>double(双精度浮点型)</li>
</ol>
<h3>字符集</h3>
<p>char： 1个字节，0 ~ 65535</p>
<h3>布尔型</h3>
<p>boolean:1个字节，true或false</p>
<h2>精度丢失问题</h2>
<p><img src="https://s2.loli.net/2023/06/14/2SnpYjVkmcqUP3g.png" alt="在这里插入图片描述"></p>
<p><img src="https://s2.loli.net/2023/06/14/WcDXsPeq7Jyx8GR.png" alt="在这里插入图片描述"></p>
<p>那为何byte b=3可以通过呢？</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>答：在赋值时编译器会检查赋的值的取值范围是否在数据类型以内，题目中值的范围符合要求。
</code></pre></div><p>解决方案</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>byte <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">(</span>b+2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>成员变量和局部变量的区别</h2>
<h3>语法上</h3>
<p>成员变量：可被访问修饰符以及static修饰 局部变量:不可被访问修饰符以及static等修饰</p>
<h3>存储</h3>
<p>成员变量在堆内存 局部变量是在栈内存</p>
<h3>生存时间</h3>
<p>成员变量若为static则随着类存在而存在，若无static则随着对象存在而存在 局部变量则随着方法调用结束</p>
<h3>默认值</h3>
<p>成员变量有默认值</p>
<h2>静态变量有什么作用</h2>
<p>可被多个类共享，无论创建多少个类，使用static修饰的变量永远只有这一个 若static再加一个final，这个变量就相当于一个常量</p>
<h2>字符型常量和字符串常量的区别</h2>
<ol>
<li>字符串在Java中占用两个字节，字符串若干个字节</li>
<li>字符用单引号，字符串用双引号</li>
</ol>
<h2>变量调优技巧</h2>
<h3>将常用变量局部化，可提升代码执行性能</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>package com.optimize.java;

import org.junit.Test;

//使用局部变量优化程序性能

/**
 * testLocalVar:1
 * testStaticVar:10
 * testInstanceVar:10
 */
public class Var {

    /**
     * 使用本地变量耗时
     */
    @Test
    public void testLocalVar() {
        int a = 0;
        long start = System.currentTimeMillis();
        for (int i = 0; i &lt; 100000000; i++) {
            a++;
        }
        long end = System.currentTimeMillis();
        System.out.println("testLocalVar:" + (end - start));
    }



    private static int ta=0;
    /**
     * 使用静态变量耗时
     */
    @Test
    public void testStaticVar() {
        long start = System.currentTimeMillis();
        for (int i = 0; i &lt; 100000000; i++) {
            ta++;
        }
        long end = System.currentTimeMillis();
        System.out.println("testStaticVar:" + (end - start));
    }


    private int instanceA=0;

    /**
     * 使用示例变量耗时
     */
    @Test
    public void testInstanceVar() {
        long start = System.currentTimeMillis();
        for (int i = 0; i &lt; 100000000; i++) {
            instanceA++;
        }
        long end = System.currentTimeMillis();
        System.out.println("testInstanceVar:" + (end - start));
    }

}

</code></pre></div><h3>数组拷贝使用arrayCopy</h3>
<p>在容量极大的情况下，使用native暴露的api可提升执行效率</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 1000大小的数组
 * testArrayCopyNormal;17
 * testArrayCopySystem;40
 *
 * 100w
 *
 * testArrayCopyNormal;17005
 * testArrayCopySystem;15705
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayCopy</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testArrayCopyNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> size<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> srcArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dstArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            srcArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dstArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> srcArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testArrayCopyNormal;"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testArrayCopySystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> size<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> srcArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dstArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            srcArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>srcArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dstArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testArrayCopySystem;"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h1>包装类</h1>
<h2>基本类型和包装类型的区别</h2>
<ol>
<li>包装类型成员变量默认为null，成员变量默认为该类型默认值，例如int成员变量默认为0</li>
<li>基本类型的局部变量会被存放在虚拟机栈的局部变量表中，而非static的借本类型成员变量都是存放在堆中。而包装类型在HotSpot 逃逸分析发现并没有逃逸的外部时会避免分配在堆上，其他情况都会分配上堆区。</li>
<li>包装类型可以作为泛型，基本类型不可</li>
</ol>
<h2>包装类型的缓存机制</h2>
<h3>简介</h3>
<p>Java会对4种基本整数类型(short int long byte)设置缓存数据，如下源码所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>注意byte的缓存范围是0-127</p>
<h3>float和double没有实现缓存机制</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doubleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//        float double 没有实现缓存机制</span>
        <span class="token class-name">Double</span> d <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>
        <span class="token class-name">Double</span> d2 <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d <span class="token operator">==</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3>包装类使用注意事项</h3>
<p>正是因为这种范围机制，在缓存范围内的对象比较结果都是true，反之使用false，这正是为什么在对包装类比较时，我们都需要使用<code>equals</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">integerValueTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * public static Integer valueOf(int i) <span class="token punctuation">{</span>
         *         if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)
         *             return IntegerCache.cache[i + (-IntegerCache.low)];
         *         return new Integer(i);
         *     <span class="token punctuation">}</span>
         */</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>

        <span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> integer2 <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token operator">==</span>integer2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>自动装箱和自动拆箱</h2>
<h3>简介</h3>
<p>如下所示，将基本类型赋值给包装类型会触发自动装箱，调用valueOf返回一个对象实例。而自动拆箱则是调用xxxValue将包装类的值取出赋值给基本类型</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">baseTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token doc-comment comment">/**
         * 装箱字节码查看
         * 装箱操作，相当于调用valueOf从返回一个对象实例
         * 字节码核心代码:INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;
         */</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 自动拆箱
         * 查看字节码相当于调用了intValue
         *  INVOKEVIRTUAL java/lang/Integer.intValue ()I
         */</span>
        <span class="token keyword">int</span> i2 <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3>包装类的比较</h3>
<p>如下代码i是通过装箱通过valueOf从缓存中取得，而i2则是自己从堆区创建的一个对象，所以两者返回false，要想比较数值必须使用equals</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">integerQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//相当于Integer.valueOf(10) 从缓存中拿值</span>
        <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个新的对象，所以两者值不相等</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>这个比较器也是同理，因为new Integer做的是在堆区创建一个对象，==比较的是两个引用的地址，所以返回1</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">BoxedCompareTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> naturalOrder <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> compare <span class="token operator">=</span> naturalOrder<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回1 因为integer new出来的对象比较的是地址值</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>正确做法是将传入的Integer对象进行拆箱进行比较</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
     * 正确比较包装对象做法是进行手动拆箱
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">BoxedCompareTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> naturalOrder <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> compaer1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> compaer2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>compaer1 <span class="token operator">&lt;</span> compaer2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>compaer1 <span class="token operator">==</span> compaer2 <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> compare <span class="token operator">=</span> naturalOrder<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回1 因为integer new出来的对象比较的是地址值</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3>性能问题</h3>
<p>使用包装类和基本类型运算会会导致频繁拆装箱，通过查看字节码，我们可以看到第一段 <code>sum += i;</code>实际上会进行<code>INVOKESTATIC java/lang/Long.valueOf (J)Ljava/lang/Long;</code>进行装箱操作。所以我们应该避免这种情况，在进行大量的数值计算时尽量使用基本类型</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 频繁拆装箱会导致性能问题
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">boxedSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> sum <span class="token operator">=</span> <span class="token number">0l</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//会导致频繁装箱</span>
<span class="token comment">//            INVOKESTATIC java/lang/Long.valueOf (J)Ljava/lang/Long;</span>
            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4723</span>

        <span class="token keyword">long</span> sum1 <span class="token operator">=</span> <span class="token number">0l</span><span class="token punctuation">;</span>
        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum1 <span class="token operator">+=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//519</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3>空指针问题</h3>
<p>由于自动拆装箱机制，下面这段代码会进行自动拆箱，进而导致空指针异常</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Unbelievable</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">Integer</span> unbelievable<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        包装类型会进行自动拆箱 调用valueOf</span>
        <span class="token comment">// INVOKEVIRTUAL java/lang/Integer.intValue ()I</span>
<span class="token comment">//  所以很可能导致空指针</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>unbelievable <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Unbelievable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><h1>精度高要求的运算</h1>
<h2>浮点数运算错误</h2>
<p>如下代码所示，计算机使用二进制表示小数时可能会出现计算循环，由于精度截断很可能导致计算结果错误</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 小数精度丢失原因
         *  0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止，
         * 在这个计算过程中，得到的整数部分从上到下排列就是二进制的结果。
         * 0.2 * 2 = 0.4 -&gt; 0
         * 0.4 * 2 = 0.8 -&gt; 0
         * 0.8 * 2 = 1.6 -&gt; 1
         * 0.6 * 2 = 1.2 -&gt; 1
         * 0.2 * 2 = 0.4 -&gt; 0（发生循环）
         * ...
         */</span>
        <span class="token keyword">float</span> result1 <span class="token operator">=</span> <span class="token number">3.0f</span> <span class="token operator">-</span> <span class="token number">2.9f</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> result2 <span class="token operator">=</span> <span class="token number">2.9f</span> <span class="token operator">-</span> <span class="token number">2.8f</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1 <span class="token operator">==</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>如何解决浮点数精度丢失问题</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accurateCacl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> num3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> result1 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> result2 <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.1</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.1</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>超过long类型的整数如何标识</h2>
<p>如下所示，使用常规类型计算超过long的值会造成计算错误，所以我们可以使用bigInteger解决问题</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">maxLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> maxVal <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 加1后高位变1成为负数
         */</span>
        <span class="token keyword">long</span> maxValAdd <span class="token operator">=</span> maxVal <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maxValAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maxValAdd <span class="token operator">==</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//超过long类型的计算方式</span>
        <span class="token class-name">BigInteger</span> bigInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"9223372036854775807"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigInteger<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
</code></pre></div><h2>高性能精度运算技巧</h2>
<p>我们来看一个例子，代码如下所示，我们想看看一块钱可以把多少块糖果，注意糖果每次循环结果会涨0.1元</p>
<h3>代码段1</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bugBuySugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> funds <span class="token operator">=</span> <span class="token number">1.00</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> itemCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0.10</span><span class="token punctuation">;</span> funds <span class="token operator">&gt;=</span> price<span class="token punctuation">;</span> price <span class="token operator">+=</span> <span class="token number">0.10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"funds:"</span> <span class="token operator">+</span> funds <span class="token operator">+</span> <span class="token string">"     price:"</span> <span class="token operator">+</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
            funds <span class="token operator">-=</span> price<span class="token punctuation">;</span>
            itemCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"remain:"</span> <span class="token operator">+</span> funds <span class="token operator">+</span> <span class="token string">"   itemCount:"</span> <span class="token operator">+</span> itemCount<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>输出结果，可以看到精度计算异常了</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>funds:1.0     price:0.1
remain:0.9   itemCount:1
funds:0.9     price:0.2
remain:0.7   itemCount:2
funds:0.7     price:0.30000000000000004
remain:0.3999999999999999   itemCount:3

</code></pre></div><h3>代码段2</h3>
<p>使用BigDecimal 可以解决问题，但是性能差、操作不便</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 缺点
     * 1. 不方便
     * 2. 处理速度较慢
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">BuySugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> <span class="token constant">TEN_CENT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> funds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> itemCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> price <span class="token operator">=</span> <span class="token constant">TEN_CENT</span><span class="token punctuation">;</span>
             funds<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
             price <span class="token operator">=</span> price<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"funds:"</span> <span class="token operator">+</span> funds <span class="token operator">+</span> <span class="token string">"     price:"</span> <span class="token operator">+</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
            funds <span class="token operator">=</span> funds<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
            itemCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"remain:"</span> <span class="token operator">+</span> funds <span class="token operator">+</span> <span class="token string">"   itemCount:"</span> <span class="token operator">+</span> itemCount<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3>代码段3</h3>
<p>代码如下所示，我们完全可以结合业务场景决定将这段代码转为整数完成计算，从而避免BigDecimal 运算的开销</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
     * 最佳解决方案 *100
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bestBuySugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> funds <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> itemCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> funds <span class="token operator">&gt;=</span> price<span class="token punctuation">;</span> price <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"funds:"</span> <span class="token operator">+</span> funds <span class="token operator">+</span> <span class="token string">"     price:"</span> <span class="token operator">+</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
            funds <span class="token operator">-=</span> price<span class="token punctuation">;</span>
            itemCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"remain:"</span> <span class="token operator">+</span> funds <span class="token operator">+</span> <span class="token string">"   itemCount:"</span> <span class="token operator">+</span> itemCount<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><h1>运算符</h1>
<h2>算术运算符</h2>
<h3>算数运算符种类</h3>
<p><img src="https://s2.loli.net/2023/06/14/MaN1JgwVFD6xjmS.png" alt="在这里插入图片描述"></p>
<h3>算数运算符使用技巧</h3>
<p>常用表达式提取可提高代码执行效率</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>package com.optimize.java;

import org.junit.Test;

/**
 * 提取公共表达式提升性能
 * withExpression:3
 * withoutExpression:4
 */
public class ExtractExpression {

    @Test
    public void withoutExpression() {
        double d = Math.random();
        double a = Math.random();
        double b = Math.random();
        double e = Math.random();
        double x, y;
        long start = System.currentTimeMillis();
        for (int i = 0; i &lt; Integer.MAX_VALUE; i++) {
            x = d * a * b / 3 * 4 * a;
            y = e * a * b / 3 * 4 * a;
        }
        long end = System.currentTimeMillis();
        System.out.println("withoutExpression:" + (end - start));
    }


    @Test
    public void withExpression() {
        double d = Math.random();
        double a = Math.random();
        double b = Math.random();
        double e = Math.random();
        double x, y;
        double t = a * b / 3 * 4 * a;
        long start = System.currentTimeMillis();
        for (int i = 0; i &lt; Integer.MAX_VALUE; i++) {
            x = d * t;
            y = e * t;
        }
        long end = System.currentTimeMillis();
        System.out.println("withExpression:" + (end - start));
    }
}

</code></pre></div><h2>算数运算符面试题</h2>
<ol>
<li>以下两个代码的输出结果</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>System.out.println<span class="token punctuation">(</span><span class="token string">"5+5="</span>+5+5<span class="token punctuation">)</span><span class="token punctuation">;</span>//5+5<span class="token operator">=</span><span class="token number">55</span>
System.out.println<span class="token punctuation">(</span><span class="token string">"5+5="</span>+<span class="token punctuation">(</span><span class="token number">5</span>+5<span class="token punctuation">))</span><span class="token punctuation">;</span>//5+5<span class="token operator">=</span><span class="token number">10</span>
</code></pre></div><ol>
<li>
<p>以下两个输出结果</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>System.out.println<span class="token punctuation">(</span><span class="token number">1</span>%-5<span class="token punctuation">)</span><span class="token punctuation">;</span>
System.out.println<span class="token punctuation">(</span>-1%5<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li>
</ol>
<p>答:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>取模运算的符号以左边符号为主，所以输出结果为
1
-1
</code></pre></div><ol>
<li>转义字符的注意点</li>
</ol>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Linux回车符：\n
Windows回车符：\r\n
</code></pre></div><ol>
<li>char c='你' 报错的原因</li>
</ol>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>汉字占两个字节
</code></pre></div><h1>赋值运算符</h1>
<h2>种类</h2>
<p>= , +=, -=, *=, /=, %=</p>
<h2>含义</h2>
<p>s+=2 =&gt; s=s+2</p>
<h2>面试题</h2>
<p>short s=4; s=s+5;//会报错 s+=5;//不报错</p>
<p>原因：s+=5做完计算会做自动类型转换，原理和赋值运算一样</p>
<h1>比较运算符</h1>
<p><img src="https://s2.loli.net/2023/06/14/leDd9RZB7y3xTwI.png" alt="在这里插入图片描述"></p>
<h1>逻辑运算符</h1>
<p><img src="https://s2.loli.net/2023/06/14/br9IyBUS5iPxZcA.png" alt="在这里插入图片描述"></p>
<p>注意事项</p>
<ol>
<li>
<p>逻辑运算符用于连接boolean类型的表达式</p>
</li>
<li>
<p>&amp; : 只要两边的boolean表达式结果，有一个为false。那么结果就是false。只有两边都为true，结果为true。</p>
</li>
<li>
<p>| : 两边只要有一个为true，结果为true。只有两边都有false，结果为false。</p>
</li>
<li>
<p>^ : 异或；就是和|有点不一样。当true ^ true = false;</p>
</li>
<li>
<p>&amp;和&amp;&amp;的特点：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> &amp;:无论左边是true是false。右边都运算。
 &amp;&amp;:当左边为false时，右边不运算。从而提高运算效率
</code></pre></div></li>
<li>
<p>|：两边都参与运算。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> ||：当左边为true。右边不运算。
</code></pre></div></li>
</ol>
<h1>位运算</h1>
<h2>位运算符简介</h2>
<p><img src="https://s2.loli.net/2023/06/14/pzLf7TjGv385brU.png" alt="在这里插入图片描述"></p>
<h2>左移右移运算</h2>
<ol>
<li>左移&lt;&lt;，左移为乘，移几位就乘2的几次方</li>
</ol>
<p><img src="https://s2.loli.net/2023/06/14/solgcYSJPe3InFD.png" alt="在这里插入图片描述">2.</p>
<p>右移&gt;&gt; 右移为除，移几位就除2的几次方</p>
<p><img src="https://s2.loli.net/2023/06/14/Nc2kIl1gouO4Yvr.png" alt="在这里插入图片描述"></p>
<ol>
<li>无符号右移&gt; &gt; &gt; 和 &gt;&gt;的区别</li>
</ol>
<p><img src="https://s2.loli.net/2023/06/14/G1jKclp2n6AJh4T.png" alt="在这里插入图片描述"></p>
<h2>取反运算符和负数的关系</h2>
<ol>
<li>如何得出负数：即正数的值取反再+1</li>
<li>算法二进制数的负数值为多少：即先加1再取反得到正数，再加负号</li>
</ol>
<h2>亦或运算的实用场景</h2>
<p>因为1 ^2 ^2=1,5 ^3 ^3=5 所以 当一个数亦或两次相同的数值时，数值不变</p>
<p><strong>用途</strong>：加密，有个数据要给别人，先亦或一下，当别人收到时，再亦或一遍还原</p>
<h2>使用位运算替换乘除法</h2>
<p>位运算可提高代码执行效率，使用位运算可大大提高代码执行效率</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>package com.optimize.java;

import org.junit.Test;

/**
 * 使用位运算替代乘除法计算
 * testMultiplyBit:9
 * testMultiply:93
 */
public class MathOp {

    @Test
    public void testMultiply() {
        long start = System.currentTimeMillis();
        int a = 100;
        for (int i = 0; i &lt; 100000000; i++) {
            a *= 2;
            a /= 2;
        }
        long end = System.currentTimeMillis();
        System.out.println("testMultiply:" + (end - start));
    }


    @Test
    public void testMultiplyBit() {
        long start = System.currentTimeMillis();
        int a = 100;
        for (int i = 0; i &lt; 100000000; i++) {
            a &lt;&lt;= 1;
            a &gt;&gt;= 1;
        }
        long end = System.currentTimeMillis();
        System.out.println("testMultiplyBit:" + (end - start));
    }
}

</code></pre></div><h1>综合练习1(变量交换)</h1>
<p>不使用第三个变量交换两个变量的值</p>
<ol>
<li>倒水法</li>
</ol>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public static void main(String[] args) {
//        倒水法解决变量交换
        int m=3;
        int n=8;
        m=m+n;//将两个变量混在一起
        n=m-n;//n从混在一起的值中减去自己，得到m的值
        m=m-n;//此时n的值就是m原先的值，让m减去自己原先的值，得到n的值

        System.out.println(m);
        System.out.println(n);
    }
</code></pre></div><ol>
<li>位运算法</li>
</ol>
<p><strong>原理</strong>：n ^ m ^ m=n 即两次异或运算就会还原被异或运算的值</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>     public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>



//        亦或法解决变量交换
        int m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        int n <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
        m <span class="token operator">=</span> m ^ n<span class="token punctuation">;</span>
        n <span class="token operator">=</span> m ^ n<span class="token punctuation">;</span>//要想让n变成m的值，我们就得做到 <span class="token assign-left variable">n</span><span class="token operator">=</span>m^n^n<span class="token operator">==</span><span class="token operator">&gt;</span>所以这里赋值的值就是m^n
        m <span class="token operator">=</span> n ^ m<span class="token punctuation">;</span>//要想让m变成n 我们就得做到m<span class="token operator">=</span>n^m^m<span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span>所以这里就是n^m
        System.out.println<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System.out.println<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre></div><h1>综合练习2(高效率计算2*8)</h1>
<ol>
<li>传统二进制计算2*8 ，一位位乘过去</li>
</ol>
<p><img src="https://s2.loli.net/2023/06/14/7VRw46BHMjfEnWL.png" alt="在这里插入图片描述"></p>
<ol>
<li>使用位运算 2&lt;&lt;3，提高效率</li>
</ol>
<p><img src="https://s2.loli.net/2023/06/14/ovmTHge3aAKFduw.png" alt="在这里插入图片描述"></p>
<h1>程序流程控制</h1>
<h2>if</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>// 基本用法
int x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

        if<span class="token punctuation">(</span>x<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            System.out.println<span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            System.out.println<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre></div><p>注意事项，同样if逻辑，使用if else 逻辑比全if效率高</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>        int n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

        if<span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>
            System.out.println<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> if<span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">)</span>
            System.out.println<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> if<span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">)</span>
            System.out.println<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            System.out.println<span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        /*
        if<span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>
            System.out.println<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        if<span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">)</span>
            System.out.println<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        if<span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">)</span>
            System.out.println<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            System.out.println<span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        */
</code></pre></div><h2>switch</h2>
<ol>
<li>常规用法</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>int x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

        switch<span class="token punctuation">(</span>x<span class="token punctuation">)</span>//byte short int char
        <span class="token punctuation">{</span>
            default:
                System.out.println<span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                //break<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span>:
                System.out.println<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                //break<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">6</span>:
                System.out.println<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span>:
                System.out.println<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin class-name">break</span><span class="token punctuation">;</span>


        <span class="token punctuation">}</span>

</code></pre></div><ol>
<li>
<p>注意事项 if和switch语句很像。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> 具体什么场景下，应用哪个语句呢？
 如果判断的具体数值不多，而是符合byte short int char这四种类型。
 虽然两个语句都可以使用，建议使用swtich语句。因为效率稍高。
 **其他情况**：对区间判断，对结果为boolean类型判断，使用if，if的使用范围更广。
</code></pre></div></li>
</ol>
<h2>使用if else替代switch提高执行效率</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * jdk7使用数组等可以一定程度提高判断性能
 * 但是jdk8 使用if else性能最佳
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplaceSwitch</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSwitchInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">switchInt</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testSwitchInt:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">switchInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">7</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testArrayInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> answer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">arrayInt</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testArrayInt:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">arrayInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> idx <span class="token operator">&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> answer<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>



    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIfElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">IfElseInt</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testIfElse:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">IfElseInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">7</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><h2>计算密集型避免使用stream</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 对于计算密集型流式编程需要构造stream对象并对流中每个对象生成管理对象，开销极大，所以性能极低，并行流更是灾难
 * withStream 81
 * withparallelStream 711
 * withoutStream 4
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withoutStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"withoutStream "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>d <span class="token operator">-&gt;</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"withStream "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withparallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>d <span class="token operator">-&gt;</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"withparallelStream "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h1>综合练习3(十进制转十六进制)</h1>
<p>使用位运算 2&lt;&lt;3，提高效率</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 十进制转十六进制
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TenConvertSixteen</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token number">65036</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 除16取余数得最低1位，然后把商继续除得第2位，直到商等于0
     * <span class="token keyword">@param</span> <span class="token parameter">num</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token char">'A'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>temp <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            num <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://s2.loli.net/2023/06/14/iwfF56St18QRBx2.png" type="image/png"/>
    </item>
    <item>
      <title>异常</title>
      <link>https://maijunxuan.cn/Java/Java%E5%BC%82%E5%B8%B8%E5%B0%8F%E7%BB%93.html</link>
      <guid>https://maijunxuan.cn/Java/Java%E5%BC%82%E5%B8%B8%E5%B0%8F%E7%BB%93.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">异常</source>
      <description>异常 概述 当程序出现问题时，将错误交给虚拟机进而停止程序执行的情况，我们称为异常。 Exception和Error的区别 Exception 这种错误类型程序是可以处理的，Exception包含受检异常和非受检异常，这一点我们后文会展开详细介绍。 Error 这种错误一般都是OOM，Java虚拟机运行错误(Virtual MachineError)，...</description>
      <pubDate>Sun, 25 Sep 2022 13:54:43 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>概述</h2>
<p>当程序出现问题时，将错误交给虚拟机进而停止程序执行的情况，我们称为异常。</p>
<h2>Exception和Error的区别</h2>
<h3>Exception</h3>
<p>这种错误类型程序是可以处理的，Exception包含受检异常和非受检异常，这一点我们后文会展开详细介绍。</p>
<h3>Error</h3>
<p>这种错误一般都是OOM，Java虚拟机运行错误(Virtual MachineError)，或者类定义错误(NoClassDefFoundError)。我们不建议通过catch进行捕获。而是让虚拟机进行线程终止。</p>
<h2>受检异常和非受检异常</h2>
<h3>受检异常</h3>
<p>受检异常一般在调用时，用户就需要对其进行处理，如果不处理则不会通过编译。</p>
<p>例如FileInputStream，如果我们没有对其构造方法抛出的错误(即受检异常)进行处理，我们是无法通过编译的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252159285.png" alt="在这里插入图片描述"></p>
<h3>非受检异常</h3>
<p>非受检异常一般是运行时异常，常见的有空指针异常、非法参数异常、算数异常、数组越界等。</p>
<h2>Throwable常用的方法有哪些</h2>
<ol>
<li>String getMessage():返回异常的错误的简要信息。</li>
<li>String toString():返回异常发生时的详细信息。</li>
<li>String getLocalizedMessage():返回异常本地化信息。</li>
<li>void printStackTrace():在控制台上打印堆栈追踪信息。</li>
</ol>
<h2>异常抛出示例</h2>
<p>我们自定义一个受检异常</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"自定义算术异常"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>编写一个除法的函数</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span>  number<span class="token punctuation">,</span><span class="token keyword">int</span> divNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArithmeticException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>divNum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> number <span class="token operator">/</span> divNum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>测试代码</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> number<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"calculateTest计算失败，请求参数:[{}],错误原因[{}]"</span><span class="token punctuation">,</span>number<span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token doc-comment comment">/**
             * 输出
             * [main] ERROR com.guide.exception.ExceptionTest - calculateTest计算失败，请求参数:[20],错误原因[自定义算术异常]
             */</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>try-catch运行原理</h2>
<p>try块代码执行报错 若有catch模块catch则会对其进行捕获处理，例如我们上文捕获了ArithmeticException ，那么catch (ArithmeticException e) 实质上会做一个Exception e = new ArithmeticException()的动作，进而按照用户的想法进行错误捕获逻辑处理。</p>
<h2>多异常捕获处理技巧</h2>
<h3>原则</h3>
<ol>
<li>有几个异常就处理几个异常，如果无法处理就抛出</li>
<li>父类exception放在最下方</li>
<li>多异常建议使用|进行归类整理</li>
</ol>
<h3>代码示例</h3>
<p>如下所示，我们自定义一个自定义错误函数</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span>  number<span class="token punctuation">,</span><span class="token keyword">int</span> divNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">,</span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">UnknownHostException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>divNum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> number <span class="token operator">/</span> divNum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>假定UnknownHostException 是用户配置问题，我们无法处理，那么就抛出，其他错误一一捕获，所以我们的代码可能是这样</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> number<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre></div><p>实际在为了让代码更加整洁高效。生成的catch块也只是一个公共的代码块，所以我们最终的代码应该是下面这个样子</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> number<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span><span class="token operator">|</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"calculateTest执行报错，用户执行出错或者文件数据获取失败，请求参数[{}],错误信息[{}]"</span><span class="token punctuation">,</span>number<span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"calculateTest执行报错，文件操作异常，请求参数[{}],错误信息[{}]"</span><span class="token punctuation">,</span>number<span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"calculateTest执行报错，请求参数[{}],错误信息[{}]"</span><span class="token punctuation">,</span>number<span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

</code></pre></div><h3>注意事项</h3>
<p>使用|运算符之后e会变为final变量，用户无法改变引用的指向</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252159071.png" alt="在这里插入图片描述"></p>
<h2>throw于throws的区别</h2>
<ol>
<li>throws放在函数上，throw放在函数内</li>
<li>throws可以跟多个错误类，throw只能跟单个异常对象</li>
</ol>
<h2>特殊的异常对象 RuntimeException</h2>
<h3>概述</h3>
<p>使用runtime异常类时，在函数内throw则函数上不用throws，编译可以正常通过</p>
<h3>代码范例</h3>
<p>如下代码，即使没有<code>throws ArithmeticException</code>(ArithmeticException为runtime的子类)，编译照样通过</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Demo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token comment">//throws ArithmeticException</span>
    <span class="token punctuation">{</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"出现了除数为负数了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token string">"被零除啦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>原因</h3>
<p>在程序运行时，正常的exception必须在函数上throws 错误，让开发人员进行异常修复，但是runtime异常比较特殊，他编译时不检测函数是否又throws，这样做的目的就是有意让开发者不知道这一错误，让错误在运行时暴露，由开发人员修正代码来规范程序。</p>
<h1>java异常层次结构</h1>
<p>java异常层次结构如下图所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252159098.png" alt="在这里插入图片描述"></p>
<h1>finally关键字</h1>
<p>finally无论异常是否执行，在try块结束后必定会运行的，需要注意的是如果程序出现异常，finally中有return语句的话，catch块的return将没有任何作用，代码如下所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>finally常规用法(资源释放)</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//读取文本文件的内容</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre></div><h2>try-with-resources——优雅解决方案</h2>
<p>可以看到上述代码十分冗长，可读性十分差劲，于是java对这种做法做了相应改进，如下所示，对于继承Closeable、AutoCloseable的类都可以使用以下语法完成资源加载和释放</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre></div><h2>finally 中的代码一定会执行吗</h2>
<p>不一定，如下代码所示，当虚拟机执行退出的话，finally是不会被执行的</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finallyNoRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"try code run....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally run..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 输出结果
         * try code run.....
         */</span>
    <span class="token punctuation">}</span>
</code></pre></div><h1>异常使用注意事项</h1>
<h2>不要在finnally中使用return</h2>
<p>函数执行的try块返回值会被缓存的本地变量中，当finally进行return操作就会覆盖这个本地变量</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finallyReturnTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">finallyReturnFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 输出结果
         * finallyReturnVal
         * 原因:try块的return会被缓存在本地变量中，
         * 当finally有return时，会覆盖这个结果
         */</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">finallyReturnFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> ten <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">"tryRetunVal"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"报错了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"finallyReturnVal"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre></div><h2>异常不处理就抛出</h2>
<p>捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请 将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</p>
<h3>代码示例</h3>
<p>自定义一个异常</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyIllegalArgumentException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">MyIllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>测试代码</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> param <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyIllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"参数校验异常，请求参数[{}],错误信息[{}]"</span><span class="token punctuation">,</span> param<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token doc-comment comment">/**
             * [main] INFO com.guide.exception.ExceptionTest - 参数校验异常，请求参数[null],错误信息[字符串不可为空]
             */</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MyIllegalArgumentException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyIllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"字符串不可为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>try块代码使用粒度和性能探讨</h2>
<ol>
<li>try-catch阻止jvm试图进行的优化，所以当我们要使用try块时，使用的粒度尽可能要小一些。</li>
<li>现代标准遍历模式并不会导致冗余检查，所以我们无需为了避免越界检查而使用try块解决问题</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 异常捕获后不要用来做流程控制，条件控制。
     * try catch 阻止了jvm原本会对其做的优化工作
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stackPopByCatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Stack</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100_0000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出栈结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>


        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用try进行异常捕获，执行时间:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Stack</span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100_0000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stack2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用逻辑进行出栈操作，执行时间:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 输出结果
         * 出栈结束
         * 使用try进行异常捕获，执行时间:94
         * 使用逻辑进行出栈操作，执行时间:52
         */</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>日志打印规范</h2>
<ol>
<li>不要使用JSON工具，因为某些get方法可能会抛出异常</li>
<li>记录参数，错误信息，堆栈信息</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 打印日志格式规范
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logShowTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span> inputParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fluentPut</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">logShow</span><span class="token punctuation">(</span>inputParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"inputParam:{} ,errorMessage:{}"</span><span class="token punctuation">,</span> inputParam<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token doc-comment comment">/**
             * [main] ERROR com.guide.exception.ExceptionTest - inputParam:<span class="token punctuation">{</span>"key":"value"<span class="token punctuation">}</span> ,errorMessage:自定义算术异常
             * com.guide.exception.ArithmeticException: 自定义算术异常
             *     at com.guide.exception.ExceptionTest.logShow(ExceptionTest.java:166)
             */</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">logShow</span><span class="token punctuation">(</span><span class="token class-name">Map</span> inputParam<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArithmeticException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> zero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>zero<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">19</span> <span class="token operator">/</span> zero<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h1>异常是否耗时？为什么会耗时？</h1>
<p>如下代码所示，可以看到频繁抛出和捕获对象是非常耗时的，所以我们不建议使用异常来作为处理逻辑，我们完全可以和前端协商好错误码从而避免没必要的性能开销</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> testTimes<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ExceptionTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> testTimes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>testTimes <span class="token operator">=</span> testTimes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">newObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testTimes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"建立对象："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">newException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testTimes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"建立异常对象："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">catchException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testTimes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"建立、抛出并接住异常对象："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">catchObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testTimes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"建立,普通对象并catch："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExceptionTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionTest</span><span class="token punctuation">(</span><span class="token number">100_0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        test<span class="token punctuation">.</span><span class="token function">newObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        test<span class="token punctuation">.</span><span class="token function">newException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        test<span class="token punctuation">.</span><span class="token function">catchException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        test<span class="token punctuation">.</span><span class="token function">catchObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 输出结果
         * 建立对象：3
         * 建立异常对象：484
         * 建立、抛出并接住异常对象：539
         * 建立,普通对象并catch：3
         */</span>
    <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252159285.png" type="image/png"/>
    </item>
    <item>
      <title>简介</title>
      <link>https://maijunxuan.cn/Java/Java%E6%B3%A8%E8%A7%A3%E5%B0%8F%E7%BB%93.html</link>
      <guid>https://maijunxuan.cn/Java/Java%E6%B3%A8%E8%A7%A3%E5%B0%8F%E7%BB%93.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">简介</source>
      <description>简介 注解的定义 注解也叫元数据，jdk1.5引入的，和类、接口等属于同一个层级。可用在类、字段、接口、方法、形参上。 注解与注释的区别 注释:告知程序员这段程序的用意。 注解:告知计算机这段程序的用意。 注解的三大作用 生成带有说明的文档 如下所示代码，由于添加了作者、版本、since这些注解，所以在生成文档的时候就会体现这些内容。 代码示例 生成文...</description>
      <pubDate>Sun, 25 Sep 2022 13:54:43 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>注解的定义</h2>
<p>注解也叫元数据，jdk1.5引入的，和类、接口等属于同一个层级。可用在类、字段、接口、方法、形参上。</p>
<h2>注解与注释的区别</h2>
<p>注释:告知程序员这段程序的用意。 注解:告知计算机这段程序的用意。</p>
<h1>注解的三大作用</h1>
<h2>生成带有说明的文档</h2>
<p>如下所示代码，由于添加了作者、版本、since这些注解，所以在生成文档的时候就会体现这些内容。</p>
<h3>代码示例</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 注解javadoc演示
 *
 * <span class="token keyword">@author</span> test
 * <span class="token keyword">@version</span> 1.0
 * <span class="token keyword">@since</span> 1.5
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoDemo1</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 计算两数的和
     * <span class="token keyword">@param</span> <span class="token parameter">a</span> 整数
     * <span class="token keyword">@param</span> <span class="token parameter">b</span> 整数
     * <span class="token keyword">@return</span> 两数的和
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>生成文档示例</h3>
<p>使用<code>javadoc</code>命令进行文档生成</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252201609.png" alt="在这里插入图片描述"></p>
<p>可以看到生成的类文档的作者、版本等都是我们注解后面编写的值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252201978.png" alt="在这里插入图片描述"></p>
<h2>代码分析</h2>
<p>使用反射完成基于代码里标识的注解对代码进行分析，后文我们会对此展开详细介绍。</p>
<h2>编译检查</h2>
<p>通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</p>
<h1>java内置的三大注解</h1>
<h2>@Override</h2>
<p>源码如下所示，可以看到元注解有<code>target</code>和<code>retenion</code>，其中<code>retention</code>为<code>source</code>，即在编译时检查当前子类重写的方法在父类中是否存在，如果存在则编译通过，反之。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Override</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>@Deprecated</h2>
<p>这个注解常用于提醒开发被加上注解的玩意已经不推荐使用了</p>
<p>该注解用于提醒开发被加上注解的方法不推荐使用了。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PACKAGE</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Deprecated</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>@SuppressWarnings</h2>
<p>压制程序中某些警告。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SuppressWarnings</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h1>元注解(用于描述注解的注解)</h1>
<h2>@Target：描述注解能够作用的位置</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>        <span class="token operator">*</span> <span class="token class-name">ElementType</span>取值：
            <span class="token operator">*</span> <span class="token constant">TYPE</span>：可以作用于类上
            <span class="token operator">*</span> <span class="token constant">METHOD</span>：可以作用于方法上
            <span class="token operator">*</span> <span class="token constant">FIELD</span>：可以作用于成员变量上
</code></pre></div><p>如下注解 只可作用于类和字段上，在函数上则会报错</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnno3</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

</code></pre></div><p>如下所示，我们将Target在字段上的注解用在方法上就报错了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252203911.png" alt="image-20220925220340811"></p>
<h2>@Retention</h2>
<p>描述注解被保留的阶段 @Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到。</p>
<h2>@Documented</h2>
<h3>简介</h3>
<p>描述注解是否被抽取到api文档中</p>
<h3>示例</h3>
<h4>自定义注解Myanno3</h4>
<p>如下代码，Myanno3加入注解@Documented后，worker类使用该Myanno3注解，当使用worker生成文档后该注解会被显示在使用注解的类、函数、字段上</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**

 元注解：用于描述注解的注解
     * @Target：描述注解能够作用的位置
     * @Retention：描述注解被保留的阶段
     * @Documented：描述注解是否被抽取到api文档中
     * @Inherited：描述注解是否被子类继承


 *
 */</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnno3</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

</code></pre></div><h5>Worker上使用MyAnno注解</h5>
<p>如下所示，可以看到我们在类、字段、方法上都用到了注解。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@MyAnno</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>per <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token constant">P1</span><span class="token punctuation">,</span>anno2 <span class="token operator">=</span> <span class="token annotation punctuation">@MyAnno2</span><span class="token punctuation">,</span>strs<span class="token operator">=</span><span class="token string">"bbb"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@MyAnno3</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@MyAnno3</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"aaa"</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@MyAnno3</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><p>使用javadoc命令生成文档后，可以看到该类的myAnno3的注解都存在</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252201782.png" alt="在这里插入图片描述"></p>
<h2>@Inherited</h2>
<p>描述注解是否被子类继承</p>
<h1>基于注解实现简单的测试框架</h1>
<h2>需求描述</h2>
<p>我们希望自定义一个注解check，每个增加check的我们都会通过反射获取，如果计算保存则假如统计文本中。</p>
<h2>代码示例</h2>
<h3>首先定义check注解</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Check</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

</code></pre></div><h2>需要测试的类代码</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>

    <span class="token comment">//加法</span>
    <span class="token annotation punctuation">@Check</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 + 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">//减法</span>
    <span class="token annotation punctuation">@Check</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 - 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//乘法</span>
    <span class="token annotation punctuation">@Check</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 * 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//除法</span>
    <span class="token annotation punctuation">@Check</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 / 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"永无bug..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>


</code></pre></div><h2>测试类</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckUtil</span> <span class="token punctuation">{</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Calculator</span><span class="token punctuation">&gt;</span></span> clzz <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clzz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> methodName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>


        <span class="token keyword">int</span> errCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"err.log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Check</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>calculator<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"出错了，第%d个错误，方法名:%s,错误原因:%s"</span><span class="token punctuation">,</span> <span class="token operator">++</span>errCount<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    writer<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><p>输出结果</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>出错了，第1个错误，方法名:add,错误原因:null
出错了，第2个错误，方法名:div,错误原因:/ by zero

</code></pre></div><h1>注解的本质</h1>
<p>聊到注解的本质，其实最简单的方法就是反编译看看实质，代码如下所示：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用以下命令完成编译生成字节码还反编译为java文件</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> javac Foo.java

 javap -c Foo.class
</code></pre></div><p>我们就可以得出如下一段输出，可以看到看注解的本质就是一个接口。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Compiled</span> from <span class="token string">"Foo.java"</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name"><span class="token namespace">edu<span class="token punctuation">.</span>zhku<span class="token punctuation">.</span>mjx<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>javaBase<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>Foo</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>Annotation</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h1>注解与反射的关系与简单实践</h1>
<p>其实我们在日常使用Spring框架时经常会用到注解，例如Service("userSerivice"),那么请问Spring是如何通过注解拿到这个bean的值的呢？ 我们不妨自定义一个注解来实验这个问题，首先我们自定义一个service</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">scope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后我们编写如下一段代码，并在idea的vim option键入这一一段jvm命令<code>-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userService"</span><span class="token punctuation">,</span> scope <span class="token operator">=</span> <span class="token string">"singleton"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token class-name">Service</span> service <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可以看到会输出userService，在查看项目文件中会出现下图这样一个文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252201542.png" alt="在这里插入图片描述"></p>
<p>查看$Proxy1.class源码，我们可以看到这样一段代码，可以看到这两个变量<code>Class.forName("edu.zhku.mjx.interview.javaBase.annotation.Service").getMethod("scope")</code>、<code>Class.forName("edu.zhku.mjx.interview.javaBase.annotation.Service").getMethod("value")</code>不就是我们注解中定义的值吗？然后我们再找找他的调用处</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>

    m4 <span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"edu.zhku.mjx.interview.javaBase.annotation.Service"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"scope"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"edu.zhku.mjx.interview.javaBase.annotation.Service"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>var3<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>以scope为例，我们看到了这样一段代码，不难看出我们之前调用的Service.scope()就是使用这个方法。这里有个invoke，我们点进去看看调用</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public final String scope() throws  {
        try {
            return (String)super.h.invoke(this, m4, (Object[])null);
        } catch (RuntimeException | Error var2) {
            throw var2;
        } catch (Throwable var3) {
            throw new UndeclaredThrowableException(var3);
        }
    }
</code></pre></div><p>这时候我们看到一个接口，没有看到具体实现，没关系，源码的设计者命名永远是合理的，所以，我们完完全全可以通过查找与注解命名相关的继承类</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252201260.png" alt="在这里插入图片描述"></p>
<p>这时候笔者就发现了这个</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252202792.png" alt="image-20220925220207418"></p>
<p>具体实现源码如下，关键笔者都在代码中注释了</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public Object invoke(Object var1, Method var2, Object[] var3) {
//var2就是上一步传入的scope
        String var4 = var2.getName();
        Class[] var5 = var2.getParameterTypes();
        if (var4.equals("equals") &amp;&amp; var5.length == 1 &amp;&amp; var5[0] == Object.class) {
            return this.equalsImpl(var3[0]);
        } else if (var5.length != 0) {
            throw new AssertionError("Too many parameters for an annotation method");
        } else {
            byte var7 = -1;
            switch(var4.hashCode()) {
            case -1776922004:
                if (var4.equals("toString")) {
                    var7 = 0;
                }
                break;
            case 147696667:
                if (var4.equals("hashCode")) {
                    var7 = 1;
                }
                break;
            case 1444986633:
                if (var4.equals("annotationType")) {
                    var7 = 2;
                }
            }
//根据var2标记var7，然后从返回响应的var值，这里scope就走最后一个分支了返回了scope的字符串
            switch(var7) {
            case 0:
                return this.toStringImpl();
            case 1:
                return this.hashCodeImpl();
            case 2:
                return this.type;
            default:
                Object var6 = this.memberValues.get(var4);
                if (var6 == null) {
                    throw new IncompleteAnnotationException(this.type, var4);
                } else if (var6 instanceof ExceptionProxy) {
                    throw ((ExceptionProxy)var6).generateException();
                } else {
                    if (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != 0) {
                        var6 = this.cloneArray(var6);
                    }

                    return var6;
                }
            }
        }
    }
</code></pre></div><h1>总结</h1>
<ol>
<li>注解给谁用?</li>
</ol>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. 编译器
2. 给解析程序用
</code></pre></div><ol>
<li>注解不是程序的一部分，可以理解为注解让计算机理解代码说明的一个标签</li>
</ol>
<p>由上述的例子我们很好的理解了注解在框架中用法，他的诞生就是为了解决长期使用xml配置导致维护愈发复杂的场景，即是一种通过高耦合解决低耦合导致维护困难的最佳实践。</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252201609.png" type="image/png"/>
    </item>
    <item>
      <title>前言</title>
      <link>https://maijunxuan.cn/Java/Stream%E6%B5%81%E5%AE%9E%E8%B7%B5.html</link>
      <guid>https://maijunxuan.cn/Java/Stream%E6%B5%81%E5%AE%9E%E8%B7%B5.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">前言</source>
      <description>前言 java8提供的流式编程使得我们对于集合的处理不再是以往的指令式操作(即各种显示循环拿元素操作)，所以笔者就以这篇文章介绍以下流式编程中的各种中间操作的终端操作。 筛选和切片 常规过滤筛选 常规的过滤筛选就是通过filter方法，为了介绍这个操作，我们不妨假设出这样一个需求，我们现在有一个菜肴类，他的类如下文所示 基于这个类，我们再创建一个菜肴的...</description>
      <pubDate>Sun, 25 Sep 2022 13:54:43 GMT</pubDate>
      <content:encoded><![CDATA[
<p>java8提供的流式编程使得我们对于集合的处理不再是以往的指令式操作(即各种显示循环拿元素操作)，所以笔者就以这篇文章介绍以下流式编程中的各种中间操作的终端操作。</p>
<h1>筛选和切片</h1>
<h2>常规过滤筛选</h2>
<p>常规的过滤筛选就是通过filter方法，为了介绍这个操作，我们不妨假设出这样一个需求，我们现在有一个菜肴类，他的类如下文所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dish</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> vegetarian<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> calories<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Type</span> type<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> vegetarian<span class="token punctuation">,</span> <span class="token keyword">int</span> calories<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>vegetarian <span class="token operator">=</span> vegetarian<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>calories <span class="token operator">=</span> calories<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isVegetarian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> vegetarian<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> calories<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Type</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span> <span class="token constant">MEAT</span><span class="token punctuation">,</span> <span class="token constant">FISH</span><span class="token punctuation">,</span> <span class="token constant">OTHER</span> <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre></div><p>基于这个类，我们再创建一个菜肴的集合，集合声明如下所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> menu <span class="token operator">=</span>
            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
                    <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token string">"pork"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">MEAT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                           <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token string">"beef"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">MEAT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                           <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token string">"chicken"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">MEAT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                           <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token string">"french fries"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">530</span><span class="token punctuation">,</span> <span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">OTHER</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                           <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token string">"rice"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">OTHER</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                           <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token string">"season fruit"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">OTHER</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                           <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token string">"pizza"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">550</span><span class="token punctuation">,</span> <span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">OTHER</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                           <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token string">"prawns"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">FISH</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                           <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token string">"salmon"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">450</span><span class="token punctuation">,</span> <span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">FISH</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>我们希望从这个集合中筛选中是蔬菜类的菜肴，所以我们就可以得出如下所示的编码</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token comment">// Filtering with predicate</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> vegetarianMenu <span class="token operator">=</span>
            menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token comment">//使用filter 结合函数式编程筛选出vegetarian 为true的菜肴</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">isVegetarian</span><span class="token punctuation">)</span>
                    <span class="token comment">//将这些流组成一个list数组</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        vegetarianMenu<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token doc-comment comment">/**
         * french fries
         * rice
         * season fruit
         * pizza
         */</span>
</code></pre></div><p>可以看到这种写法写起来就像sql语句一样，我们无需各种for循环的声明指令，而是像是一种声明式的操作，而流的工作原理也如下图所示，将集合中的一个个元素循环合并成一个流水线，最终构成一个新的list</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252202669.png" alt="在这里插入图片描述"></p>
<h2>找出不重复元素</h2>
<p>对于这个操作的介绍，我们也不妨提出这样一个示例，我们现在有一个无序且包含重复元素的整型数组，代码如下所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>我们希望能够找出能够被2整除，且最终得到的结果没有重复的数字，对此我们的思路也很简单，首先过滤出能够被2整除的元素，然后再去重，想到这里，你的脑子里如果还停留在java8之前的方式的话，你一定想到的是for循环找到被2整除的元素，然后塞到一个set集合中，最终再转为list对吧，但是这样的代码又臭又长，我们不妨看看通过流式编程可以如何解决吧 代码如下所示，可以看到代码语义非常明显，且一个distinct就完成了去重操作，这样写起来是不是非常的简洁易读且优雅呢？</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token comment">// Filtering unique elements</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//过滤出能够被2整除的数字</span>
               <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token comment">//去重</span>
               <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//循环遍历</span>
               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token doc-comment comment">/**输出结果
         * 2
         * 4
         */</span>
</code></pre></div><p>再来看看流的工作图，他的操作也同样如流水线一般</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252202553.png" alt="在这里插入图片描述"></p>
<h2>限制筛选的元素数</h2>
<p>关于限制元素数，举个例子，就以上文的菜肴集合为例，我们希望找到热量高于300卡的前三道菜，又该怎么操作呢？ 如果在java8之前，你一定的for循环加上一个count计数器，当找到三道菜了就停止循环。 java8同样为你提供了语义化的操作，来看看代码，我们在filter找到高于300卡的菜肴后，直接使用limit就可以完成限制筛选了</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token comment">// Truncating a stream</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> dishesLimit3 <span class="token operator">=</span>
            menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>d <span class="token operator">-&gt;</span> d<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">300</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * pork
         * beef
         * chicken
         */</span>
        dishesLimit3<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>跳过某些元素进行筛选</h2>
<p>看到了限制的操作后，我们希望跳过前两个高于300卡的菜，再筛选出3道高于300卡的菜肴又该怎么办呢？ 同样的，可以看出笔者在完成筛选操作后，加了一个skip操作即可完成这个需求</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Skipping elements</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> dishesSkip2 <span class="token operator">=</span>
                menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>d <span class="token operator">-&gt;</span> d<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">300</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 输出结果
         * chicken
         * french fries
         * rice
         */</span>
        dishesSkip2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h1>映射</h1>
<h2>只映射需要的元素</h2>
<p>映射操作其实也很好理解，就像使用sql语句一样通过select出你所需要的字段，例如我们希望从菜肴中拿到所有菜肴的名字，如果在java8之前，你一定会声明一个<code>List&lt;String&gt;</code>,然后遍历菜肴集合，获取到每个菜肴的名字，添加到<code>List&lt;String&gt;</code>这个集合中。</p>
<p>再来看看java8的代码，可以看到笔者就用了一个map关键字，即可映射出自己所需要的成员属性，通过map(Dish::getName)告诉流我要菜肴集合中每道菜的菜名，并将这个流传给终端操作collect(toList())转为一个字符串数组</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token comment">// map</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dishNames <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                     <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>
                                     <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 输出结果
         * chicken
         * french fries
         * rice
         */</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dishNames<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>当然你可能还想知道每道菜菜名的长度，同样的再加一个map操作即可，代码如下所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> menuList <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>menuList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>流的扁平化使用</h2>
<p>关于映射我们可能还可以用在这样的奇怪场合，例如有我们有 <code>List&lt;String&gt;</code> 的数组，我们希望找出数组中所有的字母(字母不能有重复)，存到<code>List&lt;String&gt;</code> 中并输出</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> words <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这时候你第一时间可能想到这样，你的用意很明显，将数组中每个单词切成一个个单词，然后distinct去重，最后转成list输出</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//                这里映射的是stream&lt;String[]&gt; 后续的中间操作没有什么作用</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>w <span class="token operator">-&gt;</span> w<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>实际上是错误的，这样的做法，最终得到的是一个 <code>List&lt;String[]&gt;</code>，代码如下，其工作原理也很好解释，<code>map(w -&gt; w.split(""))</code>会将hello World分别切割成<code>String[]</code>,然后两个<code>String[]</code>，很显然对一个数组distinct自然是没有任何作用的，具体可以参考下图</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> list <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//                这里映射的是stream&lt;String[]&gt; 后续的中间操作没有什么作用</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>w <span class="token operator">-&gt;</span> w<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252202260.png" alt="在这里插入图片描述"></p>
<p>打印以下输出结果</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * H
                 * e
                 * l
                 * l
                 * o
                 * W
                 * o
                 * r
                 * l
                 * d
                 */</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre></div><p>所以我们希望将一个个数组转为String的stream流，于是我们就有了第2个版本的写法，可以看到我们通过<code>map(Arrays::stream)</code>，将一个个字符串数组转为<code>Stream&lt;String&gt;</code>，但是去重再转为数组后得到类型却是 <code>List&lt;Stream&lt;String&gt;&gt;</code>，这意味者我们只是将两个单词转为两个独立的<code>stream&lt;String&gt;</code>所以我们需要更进一步的操作</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stream</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>w <span class="token operator">-&gt;</span> w<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">//将stream&lt;String[]&gt;转为stream&lt;String&gt; 但还是没有解决问题 因为将数组变成string流</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>来看看正确的写法,通过<code>flatMap</code>调用<code>Arrays::stream</code>，即可完成将两个独立的<code>Stream&lt;String&gt;</code>合并成一个扁平的<code>Stream&lt;String&gt;</code>最终得到正确结果，他的工作流程图也如下图所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>w <span class="token operator">-&gt;</span> w<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">//将两个stream的String合并成一个流</span>
                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//输出 [H, e, l, o, W, r, d]</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252202793.png" alt="在这里插入图片描述">其实我们的写法可以更精简一些，如下所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h1>查找和匹配</h1>
<h2>检查是否至少匹配一个元素</h2>
<p>查找和匹配常用于判断，假如我们想判断至少一个匹配的操作，我们完全可以使用<code>anyMatch</code> 例如，我想知道菜肴集合中是否存在素菜，我们完全可以这样写，可以看出anyMatch，是一个终端操作，他将返回一个Boolean值，就以下面代码为例，只要集合中看到一个素食的菜肴，那么这样流操作就会返回true</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isVegetarianFriendlyMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">isVegetarian</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>检查流元素是否都匹配</h2>
<p>同理如果需要全部匹配，我们就用<code>allMatch</code>，例如我们需要判断菜肴中的菜肴是否都是低于1000卡的，我们完全可以这样写</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isHealthyMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>d <span class="token operator">-&gt;</span> d<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>反过来来说，我们可以要找低于1000卡的，同样我们也可以使用下面这样的写法，判断是否不包含高于1000卡的菜肴</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isHealthyMenu2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>d <span class="token operator">-&gt;</span> d<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>查找元素</h2>
<p>假如我们希望找出菜肴中是否包含素食，且告知我们查到的素食是什么菜，我们就可以这样写，可以看到笔者通过filter找到素食，在使用findAny将找到的菜直接返回 但是细心的读者看到了返回值竟然不是<code>Dish</code>而是<code>Optional&lt;Dish&gt;</code>，所以我们需要补充以下Optional的相关概念：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1.</span> <span class="token class-name">Optional</span>有个<span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，就以本文为例，假如集合中包含素食，我们调用这个方法就会返回<span class="token boolean">true</span>，说明找到了素食，反之返回<span class="token boolean">false</span>
<span class="token number">2.</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，以本示例来说，假如找到了素食，get就会返回菜肴对象，若没找到则报出<span class="token class-name">NoSuchElement</span>异常
<span class="token number">3.</span> <span class="token function">orElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>相比上一个方法更加友好，假如我们找到值就返回值，反之就返回orElse传入的参数值
 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> <span class="token function">findVegetarianDish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">isVegetarian</span><span class="token punctuation">)</span>
                <span class="token comment">//短路操作 避免遍历整个流</span>
                <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>调用示例</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> dish <span class="token operator">=</span> <span class="token function">findVegetarianDish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dish<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>d <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>查找第一个元素</h2>
<p>相比于查找元素，查找第一个元素语义化更加明显，例如我们想找到第一道素食，我们就可以这样写，实际上关于findAny和findFirst的使用场景区别不大，但是在并行的情况下，你想找到第一道素食的话，建议你使用findFirst，若在并行情况下你不关心当前找到的素食是不是集合中第一道素食的话，使用findAny即可，因为它使用并行流来说限制较少一些</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> <span class="token function">findVegetarianDish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">isVegetarian</span><span class="token punctuation">)</span>
                <span class="token comment">//短路操作 避免遍历整个流</span>
                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h1>规约</h1>
<h2>元素求和</h2>
<p>规约说白就是统计等相关归并计算的操作，还记得java8之前的数字相加嘛？例如我们要相加一个整型数组的和，我们可能会for循环配合一个sum变量+=计算。 但是在java8之后，我们的写法变成了这样，可以看到笔者使用了一个reduce，他对某种重复某事做个抽象，第一个参数传的就是结果的初始值，所以笔者传了0，而第2个参数传的是<code>BinaryOperator&lt;T&gt;</code>变量，<code>BinaryOperator&lt;T&gt;</code>是一个函数表达式，它要求传入两个值，然后返回一个和传入两个值一个类型的新值，就以笔者传入的lambda为例，她做的就是将传入的a、b相加返回。将这个表达式作为第2个参数传入reduce中就以为着将流中每个数值不断累加到初始值为0的变量中。具体工作过程如下图所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252202078.png" alt="在这里插入图片描述">同样的java8为我们提供了一个强大的Integer API，即<code>sum</code>，他做的事情，就是让数字两两相加所以我们计算数字和的时候，代码可以简化成下图所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">int</span> sum2 <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>当然假如你的统计操作无需初始值的话，也可以像下文这种写法，这正是java8的高明之处，返回一个Optional操作，让你有余地进行判空操作</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//无需初始值</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sum3 <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>求最大值和最小值</h2>
<p>最大值和最小值做法和上文差不多，就不多赘述了</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> max <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> min <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        min<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>实践题</h2>
<p>就以博客最早提到的菜肴类，我们希望用流式编程统计出菜肴的数量，可以看到笔者的做法很巧妙，通过映射将每道菜计算为1，传到reduce流中统计计算</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> menuCount <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>d <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>menuCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>我们甚至可以简写成这样，因为java8为我们提供了这样的终端操作</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">long</span> count <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h1>实践题</h1>
<h2>需求描述</h2>
<p>我们现在有几个交易员，交易员类如下所示，该类描述了他们的姓名和居住城市</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Trader</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Trader</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token class-name">String</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>city<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCity</span><span class="token punctuation">(</span><span class="token class-name">String</span> newCity<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> newCity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Trader:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" in "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>city<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后还有一个交易订单类，它描述了订单的交易年份，金额，和交易这笔订单的人员是谁</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Transaction</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Trader</span> trader<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token class-name">Trader</span> trader<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>trader <span class="token operator">=</span> trader<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Trader</span> <span class="token function">getTrader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>trader<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"{"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>trader <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span>
               <span class="token string">"year: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token operator">+</span><span class="token string">", "</span> <span class="token operator">+</span>
               <span class="token string">"value:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+</span><span class="token string">"}"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>用这两个类，构成了一个订单数组，如下所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">Trader</span> raoul <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trader</span><span class="token punctuation">(</span><span class="token string">"Raoul"</span><span class="token punctuation">,</span> <span class="token string">"Cambridge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Trader</span> mario <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trader</span><span class="token punctuation">(</span><span class="token string">"Mario"</span><span class="token punctuation">,</span> <span class="token string">"Milan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Trader</span> alan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trader</span><span class="token punctuation">(</span><span class="token string">"Alan"</span><span class="token punctuation">,</span> <span class="token string">"Cambridge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Trader</span> brian <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trader</span><span class="token punctuation">(</span><span class="token string">"Brian"</span><span class="token punctuation">,</span> <span class="token string">"Cambridge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">&gt;</span></span> transactions <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>brian<span class="token punctuation">,</span> <span class="token number">2011</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>raoul<span class="token punctuation">,</span> <span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>raoul<span class="token punctuation">,</span> <span class="token number">2011</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>mario<span class="token punctuation">,</span> <span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">710</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>mario<span class="token punctuation">,</span> <span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>alan<span class="token punctuation">,</span> <span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">950</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>几道问题</h2>
<p>所以我们现在提出这样几个问题</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 找出<span class="token number">2011</span>年发生的所有交易，并按交易额排序（从低到高）。
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 交易员都在哪些不同的城市工作过？
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 查找所有来自于剑桥的交易员，并按姓名排序。
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 返回所有交易员的姓名字符串，按字母顺序排序。
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 有没有交易员是在米兰工作的？
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> 打印生活在剑桥的交易员的所有交易额。
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> 所有交易中，最高的交易额是多少？
<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> 找到交易额最小的交易。
</code></pre></div><p>答案如下所示，读者可以自行核对</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token comment">// Query 1: Find all transactions from year 2011 and sort them by value (small to high).</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">&gt;</span></span> tr2011 <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>transaction <span class="token operator">-&gt;</span> transaction<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2011</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tr2011<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//找出2011年发生的所有交易，并按交易额排序（从低到高）</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">&gt;</span></span> transactions_2011 <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> t<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2011</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transactions_2011<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// Query 2: What are all the unique cities where the traders work?</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cities <span class="token operator">=</span>
                transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>transaction <span class="token operator">-&gt;</span> transaction<span class="token punctuation">.</span><span class="token function">getTrader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cities<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//交易员都在哪些不同的城市工作过</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> citys <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getTrader</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Trader</span><span class="token operator">::</span><span class="token function">getCity</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>citys<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Query 3: Find all traders from Cambridge and sort them by name.</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Trader</span><span class="token punctuation">&gt;</span></span> traders <span class="token operator">=</span>
                transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getTrader</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>trader <span class="token operator">-&gt;</span> trader<span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Cambridge"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Trader</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>traders<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//查找所有来自于剑桥的交易员，并按姓名排序</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Trader</span><span class="token punctuation">&gt;</span></span> cambridgeTraders <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getTrader</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> <span class="token string">"Cambridge"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Trader</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cambridgeTraders<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// Query 4: Return a string of all traders’ names sorted alphabetically.</span>

        <span class="token class-name">String</span> traderStr <span class="token operator">=</span>
                transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>transaction <span class="token operator">-&gt;</span> transaction<span class="token punctuation">.</span><span class="token function">getTrader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>traderStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//返回所有交易员的姓名字符串，按字母顺序排序。×</span>
        <span class="token class-name">String</span> names <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getTrader</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Trader</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Query 5: Are there any trader based in Milan?</span>

        <span class="token keyword">boolean</span> milanBased <span class="token operator">=</span>
                transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>transaction <span class="token operator">-&gt;</span> transaction<span class="token punctuation">.</span><span class="token function">getTrader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Milan"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>milanBased<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//(5) 有没有交易员是在米兰工作的？ </span>
        <span class="token keyword">boolean</span> hasMilan <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> <span class="token string">"Milan"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getTrader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// Query 6: Update all transactions so that the traders from Milan are set to Cambridge.</span>
        transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getTrader</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>trader <span class="token operator">-&gt;</span> trader<span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Milan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>trader <span class="token operator">-&gt;</span> trader<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">"Cambridge"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transactions<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//(6) 打印生活在剑桥的交易员的所有交易额。</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sum <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> <span class="token string">"Cambridge"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getTrader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// Query 7: What's the highest value in all the transactions?</span>
        <span class="token keyword">int</span> highestValue <span class="token operator">=</span>
                transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>highestValue<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//(7) 所有交易中，最高的交易额是多少？</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> max <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//(8) 找到交易额最小的交易</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">&gt;</span></span> min <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//参考答案</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">&gt;</span></span> min2 <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> t1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> t2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> t1 <span class="token operator">:</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">&gt;</span></span> min3 <span class="token operator">=</span> transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min <span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span> min2 <span class="token operator">+</span><span class="token string">" "</span> <span class="token operator">+</span>min3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209252202669.png" type="image/png"/>
    </item>
    <item>
      <title>RabbitMQ简单使用</title>
      <link>https://maijunxuan.cn/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/RabbitMQ%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://maijunxuan.cn/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/RabbitMQ%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">RabbitMQ简单使用</source>
      <description>RabbitMQ简单使用 一、基础 1.1是什么 RabbitMQ是一个开源的遵循AMQP协议实现的基于Erlang语言编写，支持多种客户端（语言）。用于在分布式系统中存储消息，转发消息，具有高可用，高可扩性，易用性等特征。 1.2命令 常用命令 启动服务 systemctl start rabbitmq-server 重启服务 systemctl r...</description>
      <pubDate>Tue, 20 Sep 2022 21:35:49 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>一、基础</h2>
<h3>1.1是什么</h3>
<p>RabbitMQ是一个开源的遵循AMQP协议实现的基于Erlang语言编写，支持多种客户端（语言）。用于在分布式系统中存储消息，转发消息，具有高可用，高可扩性，易用性等特征。</p>
<h3>1.2命令</h3>
<h4>常用命令</h4>
<p>启动服务</p>
<blockquote>
<p>systemctl start rabbitmq-server</p>
</blockquote>
<p>重启服务</p>
<blockquote>
<p>systemctl restart rabbitmq-server</p>
</blockquote>
<p>查看服务状态</p>
<blockquote>
<p>systemctl status rabbitmq-server</p>
</blockquote>
<p>停止服务</p>
<blockquote>
<p>systemctl stop rabbitmq-server</p>
</blockquote>
<p>开机启动服务</p>
<blockquote>
<p>systemctl enable rabbitmq-server</p>
</blockquote>
<p>安装web控制台插件</p>
<blockquote>
<p>rabbitmq-plugins enable rabbitmq_management</p>
</blockquote>
<h4>用户相关</h4>
<blockquote>
<p>rabbitmqctl add_user 账号 密码
rabbitmqctl set_user_tags 账号 administrator
rabbitmqctl change_password Username Newpassword 修改密码
rabbitmqctl delete_user Username 删除用户
rabbitmqctl list_users 查看用户清单
rabbitmqctl set_permissions -p / 用户名 ".<em>" ".</em>" ".<em>" 为用户设置administrator角色
rabbitmqctl set_permissions -p / root ".</em>" ".<em>" ".</em>"</p>
</blockquote>
<h4>linux排查命令</h4>
<blockquote>
<p>more xxx.log  查看日记信息
netstat -naop | grep 5672 查看端口是否被占用
ps -ef | grep 5672  查看进程
systemctl stop 服务</p>
</blockquote>
<h4>docker相关命令</h4>
<p>默认用户名密码guest</p>
<blockquote>
<p>docker run -di --name=myrabbit -p 15672:15672 rabbitmq:management</p>
</blockquote>
<p>方式二 启动容器时命名为myrabbit，同时映射rabbitmq和宿主机的端口，并设置用户名和密码为admin</p>
<blockquote>
<p>docker run -di --name myrabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management</p>
</blockquote>
<h3>1.3角色分类</h3>
<h4>none</h4>
<ul>
<li>不能访问management plugin</li>
</ul>
<h4>management：查看自己相关节点信息</h4>
<ul>
<li>列出自己可以通过AMQP登入的虚拟机</li>
<li>查看自己的虚拟机节点 virtual hosts的queues,exchanges和bindings信息</li>
<li>查看和关闭自己的channels和connections</li>
<li>查看有关自己的虚拟机节点virtual hosts的统计信息。包括其他用户在这个节点virtual hosts中的活动信息。</li>
</ul>
<h4>Policymaker</h4>
<ul>
<li>包含management所有权限</li>
<li>查看和创建和删除自己的virtual hosts所属的policies和parameters信息。</li>
</ul>
<h4>Monitoring</h4>
<ul>
<li>包含management所有权限</li>
<li>罗列出所有的virtual hosts，包括不能登录的virtual hosts。</li>
<li>查看其他用户的connections和channels信息</li>
<li>查看节点级别的数据如clustering和memory使用情况</li>
<li>查看所有的virtual hosts的全局统计信息。</li>
</ul>
<h4>Administrator</h4>
<ul>
<li>最高权限</li>
<li>可以创建和删除virtual hosts</li>
<li>可以查看，创建和删除users</li>
<li>查看创建permisssions</li>
<li>关闭所有用户的connections</li>
</ul>
<h2>二、核心组成部分</h2>
<h3>2.1核心概念</h3>
<p><strong>Server</strong>：又称Broker ,接受客户端的连接，实现AMQP实体服务。 安装rabbitmq-server
<strong>Connection</strong>：连接，应用程序与Broker的网络连接 TCP/IP/ 三次握手和四次挥手
<strong>Channel</strong>：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道，客户端可以建立对各Channel，每个Channel代表一个会话任务。
<strong>Message</strong> :消息：服务与应用程序之间传送的数据，由Properties和body组成，Properties可是对消息进行修饰，比如消息的优先级，延迟等高级特性，Body则就是消息体的内容。
<strong>Virtual Host</strong> 虚拟地址，用于进行逻辑隔离，最上层的消息路由，一个虚拟主机理由可以有若干个Exhange和Queueu，同一个虚拟主机里面不能有相同名字的Exchange
<strong>Exchange</strong>：交换机，接受消息，根据路由键发送消息到绑定的队列。(==不具备消息存储的能力==)
<strong>Bindings</strong>：Exchange和Queue之间的虚拟连接，binding中可以保护多个routing key.
<strong>Routing key</strong>：是一个路由规则，虚拟机可以用它来确定如何路由一个特定消息。
<strong>Queue</strong>：队列：也成为Message Queue,消息队列，保存消息并将它们转发给消费者。</p>
<h3>2.2运行流程</h3>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209210532087.webp" alt="img"></p>
<h2>三、支持消息的模式</h2>
<h3>1. 简单模式(Hello World)</h3>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209210532104.png" alt="img"></p>
<p>做最简单的事情，一个生产者对应一个消费者，RabbitMQ相当于一个消息代理，负责将A的消息转发给B。</p>
<p>单生产者，单消费者，单队列。</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209210532087.webp" type="image/webp"/>
    </item>
    <item>
      <title>CAS和原子类</title>
      <link>https://maijunxuan.cn/JUC/CAS%E5%92%8C%E5%8E%9F%E5%AD%90%E7%B1%BB.html</link>
      <guid>https://maijunxuan.cn/JUC/CAS%E5%92%8C%E5%8E%9F%E5%AD%90%E7%B1%BB.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">CAS和原子类</source>
      <description>CAS和原子类 什么是CAS CAS全称Compare-And-Swap，说白就是就是比较当前的值与旧值是否相等若相等则进行修改操作，该类常用于多线程共享变量的修改操作。而其底层实现也是基于硬件平台的汇编指令，JVM只是封装其调用仅此而已。 CAS基础使用示例 如下所示，可以看出使用封装CAS操作的AtomicInteger操作多线程共享变量无需我们手...</description>
      <pubDate>Mon, 19 Sep 2022 21:37:24 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>什么是CAS</h2>
<p>CAS全称Compare-And-Swap，说白就是就是比较当前的值与旧值是否相等若相等则进行修改操作，该类常用于多线程共享变量的修改操作。而其底层实现也是基于硬件平台的汇编指令，JVM只是封装其调用仅此而已。 CAS基础使用示例</p>
<p>如下所示，可以看出使用封装CAS操作的AtomicInteger操作多线程共享变量无需我们手动加锁，因为避免过多人为操作这就大大减少了多线程操作下的失误。</p>
<p>使用原子类操作共享数据</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CasTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 使用 AtomicInteger 后，不需要加锁，也可以实现线程安全</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用sync锁操作数据</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>CAS与传统synchronized区别</h2>
<p>除了上述区别以外CAS工作原理是基于乐观锁且操作是原子性的，与synchronized的悲观锁相比，效率也会相对高一些。</p>
<p>但即便如此CAS仍然存在两个问题：</p>
<ol>
<li>可能存在长时间CAS：如下代码所示，这就是AtomicInteger底层的UNSAFE类如何进行CAS的具体代码 ，可以看出这个CAS操作需要拿到volatile变量后在进行循环CAS才有可能成功这就很可能存在自旋循环，从而给cpu带来很大的执行开销。</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndSetInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> var5<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> var5<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><ol>
<li>
<p>CAS只能对一个变量进行原子操作：为了解决这个问题，JDK 1.5之后通过AtomicReference使得变量可以封装成一个对象进行操作</p>
</li>
<li>
<p>ABA问题：总所周知CAS就是比对当前值与旧值是否相等，在进行修改操作，假设我现在有一个变量值为A，我改为B，再还原为A，这样操作变量值是没变的？那么CAS也会成功不就不合理吗？这就好比一个银行储户想查询概念转账记录，如果转账一次记为1，如果按照ABA问题的逻辑，那么这个银行账户转账记录次数有可能会缺少。为了解决这个问题JDK 1.5提供了AtomicStampedReference，通过比对版本号在进行CAS操作，那么上述操作就会变为1A-&gt;2B-&gt;3A,由于版本追加，那么我们就能捕捉到当前变量的变化了。</p>
</li>
</ol>
<h2>CAS实现——基于java封装汇编的UNSAFE</h2>
<p>代码也很简单，就是拿到具有现场可见性的volatile变量在进行原子操作的CAS</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> paramObject<span class="token punctuation">,</span> <span class="token keyword">long</span> paramLong<span class="token punctuation">,</span> <span class="token keyword">int</span> paramInt<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">do</span>
      i <span class="token operator">=</span> <span class="token function">getIntVolatile</span><span class="token punctuation">(</span>paramObject<span class="token punctuation">,</span> paramLong<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>paramObject<span class="token punctuation">,</span> paramLong<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> paramInt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">getAndAddLong</span><span class="token punctuation">(</span><span class="token class-name">Object</span> paramObject<span class="token punctuation">,</span> <span class="token keyword">long</span> paramLong1<span class="token punctuation">,</span> <span class="token keyword">long</span> paramLong2<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">long</span> l<span class="token punctuation">;</span>
    <span class="token keyword">do</span>
      l <span class="token operator">=</span> <span class="token function">getLongVolatile</span><span class="token punctuation">(</span>paramObject<span class="token punctuation">,</span> paramLong1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span>paramObject<span class="token punctuation">,</span> paramLong1<span class="token punctuation">,</span> l<span class="token punctuation">,</span> l <span class="token operator">+</span> paramLong2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> l<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndSetInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> paramObject<span class="token punctuation">,</span> <span class="token keyword">long</span> paramLong<span class="token punctuation">,</span> <span class="token keyword">int</span> paramInt<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">do</span>
      i <span class="token operator">=</span> <span class="token function">getIntVolatile</span><span class="token punctuation">(</span>paramObject<span class="token punctuation">,</span> paramLong<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>paramObject<span class="token punctuation">,</span> paramLong<span class="token punctuation">,</span> i<span class="token punctuation">,</span> paramInt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">getAndSetLong</span><span class="token punctuation">(</span><span class="token class-name">Object</span> paramObject<span class="token punctuation">,</span> <span class="token keyword">long</span> paramLong1<span class="token punctuation">,</span> <span class="token keyword">long</span> paramLong2<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">long</span> l<span class="token punctuation">;</span>
    <span class="token keyword">do</span>
      l <span class="token operator">=</span> <span class="token function">getLongVolatile</span><span class="token punctuation">(</span>paramObject<span class="token punctuation">,</span> paramLong1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span>paramObject<span class="token punctuation">,</span> paramLong1<span class="token punctuation">,</span> l<span class="token punctuation">,</span> paramLong2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> l<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token function">getAndSetObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> paramObject1<span class="token punctuation">,</span> <span class="token keyword">long</span> paramLong<span class="token punctuation">,</span> <span class="token class-name">Object</span> paramObject2<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> localObject<span class="token punctuation">;</span>
    <span class="token keyword">do</span>
      localObject <span class="token operator">=</span> <span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>paramObject1<span class="token punctuation">,</span> paramLong<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>paramObject1<span class="token punctuation">,</span> paramLong<span class="token punctuation">,</span> localObject<span class="token punctuation">,</span> paramObject2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> localObject<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><h2>AtomicInteger以及相关原子类</h2>
<h3>原子类更新基本类型</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>AtomicBoolean: 原子更新布尔类型。
AtomicInteger: 原子更新整型。
AtomicLong: 原子更新长整型。
</code></pre></div><h3>原子类更新数组类型</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">AtomicIntegerArray</span><span class="token operator">:</span> 原子更新整型数组里的元素。

<span class="token class-name">AtomicLongArray</span><span class="token operator">:</span> 原子更新长整型数组里的元素。

<span class="token class-name">AtomicReferenceArray</span><span class="token operator">:</span> 原子更新引用类型数组里的元素。
</code></pre></div><h4>基本使用示例</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicIntegerArray</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerArrayDemo</span> <span class="token punctuation">{</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">AtomicIntegerArray</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        索引1位置+2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>原子类更新引用类型</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">AtomicReference</span><span class="token operator">:</span> 原子更新引用类型。

<span class="token class-name">AtomicStampedReference</span><span class="token operator">:</span> 原子更新引用类型<span class="token punctuation">,</span> 内部使用<span class="token class-name">Pair</span>来存储元素值及其版本号。

<span class="token class-name">AtomicMarkableReferce</span><span class="token operator">:</span> 原子更新带有标记位的引用类型。
</code></pre></div><h4>使用示例</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicReference</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicReferenceTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token comment">// 创建两个Person对象，它们的id分别是101和102。</span>
        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 新建AtomicReference对象，初始化它的值为p1对象</span>
        <span class="token class-name">AtomicReference</span> ar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过CAS设置ar。如果ar的值为p1的话，则将其设置为p2。</span>
        ar<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>ar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p3 is "</span><span class="token operator">+</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p3.equals(p1)="</span><span class="token operator">+</span>p3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p3.equals(p2)="</span><span class="token operator">+</span>p3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"id:"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>原子类更新字段类型</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token operator">:</span> 原子更新整型的字段的更新器。

<span class="token class-name">AtomicLongFieldUpdater</span><span class="token operator">:</span> 原子更新长整型字段的更新器。

<span class="token class-name">AtomicStampedFieldUpdater</span><span class="token operator">:</span> 原子更新带有版本号的引用类型。

<span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token operator">:</span> 上面已经说过此处不在赘述。
</code></pre></div><h4>基础使用示例</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicIntegerFieldUpdater</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAtomicIntegerFieldUpdater</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">TestAtomicIntegerFieldUpdater</span> tIA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestAtomicIntegerFieldUpdater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tIA<span class="token punctuation">.</span><span class="token function">doIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataDemo</span><span class="token punctuation">&gt;</span></span> <span class="token function">updater</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">DataDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">DataDemo</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        通过源码发现返回的是更新前的值</span>
<span class="token comment">//        System.out.println("publicVar = "+updater("publicVar").getAndAdd(data, 2));</span>
<span class="token comment">//        System.out.println(data.publicVar);</span>
        <span class="token comment">/*
         * 由于在DataDemo类中属性value2/value3,在TestAtomicIntegerFieldUpdater中不能访问
         * */</span>
<span class="token comment">//        System.out.println("protectedVar = "+updater("protectedVar").getAndAdd(data,2));</span>
<span class="token comment">//        System.out.println("privateVar = "+updater("privateVar").getAndAdd(data,2));</span>

<span class="token comment">//        System.out.println("staticVar = "+updater("staticVar").getAndIncrement(data));//报java.lang.IllegalArgumentException</span>
        <span class="token comment">/*
         * 下面报异常：must be integer
         * */</span>
<span class="token comment">//        System.out.println("integerVar = "+updater("integerVar").getAndIncrement(data));</span>
        <span class="token comment">//System.out.println("longVar = "+updater("longVar").getAndIncrement(data));</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DataDemo</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> publicVar<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> protectedVar<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span>  <span class="token keyword">int</span> privateVar<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> staticVar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">//public  final int finalVar = 11;</span>

    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token class-name">Integer</span> integerVar <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token class-name">Long</span> longVar <span class="token operator">=</span> <span class="token number">18L</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre></div><h3>通过上述代码我们可以总结出CAS字段必须符合以下要求：</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1.</span> 变量必须使用<span class="token keyword">volatile</span>保证可见性

<span class="token number">2.</span> 必须是当前对象可以访问到的类型才可进行操作‘

<span class="token number">3.</span> 只能是实例变量而不是类变量，即不可以有<span class="token keyword">static</span>修饰符

<span class="token number">4.</span> 包装类也不行
</code></pre></div><h2>ABA问题</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">T</span> reference<span class="token punctuation">;</span>  <span class="token comment">//维护对象引用</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> stamp<span class="token punctuation">;</span>  <span class="token comment">//用于标志版本</span>
        <span class="token keyword">private</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">T</span> reference<span class="token punctuation">,</span> <span class="token keyword">int</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>reference <span class="token operator">=</span> reference<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>stamp <span class="token operator">=</span> stamp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">T</span> reference<span class="token punctuation">,</span> <span class="token keyword">int</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>reference<span class="token punctuation">,</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> pair<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token doc-comment comment">/**
      * expectedReference ：更新之前的原始引用值
      * newReference : 新值
      * expectedStamp : 期待当前版本与之一致的值
      * newStamp : 新版本值
      */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">V</span>   expectedReference<span class="token punctuation">,</span>
                             <span class="token class-name">V</span>   newReference<span class="token punctuation">,</span>
                             <span class="token keyword">int</span> expectedStamp<span class="token punctuation">,</span>
                             <span class="token keyword">int</span> newStamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取当前的(元素值，版本号)对</span>
        <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> current <span class="token operator">=</span> pair<span class="token punctuation">;</span>
        <span class="token keyword">return</span>
            <span class="token comment">// 引用没变</span>
            expectedReference <span class="token operator">==</span> current<span class="token punctuation">.</span>reference <span class="token operator">&amp;&amp;</span>
            <span class="token comment">// 版本号没变</span>
            expectedStamp <span class="token operator">==</span> current<span class="token punctuation">.</span>stamp <span class="token operator">&amp;&amp;</span>
           <span class="token comment">//可以看到这个括号里面用了一个短路运算如果当前版本与新值一样就说更新过，就不往下走CAS代码了</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>newReference <span class="token operator">==</span> current<span class="token punctuation">.</span>reference <span class="token operator">&amp;&amp;</span>

            newStamp <span class="token operator">==</span> current<span class="token punctuation">.</span>stamp<span class="token punctuation">)</span> <span class="token operator">||</span>
            <span class="token comment">// 构造新的Pair对象并CAS更新</span>
            <span class="token function">casPair</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>newReference<span class="token punctuation">,</span> newStamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">casPair</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> cmp<span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用Unsafe的compareAndSwapObject()方法CAS更新pair的引用为新引用</span>
        <span class="token keyword">return</span> <span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> pairOffset<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>代码示例，我们下面就用other代码模拟干扰现场，如果other现场先进行cas更新再还原操作，那么main线程的版本号就会过时，CAS就会操作失败</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * ABA问题代码示例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicStampedReferenceTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> atomicStampedRef <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作线程"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",初始值 a = "</span> <span class="token operator">+</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前标识别</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等待1秒 ，以便让干扰线程执行</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">boolean</span> isCASSuccess <span class="token operator">=</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//此时expectedReference未发生改变，但是stamp已经被修改了,所以CAS失败</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作线程"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",CAS操作结果: "</span> <span class="token operator">+</span> isCASSuccess<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"主操作线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> other <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确保thread-main 优先执行</span>
            atomicStampedRef<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作线程"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",【increment】 ,值 = "</span> <span class="token operator">+</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            atomicStampedRef<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作线程"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",【decrement】 ,值 = "</span> <span class="token operator">+</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"干扰线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        main<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        other<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>为什么需要CompletableFuture</title>
      <link>https://maijunxuan.cn/JUC/CompletableFuture%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://maijunxuan.cn/JUC/CompletableFuture%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">为什么需要CompletableFuture</source>
      <description>为什么需要CompletableFuture CompletableFuture继承了CompletionStage接口和Future接口，在原有future的基础上增加了异步回调、流式处理以及任务组合，成为java8多任务协同场景下一个有效利器。 基础使用示例 提交有返回值的异步任务 可以看到提交带返回值的任务的方式很简单，只需使用Completab...</description>
      <pubDate>Mon, 19 Sep 2022 21:37:24 GMT</pubDate>
      <content:encoded><![CDATA[
<p>CompletableFuture继承了CompletionStage接口和Future接口，在原有future的基础上增加了异步回调、流式处理以及任务组合，成为java8多任务协同场景下一个有效利器。</p>
<h1>基础使用示例</h1>
<h2>提交有返回值的异步任务</h2>
<p>可以看到提交带返回值的任务的方式很简单，只需使用CompletableFuture的api<code>supplyAsync</code>即可，这个方法完全可以使用lambda将你需要的任务作为参数传入即可。 最后只需使用get方法即可拿到值。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> supplyAsync <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了，执行时间："</span> <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了，总执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出结果 "</span><span class="token operator">+</span>supplyAsync<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程运行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre></div><h3>通过源码了解get的原理</h3>
<p>可以看到如果任务没有结果就<code>waitingGet</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220920052933117.png" alt="image-20220920052933117"></p>
<p>我们再来看看<code>waitingGet</code>，他所作的也很简单，就是无限自旋等待结果返回而已</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220920052953726.png" alt="image-20220920052953726"></p>
<p>然后调用<code>postComplete</code>再返回结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220920053008955.png" alt="image-20220920053008955"></p>
<p>而<code>postComplete</code>做的事情也很简单，使用变量f指向this，如果this有返回值就cas取出下一个任务压入任务栈</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">postComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*
         * On each step, variable f holds current dependents to pop
         * and run.  It is extended along only one path at a time,
         * pushing others to avoid unbounded recursion.
         */</span>
         <span class="token comment">//指向当前对象</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token class-name">Completion</span> h<span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> f<span class="token punctuation">.</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span>
               <span class="token punctuation">(</span>f <span class="token operator">!=</span> <span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> <span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> d<span class="token punctuation">;</span> <span class="token class-name">Completion</span> t<span class="token punctuation">;</span>
            <span class="token comment">//使用cas将下一个任务换到this栈的顶部</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">casStack</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> t <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//结果cas后若f不为this 就说明指向新任务了</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//h指向this的栈顶，这一步就是将this的栈顶任务，即刚刚cas的新任务压入栈中</span>
                        <span class="token function">pushStack</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    h<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// detach</span>
                <span class="token punctuation">}</span>
                 <span class="token comment">//对f赋值任务的处理结果返回</span>
                f <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">tryFire</span><span class="token punctuation">(</span><span class="token constant">NESTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> d<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>输出结果</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>主线程开始运行
<span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>开始工作了，执行时间：<span class="token number">1651244818430</span>
<span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>结束工作了，总执行时间：<span class="token number">1007</span>
输出结果 <span class="token number">1</span>
主线程运行结束
</code></pre></div><h2>提交无返回值的异步任务</h2>
<p>可以看到提交没有返回值的任务时使用的api是runAsync</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> supplyAsync <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了，执行时间："</span> <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了，总执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//没有get阻塞就拿不到结束工作了的输出</span>
        supplyAsync<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程运行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>输出结果</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>主线程开始运行
<span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>开始工作了，执行时间：<span class="token number">1651251489755</span>
<span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>结束工作了，总执行时间：<span class="token number">1010</span>
主线程运行结束
</code></pre></div><h2>将异步任务提交给自己的线程池处理</h2>
<p>上文的异步任务都没有指定线程池，从输出结果中我们就可以看到使用的线程都是来自默认的线程池ForkJoinPool。注意CompletableFuture在没有指定线程池的情况下，若计算机是单核的那么默认的线程池是<code>ThreadPerTaskExecutor</code>，这一点我们完全可以在源码中得到印证，如下所示，这里的useCommonPool在计算机多核情况下是true，反之为false，感兴趣的读者可以自行去看看CompletableFuture的源码
<img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220920053028803.png" alt="image-20220920053028803"></p>
<p>话不多说，我们接下来就来介绍一下如何指定自定义线程池，代码如下，可以看到笔者将自定的线程池executorService作为入参作为supplyAsync 的第2个参数</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> supplyAsync <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了，执行时间："</span> <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了，总执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出结果 "</span><span class="token operator">+</span>supplyAsync<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程运行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>executorService<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>从输出结果也可以看出这里使用的线程池是我们自定义的线程池</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>主线程开始运行
<span class="token class-name">Thread</span><span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>开始工作了，执行时间：<span class="token number">1651251851358</span>
<span class="token class-name">Thread</span><span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>结束工作了，总执行时间：<span class="token number">2005</span>
输出结果 <span class="token number">1</span>
主线程运行结束

</code></pre></div><h1>回调使用示例</h1>
<h2>thenApply / thenApplyAsync</h2>
<h3>thenApply</h3>
<p>thenApply 适用那些需要顺序执行的异步任务，如下所示，拿着第一个异步任务的返回值交给第二个异步任务进行加工处理，最终返回自己需要的结果</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">execute1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token string">"第一个线程的结果为 "</span> <span class="token operator">+</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿第一个任务的结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个任务结果结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿第2个任务的结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个任务的结果 "</span><span class="token operator">+</span>future1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第2个任务结果结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span>executorService<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

       <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 输出结果
         * Thread[pool-1-thread-1,5,main]开始工作了
         * 拿第一个任务的结果
         * Thread[pool-1-thread-1,5,main]结束工作了
         * 第二个线程：Thread[pool-1-thread-1,5,main]开始工作了
         * 100
         * 第一个任务结果结束
         * 拿第2个任务的结果
         * 第二个任务的结果 第一个线程的结果为 100
         * 第2个任务结果结束
         */</span>

    <span class="token punctuation">}</span>
</code></pre></div><h3>thenApplyAsync</h3>
<p>thenApplyAsync与thenApply不同的是，在第一个异步任务有指定线程池的情况下，第二个异步任务会被提交到其他线程池中，这个规律在后文中也一样，各种回调的api，都会有一个带Async的方法，工作原理也是一样，后文就不多赘述了，示例代码如下</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">execute2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token string">"第一个线程的结果为 "</span> <span class="token operator">+</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿第一个任务的结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个任务结果结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿第2个任务的结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个任务的结果 "</span><span class="token operator">+</span>future1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第2个任务结果结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>executorService<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/**
         * 输出结果
         * Thread[pool-1-thread-1,5,main]开始工作了
         * 拿第一个任务的结果
         * Thread[pool-1-thread-1,5,main]结束工作了
         * 100
         * 第一个任务结果结束
         * 拿第2个任务的结果
         * 第二个线程：Thread[ForkJoinPool.commonPool-worker-1,5,main]开始工作了
         * 第二个任务的结果 第一个线程的结果为 100
         * 第2个任务结果结束
         */</span>

    <span class="token punctuation">}</span>
</code></pre></div><p>输出结果，可以看到异步任务2任务被提交到ForkJoinPool中</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
         * 输出结果
         * Thread[pool-1-thread-1,5,main]开始工作了
         * 拿第一个任务的结果
         * Thread[pool-1-thread-1,5,main]结束工作了
         * 100
         * 第一个任务结果结束
         * 拿第2个任务的结果
         * 第二个线程：Thread[ForkJoinPool.commonPool-worker-1,5,main]开始工作了
         * 第二个任务的结果 第一个线程的结果为 100
         * 第2个任务结果结束
         */</span>
</code></pre></div><h2>thenAccept / thenRun</h2>
<p>thenAccept就是拿着上一个任务的返回值作为入参，但是没有返回值 thenRun会在上一个任务执行结束后才开始处理，既没有入参也没有返回值 具体实例代码如下所示，可以看到笔者最终想拿任务2的结果并不是用任务2.get,而是</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">execute1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个任务"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">300</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第2个线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token string">"第2个线程的结果为 "</span> <span class="token operator">+</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> future3 <span class="token operator">=</span> future2<span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第3个线程开始执行，该任务接收上一个任务的结果，但无返回值，收到上一个任务的结果值为 "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> future4 <span class="token operator">=</span> future3<span class="token punctuation">.</span><span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一切都结束了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿第一个任务的结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个任务的结果"</span><span class="token operator">+</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个任务结果结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿第2个任务的结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个任务的结果 "</span><span class="token operator">+</span>future2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第2个任务结果结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿第3个任务的结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第3个任务的结果 "</span><span class="token operator">+</span>future3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第3个任务结果结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿第4个任务的结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第4个任务的结果 "</span><span class="token operator">+</span>future4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第4个任务结果结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>executorService<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 第一个任务Thread[pool-1-thread-1,5,main]开始工作了
         * 拿第一个任务的结果
         * Thread[pool-1-thread-1,5,main]结束工作了
         * 第一个任务的结果300
         * 第2个线程：Thread[pool-1-thread-1,5,main]开始工作了
         * 第一个任务结果结束
         * 拿第2个任务的结果
         * 第3个线程开始执行，该任务接收上一个任务的结果，但无返回值，收到上一个任务的结果值为 第2个线程的结果为 300
         * 一切都结束了
         * 第二个任务的结果 第2个线程的结果为 300
         * 第2个任务结果结束
         * 拿第3个任务的结果
         * 第3个任务的结果 null
         * 第3个任务结果结束
         * 拿第4个任务的结果
         * 第4个任务的结果 null
         * 第4个任务结果结束
         */</span>


    <span class="token punctuation">}</span>
</code></pre></div><h2>exceptionally</h2>
<p>我们在处理异步任务过程中，难免会出现错误的情况，有些情况下我们可以捕获处理，所以CompletableFuture也为我们提供了一个不错的api——exceptionally，假如我们有两个异步任务，执行顺序为任务1——任务2，任务1执行过程有可能会出现报错，那么我们就可以在这两个任务之间添加一个exceptionally方法，实例代码如下，可以看到笔者在获取任务2的结果时并不是使用<code>finalFuture.get();</code>而是使用 <code>exceptionally.get()</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">execute1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> supplyAsync <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了，执行时间："</span> <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> num <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"报错了 num:"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了，总执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> exceptionally <span class="token operator">=</span> supplyAsync<span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上一个任务报错了，错误信息"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span> finalFuture <span class="token operator">=</span> supplyAsync<span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"走到正常的结束分支了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        调用错误捕获的任务执行结束也会自动走到正常结束的分支</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出结果 "</span> <span class="token operator">+</span> exceptionally<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程运行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * ForkJoinPool.commonPool-worker-1开始工作了，执行时间：1651168395414
         * 主线程开始运行
         * ForkJoinPool.commonPool-worker-1结束工作了，总执行时间：1011
         * 走到正常的结束分支了
         * 输出结果 1024
         * 主线程运行结束
         */</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>whenComplete</h2>
<p>相比于exceptionally，whenComplete更适用于处理不需要协同但是可能报错的异步任务，实例代码如下所示，可以看到假如提交异步任务err不为空就说明执行出错了，那么我们就可以对异常进行处理，若为空则说明没有报错，我们就可以将上一个任务的结果输出以及返回出去</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">execute1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> num <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"报错了 num:"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> num<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                err<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿第1个任务的结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1个任务的结果 "</span><span class="token operator">+</span>future2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1个任务结果结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>executorService<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * Thread[pool-1-thread-1,5,main]开始工作了
         * 拿第1个任务的结果
         * Thread[pool-1-thread-1,5,main]结束工作了
         * 第二个线程：Thread[pool-1-thread-1,5,main]开始工作了
         * 第1个任务的结果 6
         * 第1个任务结果结束
         */</span>

    <span class="token punctuation">}</span>
</code></pre></div><h2>handle</h2>
<p>handle使用和whenComplete差不多，唯一的区别就是whenComplete返回的是上一个任务的结果，而handle可以返回自己的结果，代码如下所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">execute1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> num <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"报错了 num:"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> num<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"fail"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token string">"sucdess"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿第1个任务的结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1个任务的结果 "</span> <span class="token operator">+</span> future2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1个任务结果结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



        <span class="token doc-comment comment">/**
         * 输出结果
         * Thread[pool-1-thread-1,5,main]开始工作了
         * 拿第一个任务的结果
         * Thread[pool-1-thread-1,5,main]结束工作了
         * 第二个线程：Thread[pool-1-thread-1,5,main]开始工作了
         * 100
         * 第一个任务结果结束
         * 拿第2个任务的结果
         * 第二个任务的结果 第一个线程的结果为 100
         * 第2个任务结果结束
         */</span>

    <span class="token punctuation">}</span>
</code></pre></div><h1>任务组合示例</h1>
<h2>thenCombine / thenAcceptBoth / runAfterBoth</h2>
<p>这几个方法都是将两个任务组合起来执行的，只有两个任务都顺利完成了，才会执行之后的方法，唯一的区别是</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. thenCombine 接收两个任务的返回值，也能返回值
2. thenAcceptBoth 接收两个参数返回值，但没有返回值
3. runAfterBoth 既不能接收入参，也无返回值
</code></pre></div><p>示例代码如下，读者可以自行调试</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">thenCombineDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token function">thenCombine</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> result1 <span class="token operator">+</span> result2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]结束工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]结束工作了
         * 100
         * 200
         * 300
         */</span>
    <span class="token punctuation">}</span>



    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">thenAcceptBothDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token function">thenAcceptBoth</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]开始工作了
         * java.util.concurrent.CompletableFuture@4dd8dc3[Not completed]
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]结束工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]结束工作了
         * 100
         * 200
         * null
         */</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runAfterBothDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token function">runAfterBoth</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一切都结束了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]开始工作了
         * java.util.concurrent.CompletableFuture@6d03e736[Not completed]
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]结束工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]结束工作了
         * 一切都结束了
         * null
         */</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>applyToEither / acceptEither / runAfterEither</h2>
<p>和上一个组合模式一样，依次规律也是接收入参，含返回值。接收入参，无返回值。无入参，无返回值。 这种组合模式只要有一个异步任务成功，就会触发后续的方法，常适用于秒杀这样这样的异步任务</p>
<p>示例代码如下</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">applyToEitherDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> future1<span class="token punctuation">.</span>applyToEither <span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有个任务完成了结果为"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]结束工作了
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]结束工作了
         * 有个任务完成了结果为200
         * success
         */</span>

    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">acceptEitherDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> future1<span class="token punctuation">.</span>acceptEither <span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有个任务完成了结果为"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]结束工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]结束工作了
         * 有个任务完成了结果为100
         * null
         */</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runAfterEitherDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> future1<span class="token punctuation">.</span>runAfterEither <span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有个任务完成了结果为"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]结束工作了
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]结束工作了
         * 有个任务完成了结果为
         * null
         * 
         */</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>thenCompose</h2>
<p>thenCompose适用于构建一个异步任务的串，示例代码如下所示，第2个任务thenCompose第1个异步任务，这就使得第一个任务执行完返回一个CompletableFuture给异步任务2，任务2拿着它的返回值做进一步处理，示例代码如下</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tenComposeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建异步执行任务:</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 开始第1个任务,time-&gt;"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 退出第1个任务,time-&gt;"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future2<span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token function">thenCompose</span><span class="token punctuation">(</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 开始第2个任务,time-&gt;"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 结束第2个任务,time-&gt;"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 开始第3个任务,time-&gt;"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 结束第3个任务,time-&gt;"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token string">"job3 test"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行结果-&gt;"</span><span class="token operator">+</span>future2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * Thread[ForkJoinPool.commonPool-worker-1,5,main] 开始第1个任务,time-&gt;1651254948166
         * Thread[ForkJoinPool.commonPool-worker-1,5,main] 退出第1个任务,time-&gt;1651254948268
         * Thread[ForkJoinPool.commonPool-worker-1,5,main] 开始第2个任务,time-&gt;1651254948268
         * Thread[ForkJoinPool.commonPool-worker-1,5,main] 结束第2个任务,time-&gt;1651254950277
         * Thread[ForkJoinPool.commonPool-worker-1,5,main] 开始第3个任务,time-&gt;1651254950278
         * Thread[ForkJoinPool.commonPool-worker-1,5,main] 结束第3个任务,time-&gt;1651254952288
         * 执行结果-&gt;job3 test
         */</span>

    <span class="token punctuation">}</span>
</code></pre></div><h2>allOf / anyOf</h2>
<p>allOf返回的CompletableFuture是所有任务都执行完成后才会执行，只要有一个任务执行异常，则返回的CompletableFuture执行get方法时会抛出异常，如果都是正常执行，则get返回null。 而anyOf则是只要有一个任务完成就可以触发后续方法，并且可以返回先完成任务的返回值</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allofDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> whenComplete <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span> future2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常结束，结果为"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>whenComplete<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]开始工作了
         * Thread[ForkJoinPool.commonPool-worker-2,5,main]结束工作了
         * Thread[ForkJoinPool.commonPool-worker-1,5,main]结束工作了
         * 正常结束，结果为null
         * null
         */</span>


    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">anyofDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> anyOfFuture <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token function">anyOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span> future2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anyOfFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Thread[ForkJoinPool.commonPool-worker-1,5,main]开始工作了
 * Thread[ForkJoinPool.commonPool-worker-2,5,main]开始工作了
 * Thread[ForkJoinPool.commonPool-worker-2,5,main]结束工作了
 * Thread[ForkJoinPool.commonPool-worker-1,5,main]结束工作了
 * 200
 */</span>
    <span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220920052933117.png" type="image/png"/>
    </item>
    <item>
      <title>JUC常用工具类</title>
      <link>https://maijunxuan.cn/JUC/JUC%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB.html</link>
      <guid>https://maijunxuan.cn/JUC/JUC%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">JUC常用工具类</source>
      <description>JUC常用工具类 CountDownLatch 简介 倒计时门闩，只有倒计时门闩值变为0时，阻塞状态才会结束。 常用api 示例 工厂中，质检，5个工人检查，所有人都认为通过，才通过 以运动员听枪比赛示例介绍countDownLatch确保多线程同时开始的示例 Semaphore 简介 信号量常用于控制多线程使用有限资源的场景 使用方式 初始化Sema...</description>
      <pubDate>Mon, 19 Sep 2022 21:37:24 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>CountDownLatch</h2>
<h3>简介</h3>
<p>倒计时门闩，只有倒计时门闩值变为0时，阻塞状态才会结束。 常用api</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">countDownLatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token comment">//构造函数，参数count为需要倒数的值。</span>


<span class="token function">awiait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//调用这个方法的线程会被挂起，直到count为0才继续执行。</span>


<span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//调用一次这个方法，会将count减1。</span>

</code></pre></div><h3>示例</h3>
<h4>工厂中，质检，5个工人检查，所有人都认为通过，才通过</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">flowcontrol<span class="token punctuation">.</span>countdownlatch</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchBaseUse</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> no <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

                <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
                            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No"</span> <span class="token operator">+</span> no <span class="token operator">+</span> <span class="token string">"完成了检查"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待所有检查完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有人都完成了工作，进入下一个环节。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h4>以运动员听枪比赛示例介绍countDownLatch确保多线程同时开始的示例</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">flowcontrol<span class="token punctuation">.</span>countdownlatch</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * countDownLatch第二种示例
 * 以运动员听枪比赛示例介绍countDownLatch确保多线程同时开始的示例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchBaseUse2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CountDownLatch</span> countDownLatch<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> threadPool<span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token class-name">Runnable</span> runnable<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token operator">+</span> finalI <span class="token operator">+</span><span class="token string">"准备完成，等待枪响"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token operator">+</span> finalI <span class="token operator">+</span><span class="token string">"冲向终点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开枪，比赛开始。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h2>Semaphore</h2>
<h3>简介</h3>
<p>信号量常用于控制多线程使用有限资源的场景</p>
<h3>使用方式</h3>
<ol>
<li>
<p>初始化Semaphore并指定许可证的数量。</p>
<ol>
<li>需要信号量使用acquire()来获取，只要有剩余就会分配。</li>
<li>当使用完毕后，使用release()释放信号量。</li>
</ol>
</li>
</ol>
<h3>使用示例</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreBaseUse</span> <span class="token punctuation">{</span>
    <span class="token comment">//加true则实现公平策略线程会按照顺序来</span>
    <span class="token keyword">static</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>


        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"拿到了许可证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"释放了许可证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>注意事项</h3>
<ol>
<li>获取和释放的时候都可以指定数量，但是要保持一致。</li>
<li>公平性设置为true会更加合理</li>
<li>并不必须由获取许可证的线程释放许可证。可以是A获取，B释放。</li>
</ol>
<h2>Condition</h2>
<h3>简介</h3>
<p>当A线程需要等待某个条件的时候，它就去执行condition.await()方法，一旦执行了await()方法，线程就会进入阻塞状态。</p>
<p>如果线程B执行condition.signal()方法，则JVM就会从被阻塞线程中找到等待该condition的线程。当线程A收到可执行信号的时候，他的线程状态就会变成Runnable可执行状态。</p>
<h3>示例</h3>
<h4>基础使用示例</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionBaseUse1</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> reentrantLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> reentrantLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConditionBaseUse1</span> conditionBaseUse1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConditionBaseUse1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//注意这里必须先让唤醒线程开启，并且将其设置为休眠，保证它开启，且能够让出cpu时间片给等待线程运行</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            conditionBaseUse1<span class="token punctuation">.</span><span class="token function">notifyCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        conditionBaseUse1<span class="token punctuation">.</span><span class="token function">waitCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">void</span> <span class="token function">waitCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待条件完成中。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"条件完成，开始执行业务逻辑。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">notifyCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"条件完成，通知其他线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><h4>基于条件对象完成生产者、消费者模式</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">flowcontrol<span class="token punctuation">.</span>condition</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionBaseUse2</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> queueSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Condition</span> notFull <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Condition</span> notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConditionBaseUse2</span> conditionBaseUse2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConditionBaseUse2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Consumer</span> consumer<span class="token operator">=</span>conditionBaseUse2<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Producer</span> producer<span class="token operator">=</span>conditionBaseUse2<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列已空，等待生产"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从队列消费一个数据，当前剩余 "</span> <span class="token operator">+</span>  queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>



    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> queueSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列已满，等待消费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向队列插入一个元素，当前剩余空间 "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>queueSize <span class="token operator">-</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>CyclicBarrier</h2>
<h3>简介</h3>
<p>直到指定数量的线程都到达同一个点，然后才一起继续执行。</p>
<h3>示例</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">flowcontrol<span class="token punctuation">.</span>cyclicbarrier</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BrokenBarrierException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CyclicBarrier</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierBaseUse1</span> <span class="token punctuation">{</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CyclicBarrier</span> cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人已到齐，准备出发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//循环栅栏可以复用</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>cyclicBarrier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">CyclicBarrier</span> cyclicBarrier<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">CyclicBarrier</span> cyclicBarrier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>cyclicBarrier <span class="token operator">=</span> cyclicBarrier<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"前往集合地点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"到达集合地点，等待其他人到达"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"准备出发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h3>与CountDownLatch简介区别</h3>
<ol>
<li>CountDownLatch用户事件，循环栅栏作用于线程</li>
<li>循环栅栏可重复使用，CountDownLatch则不能</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Java中的线程池</title>
      <link>https://maijunxuan.cn/JUC/Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0.html</link>
      <guid>https://maijunxuan.cn/JUC/Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Java中的线程池</source>
      <description>Java中的线程池 降低资源消耗，创建一个线程的开销远大于创建一个对象 如下所示，我们使用这条命令就可以看到如下图所示的控制台 可以从控制台看出，平均一个线程的大小是1M image-20220920053221748 提高响应速度，由于我们统一使用线程池进行管理了，所以无需等待线程的创建时间 由于线程池数量是在一定范围内，所以更加方便我们管理与监控 ...</description>
      <pubDate>Mon, 19 Sep 2022 21:37:24 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>降低资源消耗，创建一个线程的开销远大于创建一个对象</h2>
<p>如下所示，我们使用这条命令就可以看到如下图所示的控制台</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>java <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UnlockDiagnosticVMOptions</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">NativeMemoryTracking</span><span class="token operator">=</span>summary <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintNMTStatistics</span> <span class="token operator">-</span>version

</code></pre></div><p>可以从控制台看出，平均一个线程的大小是1M</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220920053221748.png" alt="image-20220920053221748"></p>
<h2>提高响应速度，由于我们统一使用线程池进行管理了，所以无需等待线程的创建时间</h2>
<h2>由于线程池数量是在一定范围内，所以更加方便我们管理与监控</h2>
<h1>Executor 框架结构简介</h1>
<h2>1. 提交任务的方式</h2>
<p>Executor提交任务的方式有两种一种是基于提交继承<code>Runnable</code>接口的任务对象，另一种则是提交<code>Callable</code>接口类型的对象。这两种类型区别在这里我们可以简单理解为Runnable类型没有返回值，而Callable类型有返回值。</p>
<h2>2. 返回值类型</h2>
<p>线程池返回类型使用的类基本都是基于<code>future</code>类，所以当我们把<code>runnable</code>和<code>callable</code>使用submit提交时，就会返回一个future对象，这回时候我们就可以使用get方式对主线程进行阻塞并获取当前线程的结果。具体可以参考以下代码:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTaskDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>


<span class="token comment">//          第一种方式:Future + ExecutorService</span>
<span class="token comment">////       创建缓存线程池</span>
        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        创建任务</span>
        <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



    <span class="token punctuation">}</span>

    <span class="token comment">// 1. 继承Callable接口,实现call()方法,泛型参数为要返回的类型</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread ["</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">+=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//            System.out.println(result);</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h1>java实现和管理线程池的方式有哪些？简单举例使用</h1>
<h2>线程池基础使用示例</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 工作线程
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkerThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> command<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WorkerThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token operator">=</span>s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" Start. Command = "</span><span class="token operator">+</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">processCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" End."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 线程池使用的基础示例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        创建一个定量工作线程且队列无限大的线程池</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">WorkerThread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkerThread</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token comment">//        等待当前所有任务执行完成且不再接手新任务进来</span>
        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果有任务未完成就在这个循环中</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>executorService<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总线程运行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上文说过使用线程池可以做一个线程池的监控器，下面我们就来简单实现一个</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 拒绝策略
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RejectedExecutionHandlerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被拒绝了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMonitorThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>


    <span class="token keyword">private</span> <span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> seconds<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> run<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyMonitorThread</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">,</span> <span class="token keyword">int</span> delay<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seconds<span class="token operator">=</span>delay<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>run<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
<span class="token comment">//        如果当前对象run为true就不断循环打印线程池监控状态</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>
                    <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[monitor] [%d/%d] Active: %d, Completed: %d, Task: %d, isShutdown: %s, isTerminated: %s"</span><span class="token punctuation">,</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">getActiveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">getCompletedTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">getTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 测试代码
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">//RejectedExecutionHandler implementation</span>
        <span class="token class-name">RejectedExecutionHandlerImpl</span> rejectionHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RejectedExecutionHandlerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Get the ThreadFactory implementation to use</span>
        <span class="token class-name">ThreadFactory</span> threadFactory <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//creating the ThreadPoolExecutor</span>
        <span class="token class-name">ThreadPoolExecutor</span> executorPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> rejectionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//start the monitoring thread</span>
        <span class="token class-name">MyMonitorThread</span> monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMonitorThread</span><span class="token punctuation">(</span>executorPool<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> monitorThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>monitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        monitorThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//submit work to the thread pool</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executorPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WorkerThread</span><span class="token punctuation">(</span><span class="token string">"cmd"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//shut down the pool</span>
        executorPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//shut down the monitor thread</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        monitor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h1>ThreadPoolExecutors使用详解</h1>
<h2>工作流程</h2>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220920053242776.png" alt="image-20220920053242776"></p>
<h2>核心参数</h2>
<p>如下所示：</p>
<blockquote>
<p>1.corePoolSize代表着核心的线程数</p>
<p>2.maximumPoolSize代表着当队列都满了，允许在开放的线程数</p>
<p>3.unit和keepAliveTime则代表着备份开启线程在没有任务的情况下可以存活的时间</p>
<p>4.workQueue则代表保存等待时间的任务队列</p>
<p>5.handler则是处理那些连备份线程都没有空闲处理的线程，而JUC为我们提供了以下四种拒绝策略：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">AbortPolicy</span><span class="token operator">:</span> 直接抛出异常，默认策略；
<span class="token class-name">CallerRunsPolicy</span><span class="token operator">:</span> 用调用者所在的线程来执行任务；
<span class="token class-name">DiscardOldestPolicy</span><span class="token operator">:</span> 丢弃阻塞队列中靠最前的任务，并执行当前任务；
<span class="token class-name">DiscardPolicy</span><span class="token operator">:</span> 直接丢弃任务；
</code></pre></div></blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>
                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>
                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>
                              <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>
                              <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>
                              <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>
             <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>状态</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token constant">RUNNING</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">COUNT_BITS</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">SIZE</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//    Integer.SIZE为 32 -3为29</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CAPACITY</span>   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// runState is stored in the high-order bits</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">RUNNING</span>    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span> <span class="token comment">//通过左移运算符使得高位为-1，当前状态表示会接受新任务且也会同理对了中的任务</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SHUTDOWN</span>   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span><span class="token comment">//表示会处理任务但不接受新任务</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STOP</span>       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span><span class="token comment">//不处理任务也不接受新任务，并会中断所有的任务</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TIDYING</span>    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span> <span class="token comment">//表示所有任务都已成功终止</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TERMINATED</span> <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span> <span class="token comment">//执行执行完terminated()即代表当前线程池已经终止执行了       </span>


<span class="token comment">// Packing and unpacking ctl</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token constant">CAPACITY</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token constant">CAPACITY</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre></div><h2>任务执行</h2>
<p>如下所示，源码已经个我们足够的提示不多赘述，需要的读者可以配合翻译阅读，我们不妨继续往下看看addWorker</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
         * Proceed in 3 steps:
         *
         * 1. If fewer than corePoolSize threads are running, try to
         * start a new thread with the given command as its first
         * task.  The call to addWorker atomically checks runState and
         * workerCount, and so prevents false alarms that would add
         * threads when it shouldn't, by returning false.
         *
         * 2. If a task can be successfully queued, then we still need
         * to double-check whether we should have added a thread
         * (because existing ones died since last checking) or that
         * the pool shut down since entry into this method. So we
         * recheck state and if necessary roll back the enqueuing if
         * stopped, or start a new thread if there are none.
         *
         * 3. If we cannot queue task, then we try to add a new
         * thread.  If it fails, we know we are shut down or saturated
         * and so reject the task.
         */</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        retry<span class="token operator">:</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>
　　　　<span class="token comment">//获取当前运行状态//</span>

            <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Check if queue empty only if necessary.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&gt;=</span> <span class="token constant">SHUTDOWN</span> <span class="token operator">&amp;&amp;</span>
                <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> <span class="token constant">SHUTDOWN</span> <span class="token operator">&amp;&amp;</span>
                   firstTask <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
                   <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">&gt;=</span> <span class="token constant">CAPACITY</span> <span class="token operator">||</span>
                    wc <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span> retry<span class="token punctuation">;</span>
                c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Re-read ctl&lt;br&gt;</span>
　　　　　　　　<span class="token comment">//状态有改变从retry开始执行</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>
                    <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>
                <span class="token comment">// else CAS failed due to workerCount change; retry inner loop</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>
　　　　<span class="token comment">//加锁并初始化创建worker将任务分配给worker线程</span>

        <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Worker</span> w <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">Thread</span> t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>
                mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// Recheck while holding lock.</span>
                    <span class="token comment">// Back out on ThreadFactory failure or if</span>
                    <span class="token comment">// shut down before lock acquired.</span>
                    <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> <span class="token constant">SHUTDOWN</span> <span class="token operator">||</span>
                        <span class="token punctuation">(</span>rs <span class="token operator">==</span> <span class="token constant">SHUTDOWN</span> <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// precheck that t is startable</span>
                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;</span> largestPoolSize<span class="token punctuation">)</span>
                            largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>
                        workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>
                <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>最后我们再来看看worker是如何运行任务的</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> wt <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>
　　　　<span class="token comment">//拿到任务并重置firstTask</span>

        <span class="token class-name">Runnable</span> task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>
        w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// allow interrupts</span>
        <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>
　　　　　　　　<span class="token comment">//循环的去执行任务</span>

            <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// If pool is stopping, ensure thread is interrupted;</span>
                <span class="token comment">// if not, ensure thread is not interrupted.  This</span>
                <span class="token comment">// requires a recheck in second case to deal with</span>
                <span class="token comment">// shutdownNow race while clearing interrupt</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STOP</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                     <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                      <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STOP</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Throwable</span> thrown <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">//执行任务</span>
                        task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                        <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">//让当前worker任务置为空，记录完成的任务</span>
                    task <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>
                    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2>任务提交</h2>
<p>如下所示，我们经常用的开发方式就callable执行，future获取结果，future的get原理就是阻塞主线程将主线程放入waiters中，当前线程执行完成后会通过LockSupport类unpark唤醒主线程</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">ExecutorService</span> es <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> es<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token string">"future result"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>




<span class="token comment">// submit方法在AbstractExecutorService中的实现</span>
<span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通过submit方法提交的Callable任务会被封装成了一个FutureTask对象。如下一段代码所示</span>
    <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

关于futureTask可以参考笔者的这篇文章简单聊聊<span class="token class-name">FutureTask</span>

<span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h1>线程池关闭</h1>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>
    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//检查是否可以关闭线程</span>
        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置线程池状态</span>
        <span class="token function">advanceRunState</span><span class="token punctuation">(</span><span class="token constant">SHUTDOWN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//尝试中断worker</span>
        <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//预留方法,留给子类实现</span>
        <span class="token function">onShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hook for ScheduledThreadPoolExecutor</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> onlyOne<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>
    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//遍历所有的worker</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Worker</span> w <span class="token operator">:</span> workers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span> t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>
            <span class="token comment">//先尝试调用w.tryLock(),如果获取到锁,就说明worker是空闲的,就可以直接中断它</span>
            <span class="token comment">//注意的是,worker自己本身实现了AQS同步框架,然后实现的类似锁的功能</span>
            <span class="token comment">//它实现的锁是不可重入的,所以如果worker在执行任务的时候,会先进行加锁,这里tryLock()就会返回false</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> w<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>onlyOne<span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>Executors可以创建哪三种线程池？</h2>
<p>newFixedThreadPool通过源码我们可以看出这样将会创建定量的线程，而且任务队列将是无限量的，所以这就导致了<code>maximumPoolSize</code>和<code>keepAliveTime</code>没有任何作用</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>
                                      <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>
                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>newSingleThreadExecutor如其名线程池中永远只有一个线程池，当任务超过线程池线程数量就会将其放到无限量的队列中，且永远不会拒绝任务。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>
            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
                                    <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>
                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    threadFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>newCachedThreadPool就比较特殊了，这个线程池初始时线程池的线程是0，每当有个任务进来且线程池没有空闲的线程时，就会创建一个新的线程，当线程超过60s后没有任务时就会将这个线程释放。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span>
                                      <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
                                      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                      threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h1>为什么很多公司不允许使用Executors取创建线程池？</h1>
<p>有了上文的三种线程池创建方式我们就会发现， newFixedThreadPool、newSingleThreadExecutor在大量线程任务情况下很可能出现OOM问题，而newCachedThreadPool就可能创建大量的线程进而造成极其严重的资源开销。</p>
<h2>OOM场景示例</h2>
<h1>ThreadPoolExecutor使用示例</h1>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 无返回值的线程使用示例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutorDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">//    开10个每个线程5s并行5s搞定</span>
<span class="token comment">//    private static final int CORE_POOL_SIZE = 10;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">QUEUE_CAPACITY</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">KEEP_ALIVE_TIME</span> <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//使用阿里巴巴推荐的创建线程池的方式</span>
        <span class="token comment">//通过ThreadPoolExecutor构造函数自定义参数创建</span>
        <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
                <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">,</span>
                <span class="token constant">MAX_POOL_SIZE</span><span class="token punctuation">,</span>
                <span class="token constant">KEEP_ALIVE_TIME</span><span class="token punctuation">,</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">QUEUE_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//创建WorkerThread对象（WorkerThread类实现了Runnable 接口）</span>
            <span class="token class-name">Runnable</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//执行Runnable</span>
            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//终止线程池</span>
        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finished all threads use:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h1>几个常见的对比</h1>
<h2>Runnable vs Callable</h2>
<p>这两者最明显的区别就是一个有返回值而另一个没有返回值，具体示例如下所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 无返回值的线程使用示例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutorDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">//    开10个每个线程5s并行5s搞定</span>
<span class="token comment">//    private static final int CORE_POOL_SIZE = 10;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">QUEUE_CAPACITY</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">KEEP_ALIVE_TIME</span> <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//使用阿里巴巴推荐的创建线程池的方式</span>
        <span class="token comment">//通过ThreadPoolExecutor构造函数自定义参数创建</span>
        <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
                <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">,</span>
                <span class="token constant">MAX_POOL_SIZE</span><span class="token punctuation">,</span>
                <span class="token constant">KEEP_ALIVE_TIME</span><span class="token punctuation">,</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">QUEUE_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//创建WorkerThread对象（WorkerThread类实现了Runnable 接口）</span>
            <span class="token class-name">Runnable</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//执行Runnable</span>
            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//终止线程池</span>
        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finished all threads use:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 带返回值的线程使用示例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">ExecutorService</span> es <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> es<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token string">"future result"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//简单示例下记得关闭线程池</span>
            es<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>需要补充的是runnable是可以是可以转换为带返回值的任务的，具体可参照如下代码</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * runable改造后带返回值的线程池使用示例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutorDemo</span> <span class="token punctuation">{</span>

<span class="token comment">//    private static final int CORE_POOL_SIZE = 5;</span>
    <span class="token comment">//    开10个每个线程5s并行5s搞定</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">QUEUE_CAPACITY</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">KEEP_ALIVE_TIME</span> <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//使用阿里巴巴推荐的创建线程池的方式</span>
        <span class="token comment">//通过ThreadPoolExecutor构造函数自定义参数创建</span>
        <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
                <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">,</span>
                <span class="token constant">MAX_POOL_SIZE</span><span class="token punctuation">,</span>
                <span class="token constant">KEEP_ALIVE_TIME</span><span class="token punctuation">,</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">QUEUE_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&gt;</span></span> futureList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//创建WorkerThread对象（WorkerThread类实现了Runnable 接口）</span>
            <span class="token class-name">Callable</span> worker <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">callable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseTask</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//执行Runnable</span>
            <span class="token class-name">Future</span> future <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
            futureList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> futureList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//终止线程池</span>
        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finished all threads use:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>前者是提交无返回值的任务，而后者则是提交带返回值任务的，具体示例也可以参照上文</p>
<h1>线程池使用注意事项</h1>
<p>在使用线程池过程中，我们必须记得将父线程和子线程进行线程池隔离，否则可能出现所有父线程都在执行过程中，则子线程都在排队，导致父线程必须等待子线程执行完才能释放线程，而子线程必须等待父线程归还线程才能从任务队列中被取出执行，这就是著名的线程死锁。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220920053312954.png" alt="image-20220920053312954"></p>
<h1>如何debug线程池</h1>
<p>说了这么多，我们不妨补充一个调试多线程的方法，以下代码为例，笔者将会通过idea完成对线程1的debug</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DebugRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> currentThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>currentThread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> "</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220920053221748.png" type="image/png"/>
    </item>
    <item>
      <title>谈谈ThreadLocal</title>
      <link>https://maijunxuan.cn/JUC/%E8%B0%88%E8%B0%88ThreadLocal.html</link>
      <guid>https://maijunxuan.cn/JUC/%E8%B0%88%E8%B0%88ThreadLocal.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">谈谈ThreadLocal</source>
      <description>谈谈ThreadLocal ThreadLocal是什么 ThreadLocal是一个将在多线程中为每一个线程创建单独的变量副本的类; 当使用ThreadLocal来维护变量时, ThreadLocal会为每个线程创建单独的变量副本, 避免因多线程操作共享变量而导致的数据不一致的情况; ThreadLocal类用在哪些场景 一般来说, ThreadLo...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>ThreadLocal是什么</h2>
<p><code>ThreadLocal</code>是一个将在多线程中为每一个线程创建单独的变量副本的类; 当使用ThreadLocal来维护变量时, <code>ThreadLocal</code>会为每个线程创建单独的变量副本, 避免因多线程操作共享变量而导致的数据不一致的情况;</p>
<h2>ThreadLocal类用在哪些场景</h2>
<p>一般来说, <code>ThreadLocal</code>在实际工业生产中并不常见, 但是在很多框架中使用却能够解决一些框架问题; 比如Spring中的事务、Spring 中 作用域 <code>Scope</code> 为 <code>Request的Bean</code> 使用ThreadLocal来解决.</p>
<h2>ThreadLocal使用方法</h2>
<p>1、将需要被多线程访问的属性使用ThreadLocal变量来定义; 下面以网上多数举例的DBConnectionFactory类为例来举例</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DBConnectionFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span> dbConnectionLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token class-name">Connection</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> dbConnectionLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样在Client获取Connection的时候, 每个线程获取到的Connection都是该线程独有的, 做到Connection的线程隔离; 所以并不存在线程安全问题</p>
<h2>ThreadLocal如何实现线程隔离</h2>
<p>1、主要是用到了Thread对象中的一个ThreadLocalMap类型的变量threadLocals, 负责存储当前线程的关于Connection的对象, 以<code>dbConnectionLocal</code> 这个变量为Key, 以<code>新建的Connection</code>对象为Value; 这样的话, 线程第一次读取的时候如果不存在就会调用<code>ThreadLocal</code>的<code>initialValue</code>方法创建一个Connection对象并且返回;</p>
<p>具体关于为线程分配变量副本的代码如下:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
            <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>1、首先获取当前线程对象<code>t</code>, 然后从线程<code>t</code>中获取到<code>ThreadLocalMap</code>的成员属性<code>threadLocals</code></p>
<p>2、如果当前线程的<code>threadLocals</code>已经初始化(即不为<code>null</code>) 并且存在以当前ThreadLocal对象为Key的值, 则直接返回当前线程要获取的对象(本例中为Connection);</p>
<p>3、如果当前线程的<code>threadLocals</code>已经初始化(即不为<code>null</code>)但是不存在以当前ThreadLocal对象为Key的的对象, 那么重新创建一个Connection对象, 并且添加到当前线程的threadLocals Map中,并返回</p>
<p>4、如果当前线程的<code>threadLocals</code>属性还没有被初始化, 则重新创建一个ThreadLocalMap对象, 并且创建一个Connection对象并添加到ThreadLocalMap对象中并返回。</p>
<p>如果存在则直接返回很好理解, 那么对于如何初始化的代码又是怎样的呢?</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>1、首先调用我们上面写的重载过后的<code>initialValue</code>方法, 产生一个Connection对象</p>
<p>2、继续查看当前线程的<code>threadLocals</code>是不是空的, 如果ThreadLocalMap已被初始化, 那么直接将产生的对象添加到ThreadLocalMap中, 如果没有初始化, 则创建并添加对象到其中;</p>
<p>同时, ThreadLocal还提供了直接操作Thread对象中的threadLocals的方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样我们也可以不实现<code>initialValue</code>, 将初始化工作放到<code>DBConnectionFactory</code>的<code>getConnection</code>方法中:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dbConnectionLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dbConnectionLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>那么我们看过代码之后就很清晰的知道了为什么ThreadLocal能够实现变量的多线程隔离了; 其实就是用了Map的数据结构给当前线程缓存了, 要使用的时候就从本线程的threadLocals对象中获取就可以了, key就是当前线程;</p>
<p>当然了在当前线程下获取当前线程里面的Map里面的对象并操作肯定没有线程并发问题了, 当然能做到变量的线程间隔离了;</p>
<p>现在我们知道了ThreadLocal到底是什么了, 又知道了如何使用ThreadLocal以及其基本实现原理了是不是就可以结束了呢? 其实还有一个问题就是ThreadLocalMap是个什么对象, 为什么要用这个对象呢?</p>
<h2>ThreadLocalMap对象是什么</h2>
<p>本质上来讲, 它就是一个Map, 但是这个<code>ThreadLocalMap</code>与我们平时见到的<code>Map</code>有点不一样</p>
<p>1、它没有实现<code>Map</code>接口;</p>
<p>2、它没有public的方法, 最多有一个default的构造方法, 因为这个ThreadLocalMap的方法仅仅在ThreadLocal类中调用, 属于静态内部类</p>
<p>3、ThreadLocalMap的Entry实现继承了<code>WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</code></p>
<p>4、该方法仅仅用了一个Entry数组来存储Key, Value; Entry并不是链表形式, 而是每个bucket里面仅仅放一个Entry;</p>
<p>要了解ThreadLocalMap的实现, 我们先从入口开始, 就是往该Map中添加一个值:</p>
<div class="language-processing" data-ext="processing" data-title="processing"><pre class="language-processing"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token type class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> key<span class="token punctuation">,</span> <span class="token type class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// We don't use a fast path as with get() because it is at</span>
    <span class="token comment">// least as common to use set() to create new entries as</span>
    <span class="token comment">// it is to replace existing ones, in which case, a fast</span>
    <span class="token comment">// path would fail more often than not.</span>

    <span class="token type class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>
    <span class="token type class-name">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token type class-name">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token type class-name">Entry</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
         e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
         e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token type class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">replaceStaleEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token type class-name">int</span> sz <span class="token operator">=</span> <span class="token operator">+</span><span class="token operator">+</span>size<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sz <span class="token operator">&gt;=</span> threshold<span class="token punctuation">)</span>
        <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>先进行简单的分析, 对该代码表层意思进行解读:</p>
<div class="language-autohotkey" data-ext="autohotkey" data-title="autohotkey"><pre class="language-autohotkey"><code><span class="token number">1</span>、看下当前threadLocal的在数组中的索引位置 比如<span class="token punctuation">:</span> `i <span class="token operator">=</span> <span class="token number">2</span>`<span class="token punctuation">,</span> 看 `i <span class="token operator">=</span> <span class="token number">2</span>` <span class="token function">位置上面的元素</span><span class="token punctuation">(</span>Entry<span class="token punctuation">)</span>的`Key`是否等于threadLocal 这个 Key<span class="token punctuation">,</span> 如果等于就很好说了<span class="token punctuation">,</span> 直接将该位置上面的Entry的Value替换成最新的就可以了;

<span class="token number">2</span>、如果当前位置上面的 Entry 的 Key为空<span class="token punctuation">,</span> 说明ThreadLocal对象已经被回收了<span class="token punctuation">,</span> 那么就调用replaceStaleEntry

<span class="token number">3</span><span class="token function">、如果清理完无用条目</span><span class="token punctuation">(</span>ThreadLocal被回收的条目<span class="token punctuation">)</span>、并且数组中的数据大小 <span class="token operator">&gt;</span> 阈值的时候对当前的Table进行重新哈希
</code></pre></div><p><strong>所以, 该HashMap是处理冲突检测的机制是向后移位, 清除过期条目 最终找到合适的位置;</strong></p>
<p>了解完Set方法, 后面就是Get方法了:</p>
<div class="language-sas" data-ext="sas" data-title="sas"><pre class="language-sas"><code>private Entry <span class="token function keyword">getEntry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span>?<span class="token operator">&gt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    int i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Entry e <span class="token operator">=</span> <span class="token keyword">table</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!</span><span class="token operator">=</span> null <span class="token operator">&amp;</span><span class="token operator">&amp;</span> e<span class="token punctuation">.</span><span class="token function keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span> key<span class="token punctuation">)</span>
        <span class="token keyword">return</span> e<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token function keyword">getEntryAfterMiss</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>先找到ThreadLocal的索引位置, 如果索引位置处的entry不为空并且键与threadLocal是同一个对象, 则直接返回; 否则去后面的索引位置继续查找;</p>
<h2>过期key的清理过程</h2>
<p>上面我们有提及<code>ThreadLocalMap</code>的两种过期<code>key</code>数据清理方式：<strong>探测式清理</strong>和<strong>启发式清理</strong>。</p>
<p>我们先讲下探测式清理，也就是<code>expungeStaleEntry</code>方法，遍历散列数组，从开始位置向后探测清理过期数据，将过期数据的<code>Entry</code>设置为<code>null</code>，沿途中碰到未过期的数据则将此数据<code>rehash</code>后重新在<code>table</code>数组中定位，如果定位的位置已经有了数据，则会将未过期的数据放到最靠近此位置的<code>Entry=null</code>的桶中，使<code>rehash</code>后的<code>Entry</code>数据距离正确的桶的位置更近一些。操作逻辑如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209070319433.png" alt="img"></p>
<p>如上图，<code>set(27)</code> 经过 hash 计算后应该落到<code>index=4</code>的桶中，由于<code>index=4</code>桶已经有了数据，所以往后迭代最终数据放入到<code>index=7</code>的桶中，放入后一段时间后<code>index=5</code>中的<code>Entry</code>数据<code>key</code>变为了<code>null</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209070319813.png" alt="img"></p>
<p>如果再有其他数据<code>set</code>到<code>map</code>中，就会触发<strong>探测式清理</strong>操作。</p>
<p>如上图，执行<strong>探测式清理</strong>后，<code>index=5</code>的数据被清理掉，继续往后迭代，到<code>index=7</code>的元素时，经过<code>rehash</code>后发现该元素正确的<code>index=4</code>，而此位置已经有了数据，往后查找离<code>index=4</code>最近的<code>Entry=null</code>的节点(刚被探测式清理掉的数据：<code>index=5</code>)，找到后移动<code>index= 7</code>的数据到<code>index=5</code>中，此时桶的位置离正确的位置<code>index=4</code>更近了。</p>
<p>经过一轮探测式清理后，<code>key</code>过期的数据会被清理掉，没过期的数据经过<code>rehash</code>重定位后所处的桶位置理论上更接近<code>i= key.hashCode &amp; (tab.len - 1)</code>的位置。这种优化会提高整个散列表查询性能。</p>
<p>接着看下<code>expungeStaleEntry()</code>具体流程，我们还是以先原理图后源码讲解的方式来一步步梳理：</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209070319474.png" alt="img"></p>
<p>我们假设<code>expungeStaleEntry(3)</code> 来调用此方法，如上图所示，我们可以看到<code>ThreadLocalMap</code>中<code>table</code>的数据情况，接着执行清理操作：</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209070319691.png" alt="img"></p>
<p>第一步是清空当前<code>staleSlot</code>位置的数据，<code>index=3</code>位置的<code>Entry</code>变成了<code>null</code>。然后接着往后探测：</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209070319870.png" alt="img"></p>
<p>执行完第二步后，index=4 的元素挪到 index=3 的槽位中。</p>
<p>继续往后迭代检查，碰到正常数据，计算该数据位置是否偏移，如果被偏移，则重新计算<code>slot</code>位置，目的是让正常数据尽可能存放在正确位置或离正确位置更近的位置</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209070319042.png" alt="img"></p>
<p>在往后迭代的过程中碰到空的槽位，终止探测，这样一轮探测式清理工作就完成了，接着我们继续看看具体<strong>实现源代码</strong>：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> staleSlot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

    tab<span class="token punctuation">[</span>staleSlot<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    tab<span class="token punctuation">[</span>staleSlot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    size<span class="token operator">--</span><span class="token punctuation">;</span>

    <span class="token class-name">Entry</span> e<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>staleSlot<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
         i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            size<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> h <span class="token operator">=</span> k<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

                <span class="token keyword">while</span> <span class="token punctuation">(</span>tab<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    h <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
                tab<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这里我们还是以<code>staleSlot=3</code> 来做示例说明，首先是将<code>tab[staleSlot]</code>槽位的数据清空，然后设置<code>size--</code> 接着以<code>staleSlot</code>位置往后迭代，如果遇到<code>k==null</code>的过期数据，也是清空该槽位数据，然后<code>size--</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果<code>key</code>没有过期，重新计算当前<code>key</code>的下标位置是不是当前槽位下标位置，如果不是，那么说明产生了<code>hash</code>冲突，此时以新计算出来正确的槽位位置往后迭代，找到最近一个可以存放<code>entry</code>的位置。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> h <span class="token operator">=</span> k<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>tab<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        h <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    tab<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这里是处理正常的产生<code>Hash</code>冲突的数据，经过迭代后，有过<code>Hash</code>冲突数据的<code>Entry</code>位置会更靠近正确位置，这样的话，查询的时候 效率才会更高。</p>
<h2>使用ThreadLocal造成内存泄露</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingQueue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LocalVariable</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// (1)</span>
    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">ThreadPoolExecutor</span> poolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// (2)</span>
    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocalVariable</span><span class="token punctuation">&gt;</span></span> localVariable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocalVariable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// (3)</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            poolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// (4)</span>
                    localVariable<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LocalVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// (5)</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"use local varaible"</span> <span class="token operator">+</span> localVariable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    localVariable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// (6)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pool execute over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我在网上找到一个样例, 如果用线程池来操作<code>ThreadLocal </code>对象确实会造成内存泄露, 因为对于线程池里面不会销毁的线程, 里面总会存在着&lt;ThreadLocal, LocalVariable&gt;的强引用, 因为<code>final static</code> 修饰的 <code>ThreadLocal</code> 并不会释放, 而<code>ThreadLocalMap</code> 对于 Key 虽然是弱引用, 但是强引用不会释放, 弱引用当然也会一直有值, 同时创建的<code>LocalVariable</code>对象也不会释放, 就造成了内存泄露; 如果<code>LocalVariable</code>对象不是一个大对象的话, 其实泄露的并不严重, <code>泄露的内存 = 核心线程数 * LocalVariable对象的大小</code>;</p>
<p>所以, 为了避免出现内存泄露的情况, ThreadLocal提供了一个清除线程中对象的方法, 即 <code>remove</code>, 其实内部实现就是调用 <code>ThreadLocalMap</code> 的<code>remove</code>方法:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
         e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
         e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>找到Key对应的Entry, 并且清除Entry的Key(ThreadLocal)置空, 随后清除过期的Entry即可避免内存泄露</p>
<h2>常见方法</h2>
<h3>set(T value) 方法</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>set(T value) 方法中，首先获取当前线程，然后在获取到当前线程的 ThreadLocalMap，如果 ThreadLocalMap 不为 null，则将 value 保存到 ThreadLocalMap 中，并用当前 ThreadLocal 作为 key；否则创建一个 ThreadLocalMap 并给到当前线程，然后保存 value。</p>
<p>ThreadLocalMap 相当于一个 HashMap，是真正保存值的地方。</p>
<h3>get() 方法</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
            <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>同样的，在 get() 方法中也会获取到当前线程的 ThreadLocalMap，如果 ThreadLocalMap 不为 null，则把获取 key 为当前 ThreadLocal 的值；否则调用 setInitialValue() 方法返回初始值，并保存到新创建的 ThreadLocalMap 中。</p>
<h3>initialValue() 方法：</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>initialValue() 是 ThreadLocal 的初始值，默认返回 null，子类可以重写改方法，用于设置 ThreadLocal 的初始值。</p>
<h3>remove() 方法</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ThreadLocalMap</span> m <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>ThreadLocal 还有一个 remove() 方法，用来移除当前 ThreadLocal 对应的值。同样也是同过当前线程的 ThreadLocalMap 来移除相应的值。</p>
<h2>InheritableThreadLocal</h2>
<p>我们使用<code>ThreadLocal</code>的时候，在异步场景下是无法给子线程共享父线程中创建的线程副本数据的。</p>
<p>为了解决这个问题，JDK 中还有一个<code>InheritableThreadLocal</code>类，我们来看一个例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InheritableThreadLocalDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ThreadLocal</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> inheritableThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"父类数据:threadLocal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inheritableThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"父类数据:inheritableThreadLocal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程获取父类ThreadLocal数据："</span> <span class="token operator">+</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程获取父类inheritableThreadLocal数据："</span> <span class="token operator">+</span> inheritableThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>打印结果：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>子线程获取父类<span class="token class-name">ThreadLocal</span>数据：<span class="token keyword">null</span>
子线程获取父类inheritableThreadLocal数据：父类数据<span class="token operator">:</span>inheritableThreadLocal
</code></pre></div><p>实现原理是子线程是通过在父线程中通过调用<code>new Thread()</code>方法来创建子线程，<code>Thread#init</code>方法在<code>Thread</code>的构造方法中被调用。在<code>init</code>方法中拷贝父线程数据到子线程中：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>
                      <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">,</span>
                      <span class="token keyword">boolean</span> inheritThreadLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"name cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>inheritThreadLocals <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span>
            <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">createInheritedMap</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>stackSize <span class="token operator">=</span> stackSize<span class="token punctuation">;</span>
    tid <span class="token operator">=</span> <span class="token function">nextThreadID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>但<code>InheritableThreadLocal</code>仍然有缺陷，一般我们做异步化处理都是使用的线程池，而<code>InheritableThreadLocal</code>是在<code>new Thread</code>中的<code>init()</code>方法给赋值的，而线程池是线程复用的逻辑，所以这里会存在问题。</p>
<p>当然，有问题出现就会有解决问题的方案，阿里巴巴开源了一个<code>TransmittableThreadLocal</code>组件就可以解决这个问题</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209070319433.png" type="image/png"/>
    </item>
    <item>
      <title>Explain语句</title>
      <link>https://maijunxuan.cn/MySQL/Explain%E8%AF%AD%E5%8F%A5.html</link>
      <guid>https://maijunxuan.cn/MySQL/Explain%E8%AF%AD%E5%8F%A5.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Explain语句</source>
      <description>Explain语句 EXPLAIN使用 explain可用来分析SQL的执行计划。格式如下： 结果输出展示： 结果解读 id 该语句的唯一标识。如果explain的结果包括多个id值，则数字越大越先执行；而对于相同id的行，则表示从上往下依次执行。 select_type 查询类型，有如下几种取值： table 表示当前这一行正在访问哪张表，如果SQL...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>EXPLAIN使用</h2>
<p>explain可用来分析SQL的执行计划。格式如下：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>{EXPLAIN | DESCRIBE | DESC}
    tbl_name [col_name | wild]

{EXPLAIN | DESCRIBE | DESC}
    [explain_type]
    {explainable_stmt | FOR CONNECTION connection_id}

{EXPLAIN | DESCRIBE | DESC} ANALYZE select_statement    

explain_type: {
    FORMAT = format_name
}

format_name: {
    TRADITIONAL
  | JSON
  | TREE
}

explainable_stmt: {
    SELECT statement
  | TABLE statement
  | DELETE statement
  | INSERT statement
  | REPLACE statement
  | UPDATE statement
}
</code></pre></div><p>结果输出展示：</p>
<p>| 字段              | format=json时的名称 | 含义                         |
| :</p>
]]></content:encoded>
    </item>
    <item>
      <title>MVCC实现原理</title>
      <link>https://maijunxuan.cn/MySQL/MVCC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html</link>
      <guid>https://maijunxuan.cn/MySQL/MVCC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">MVCC实现原理</source>
      <description>MVCC实现原理 一、什么是多版本并发控制 多版本并发控制技术的英文全称是 Multiversion Concurrency Control，简称 MVCC。 多版本并发控制（MVCC） 是通过保存数据在某个时间点的快照来实现并发控制的。也就是说，不管事务执行多长时间，事务内部看到的数据是不受其它事务影响的，根据事务开始的时间不同，每个事务对同一张表，...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>一、什么是多版本并发控制</h2>
<p><strong>多版本并发控制</strong>技术的英文全称是 <strong>Multiversion Concurrency Control</strong>，简称 <strong>MVCC</strong>。</p>
<p><strong>多版本并发控制（MVCC）</strong> 是通过保存数据在某个时间点的快照来实现并发控制的。也就是说，不管事务执行多长时间，事务内部看到的数据是不受其它事务影响的，根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。</p>
<p>简单来说，<strong>多版本并发控制</strong> 的思想就是保存数据的历史版本，通过对数据行的多个版本管理来实现数据库的并发控制。这样我们就可以通过比较版本号决定数据是否显示出来，读取数据的时候不需要加锁也可以保证事务的隔离效果。</p>
<p>可以认为 <strong>多版本并发控制（MVCC）</strong> 是行级锁的一个变种，但是它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。</p>
<p>MySQL的大多数事务型存储引擎实现的都不是简单的行级锁。基于提升并发性能的考虑，它们一般都同时实现了多版本并发控制（MVCC）。不仅是MySQL，包括Oracle、PostgreSQL等其他数据库系统也都实现了MVCC，但各自的实现机制不尽相同，因为MVCC没有一个统一的实现标准，典型的有<strong>乐观（optimistic）并发控制</strong>和<strong>悲观（pessimistic）并发控制</strong>。</p>
<h2>二、多版本并发控制解决了哪些问题</h2>
<h3>1. 读写之间阻塞的问题</h3>
<p>通过 MVCC 可以让读写互相不阻塞，即读不阻塞写，写不阻塞读，这样就可以提升事务并发处理能力。</p>
<blockquote>
<p>提高并发的演进思路：</p>
<ul>
<li>普通锁，只能串行执行；</li>
<li>读写锁，可以实现读读并发；</li>
<li>数据多版本并发控制，可以实现读写并发。</li>
</ul>
</blockquote>
<h3>2. 降低了死锁的概率</h3>
<p>因为 InnoDB 的 MVCC 采用了乐观锁的方式，读取数据时并不需要加锁，对于写操作，也只锁定必要的行。</p>
<h3>3. 解决一致性读的问题</h3>
<p>一致性读也被称为<strong>快照读</strong>，当我们查询数据库在某个时间点的快照时，只能看到这个时间点之前事务提交更新的结果，而不能看到这个时间点之后事务提交的更新结果。</p>
<h2>三、快照读与当前读</h2>
<p><strong>快照读（SnapShot Read）</strong> 是一种<strong>一致性不加锁的读</strong>，是<strong>InnoDB并发如此之高的核心原因之一</strong>。</p>
<blockquote>
<p>这里的<strong>一致性</strong>是指，事务读取到的数据，要么是<strong>事务开始前就已经存在的数据</strong>，要么是<strong>事务自身插入或者修改过的数据</strong>。</p>
</blockquote>
<p>不加锁的简单的 SELECT 都属于<strong>快照读</strong>，例如：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token identifier"><span class="token punctuation">`</span>SELECT * FROM t WHERE id=1<span class="token punctuation">`</span></span>
</code></pre></div><p>与 <strong>快照读</strong> 相对应的则是 <strong>当前读</strong>，<strong>当前读</strong>就是读取最新数据，而不是历史版本的数据。加锁的 SELECT 就属于当前读，例如：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span>
</code></pre></div><h2>四、InnoDB 的 MVCC 是如何工作的</h2>
<h3>1. InnoDB 是如何存储记录的多个版本的</h3>
<h4>事务版本号</h4>
<p>每开启一个事务，我们都会从数据库中获得一个事务 ID（也就是事务版本号），这个事务 ID 是自增长的，通过 ID 大小，我们就可以判断事务的时间顺序。</p>
<h4>行记录的隐藏列</h4>
<p>InnoDB 的叶子段存储了数据页，数据页中保存了行记录，而在行记录中有一些重要的隐藏字段：</p>
<ul>
<li><code>DB_ROW_ID</code>：6-byte，隐藏的行 ID，用来生成默认聚簇索引。如果我们创建数据表的时候没有指定聚簇索引，这时 InnoDB 就会用这个隐藏 ID 来创建聚集索引。采用聚簇索引的方式可以提升数据的查找效率。</li>
<li><code>DB_TRX_ID</code>：6-byte，操作这个数据的事务 ID，也就是最后一个对该数据进行插入或更新的事务 ID。</li>
<li><code>DB_ROLL_PTR</code>：7-byte，回滚指针，也就是指向这个记录的 Undo Log 信息。</li>
</ul>
<p><img src="http://segmentfault.com/img/bVbyzVU" alt="InnoDB数据记录隐藏列"></p>
<h4>Undo Log</h4>
<p>InnoDB 将行记录快照保存在了 Undo Log 里，我们可以在回滚段中找到它们，如下图所示：</p>
<p><img src="http://segmentfault.com/img/bVbyzV9" alt="Undo Log回滚历史记录"></p>
<p>从图中能看到回滚指针将数据行的所有快照记录都通过链表的结构串联了起来，每个快照的记录都保存了当时的 db_trx_id，也是那个时间点操作这个数据的事务 ID。这样如果我们想要找历史快照，就可以通过遍历回滚指针的方式进行查找。</p>
<h3>2. 在 <strong>可重复读（REPEATABLE READ）</strong> 隔离级别下， InnoDB 的 MVCC 是如何工作的</h3>
<h4>查询（SELECT）</h4>
<p>InnoDB 会根据以下两个条件检查每行记录：</p>
<ol>
<li>InnoDB只查找版本早于当前事务版本的数据行（也就是，行的系统版本号小于或等于事务的系统版本号），这样可以<strong>确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的</strong>。</li>
<li>行的删除版本要么未定义，要么大于当前事务版本号。这可以确保<strong>事务读取到的行，在事务开始之前未被删除</strong>。</li>
</ol>
<p>只有符合上述两个条件的记录，才能返回作为查询结果。</p>
<h4>插入（INSERT）</h4>
<p>InnoDB为新插入的每一行保存当前系统版本号作为行版本号。</p>
<h4>删除（DELETE）</h4>
<p>InnoDB为删除的每一行保存当前系统版本号作为行删除标识。
删除在内部被视为更新，行中的一个特殊位会被设置为已删除。</p>
<h4>更新（UPDATE）</h4>
<p>InnoDB为插入一行新记录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识。</p>
<h2>五、总结</h2>
<p><strong>多版本并发控制（MVCC）</strong> 在一定程度上实现了<strong>读写并发</strong>，它只在 <strong>可重复读（REPEATABLE READ）</strong> 和 <strong>提交读（READ COMMITTED）</strong> 两个隔离级别下工作。其他两个隔离级别都和 MVCC 不兼容，因为 <strong>未提交读（READ UNCOMMITTED）</strong>，总是读取最新的数据行，而不是符合当前事务版本的数据行。而 <strong>可串行化（SERIALIZABLE）</strong> 则会对所有读取的行都加锁。</p>
<p><strong>行锁，并发，事务回滚</strong>等多种特性都和MVCC相关。</p>
]]></content:encoded>
      <enclosure url="http://segmentfault.com/img/bVbyzVU" type="image/"/>
    </item>
    <item>
      <title></title>
      <link>https://maijunxuan.cn/MySQL/MySQL%E4%B8%ADdatetime%E5%92%8Ctimestamp%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%80%89%E6%8B%A9.html</link>
      <guid>https://maijunxuan.cn/MySQL/MySQL%E4%B8%ADdatetime%E5%92%8Ctimestamp%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%80%89%E6%8B%A9.html</guid>
      <source url="https://maijunxuan.cn/rss.xml"></source>
      <description>MySQL 中 datetime 和 timestamp 的区别与选择 1 区别 1.1 占用空间 1.2 表示范围 timestamp翻译为汉语即&amp;quot;时间戳&amp;quot;，它是当前时间到 Unix元年(1970 年 1 月 1 日 0 时 0 分 0 秒)的秒数。对于某些时间的计算，如果是以 datetime 的形式会比较困难，假如我是 1994-1-20 06:...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2>MySQL 中 datetime 和 timestamp 的区别与选择</h2>
<h3>1 区别</h3>
<h4>1.1 占用空间</h4>
<p>| 类型      | 占据字节 | 表示形式            |
|</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207152053364.png" type="image/png"/>
    </item>
    <item>
      <title>MySQL中的事务</title>
      <link>https://maijunxuan.cn/MySQL/MySQL%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1.html</link>
      <guid>https://maijunxuan.cn/MySQL/MySQL%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">MySQL中的事务</source>
      <description>MySQL中的事务 如何使用 MySQL的服务层不管理事务，而是由下层的存储引擎实现。比如InnoDB。 MySQL支持本地事务的语句： START TRANSACTION 或 BEGIN 语句：开始一项新的事务。 COMMIT 和 ROLLBACK：用来提交或者回滚事务。 CHAIN 和 RELEASE 子句：分别用来定义在事务提交或者回滚之后的操作...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>如何使用</h2>
<p>MySQL的服务层不管理事务，而是由下层的存储引擎实现。比如InnoDB。</p>
<p><strong>MySQL支持本地事务的语句：</strong></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>START TRANSACTION | BEGIN [WORK] 
COMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE] 
ROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE] 
SET AUTOCOMMIT = {0 | 1}
</code></pre></div><ul>
<li>START TRANSACTION 或 BEGIN 语句：开始一项新的事务。</li>
<li>COMMIT 和 ROLLBACK：用来提交或者回滚事务。</li>
<li>CHAIN 和 RELEASE 子句：分别用来定义在事务提交或者回滚之后的操作，CHAIN 会立即启动一个新事物，并且和刚才的事务具有相同的隔离级别，RELEASE 则会断开和客户端的连接。</li>
<li>SET AUTOCOMMIT 可以修改当前连接的提交方式， 如果设置了 SET AUTOCOMMIT=0，则设置之后的所有事务都需要通过明确的命令进行提交或者回滚</li>
</ul>
<p><strong>事务使用注意点：</strong></p>
<ul>
<li>如果在锁表期间，用 start transaction 命令开始一个新事务，会造成一个隐含的 unlock
tables 被执行。</li>
<li>在同一个事务中，最好不使用不同存储引擎的表，否则 ROLLBACK 时需要对非事
务类型的表进行特别的处理，因为 COMMIT、ROLLBACK 只能对事务类型的表进行提交和回滚。</li>
<li>和 Oracle 的事务管理相同，所有的 DDL 语句是不能回滚的，并且部分的 DDL 语句会造成隐式的提交。</li>
<li>在事务中可以通过定义 SAVEPOINT（例如：mysql&gt; savepoint test; 定义 savepoint，名称为 test），指定回滚事务的一个部分，但是不能指定提交事务的一个部分。对于复杂的应用，可以定义多个不同的 SAVEPOINT，满足不同的条件时，回滚
不同的 SAVEPOINT。需要注意的是，如果定义了相同名字的 SAVEPOINT，则后面定义的SAVEPOINT 会覆盖之前的定义。对于不再需要使用的 SAVEPOINT，可以通过 RELEASE SAVEPOINT 命令删除 SAVEPOINT， 删除后的 SAVEPOINT， 不能再执行 ROLLBACK TO SAVEPOINT命令。</li>
</ul>
<p><strong>自动提交（autocommit）：</strong>
Mysql默认采用自动提交模式，可以通过设置autocommit变量来启用或禁用自动提交模式</p>
<ul>
<li><strong>隐式锁定</strong></li>
</ul>
<p>InnoDB在事务执行过程中，使用两阶段锁协议：</p>
<p>随时都可以执行锁定，InnoDB会根据隔离级别在需要的时候自动加锁；</p>
<p>锁只有在执行commit或者rollback的时候才会释放，并且所有的锁都是在<strong>同一时刻</strong>被释放。</p>
<ul>
<li><strong>显式锁定</strong></li>
</ul>
<p>InnoDB也支持通过特定的语句进行显示锁定（存储引擎层）：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>select ... lock in share mode //共享锁 
select ... for update //排他锁 
</code></pre></div><p>MySQL Server层的显示锁定：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>lock table和unlock table
</code></pre></div><h2><strong>事务隔离级别</strong></h2>
<p>SQL 标准定义了四种隔离级别，MySQL 全都支持。这四种隔离级别分别是：</p>
<ol>
<li>读未提交（READ UNCOMMITTED）</li>
<li>读提交 （READ COMMITTED）</li>
<li>可重复读 （REPEATABLE READ）</li>
<li>串行化 （SERIALIZABLE）</li>
</ol>
<p>从上往下，隔离强度逐渐增强，性能逐渐变差。采用哪种隔离级别要根据系统需求权衡决定，其中，<strong>可重复读</strong>是 MySQL 的默认级别。</p>
<p>事务隔离其实就是为了解决上面提到的脏读、不可重复读、幻读这几个问题，下面展示了 4 种隔离级别对这三个问题的解决程度。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209071634546.png" alt="img"></p>
<h2>什么是ACID</h2>
<p>一个事务有四个基本特性，也就是我们常说的（ACID）：</p>
<ol>
<li><strong>Atomicity（原子性）</strong>：事务是一个不可分割的整体，事务内所有操作要么全做成功，要么全失败。</li>
<li><strong>Consistency（一致性）</strong>：务执行前后，数据从一个状态到另一个状态必须是一致的（A向B转账，不能出现A扣了钱，B却没收到）。</li>
<li><strong>Isolation（隔离性a）</strong>： 多个并发事务之间相互隔离，不能互相干扰。</li>
<li><strong>Durability（持久性）</strong>：事务完成后，对数据库的更改是永久保存的，不能回滚。</li>
</ol>
<h2>ACID靠什么保证的呢？</h2>
<p>以MySQL为例：</p>
<p><strong>A原子性</strong>由undo log日志保证，它记录了需要回滚的日志信息，事务回滚时撤销已经执行成功的sql</p>
<p><strong>C一致性</strong>一般由代码层面来保证</p>
<p><strong>I隔离性</strong>由锁和MVCC来保证</p>
<p><strong>D持久性</strong>由内存+redo log来保证，mysql修改数据同时在内存和redo log记录这次操作，事务提交的时候通过redo log刷盘，宕机的时候可以从redo log恢复</p>
<h2><strong>并发事务带来的问题</strong></h2>
<ul>
<li>更新丢失（Lost Update）：当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题 －－最后的更新覆盖了由其他事务所做的更新。例如，两个编辑人员制作了同一 文档的电子副本。每个编辑人员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。 最后保存其更改副本的编辑人员覆盖另一个编辑人员所做的更改。如果在一个编辑人员完成并提交事务之前，另一个编辑人员不能访问同 一文件，则可避免此问题。</li>
<li>脏读（Dirty Reads）：一个事务正在对一条记录做修改，在这个事务完成并提交前， 这条记录的数据就处于不一致状态； 这时， 另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做"脏读"。</li>
<li>不可重复读（Non-Repeatable Reads）：一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读” 。</li>
<li>幻读 （Phantom Reads）： 一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读” 。</li>
</ul>
<h2><strong>幻读和不可重复读的区别：</strong></h2>
<ul>
<li>不可重复读的重点是修改：在同一事务中，同样的条件，第一次读的数据和第二次读的数据不一样。（因为中间有其他事务提交了修改）</li>
<li>幻读的重点在于新增或者删除：在同一事务中，同样的条件,，第一次和第二次读出来的记录数不一样。（因为中间有其他事务提交了插入/删除）</li>
</ul>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209071634546.png" type="image/png"/>
    </item>
    <item>
      <title>MySQL常用语句</title>
      <link>https://maijunxuan.cn/MySQL/MySQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5.html</link>
      <guid>https://maijunxuan.cn/MySQL/MySQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">MySQL常用语句</source>
      <description>MySQL常用语句 登陆时输入mysql -u root -p(不输入密码)，回车输入密码即可进入数据库。 一 、常用操作数据库的命令 二、修改表的命令 三、对数据的操作 1.增加数据(insert)3种方式 2.删除数据 3.更新数据(update) 4.查询数据(select) where 条件后面跟的条件 ​ 关系：&amp;gt;,&amp;lt;,&amp;gt;=,&amp;lt;=,!= ​ ...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[
<p>登陆时输入<code>mysql -u root -p</code>(不输入密码)，回车输入密码即可进入数据库。</p>
<h2>一 、常用操作数据库的命令</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span> 查看所有的数据库
<span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span> 创建一个叫test的数据库
<span class="token keyword">drop</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span>删除一个叫test的数据库
<span class="token keyword">use</span> test<span class="token punctuation">;</span>选中库 <span class="token punctuation">,</span>在建表之前必须要选择数据库
<span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span> 在选中的数据库之中查看所有的表

<span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token punctuation">(</span>字段<span class="token number">1</span> 类型<span class="token punctuation">,</span> 字段<span class="token number">2</span> 类型<span class="token punctuation">)</span><span class="token punctuation">;</span>
例如：<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tbl<span class="token punctuation">(</span>
        id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> 
        title <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> 
        author <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> 
        <span class="token keyword">date</span> <span class="token keyword">DATE</span><span class="token punctuation">,</span> 
        <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> id <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span> 
        
<span class="token keyword">desc</span> 表名<span class="token punctuation">;</span>查看所在的表的字段
<span class="token keyword">drop</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span> 删除表
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">databases</span> 库名<span class="token punctuation">;</span>查看创建库的详细信息
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span> 查看创建表的详细信息
</code></pre></div><h2>二、修改表的命令</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>修改字段类型 <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 字段 字段类型<span class="token punctuation">;</span>
添加新的字段 <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 字段 字段类型
添加字段并指定位置  <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 字段 字段类型   <span class="token keyword">after</span> 字段<span class="token punctuation">;</span>
删除表字段  <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> 字段名<span class="token punctuation">;</span>
修改指定的字段  <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change 原字段名字  新的字段名字 字段类型
</code></pre></div><h2>三、对数据的操作</h2>
<p>1.增加数据(insert)3种方式</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span>，值<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">(</span>很少用<span class="token punctuation">)</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段<span class="token number">1</span>，字段<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span>，值<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>（较常用）
例如：<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl 
    <span class="token punctuation">(</span>title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> <span class="token keyword">date</span><span class="token punctuation">)</span>
    <span class="token keyword">VALUES</span>
    <span class="token punctuation">(</span><span class="token string">"学习 PHP"</span><span class="token punctuation">,</span> <span class="token string">"菜鸟"</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段<span class="token number">1</span>，字段<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span>，值<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>，<span class="token punctuation">(</span>值<span class="token number">1</span>，值<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>，<span class="token punctuation">(</span>值<span class="token number">1</span>，值<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>2.删除数据</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token punctuation">(</span><span class="token keyword">delete</span><span class="token punctuation">)</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件 注意：<span class="token keyword">where</span> 条件必须加，否则数据会被全部删除
</code></pre></div><p>3.更新数据(update)</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">update</span> 表名 <span class="token keyword">set</span>字段<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span> <span class="token keyword">where</span> 条件
</code></pre></div><p>4.查询数据(select)</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> 查询表中的所有数据   <span class="token keyword">select</span> <span class="token operator">*</span> from 表名
 指定数据查询    <span class="token keyword">select</span> 字段 from 表名 
 根据条件查询出来的数据  <span class="token keyword">select</span> 字段 from 表名 <span class="token keyword">where</span> 条件 <span class="token punctuation">(</span>最常用的<span class="token punctuation">)</span>
</code></pre></div><p>where 条件后面跟的条件
​ 关系：&gt;,&lt;,&gt;=,&lt;=,!=
​ 逻辑：or, and
​ 区间：id between 4 and 6 ;闭区间，包含边界
5.排序</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段 <span class="token keyword">from</span> 表 <span class="token keyword">order</span> <span class="token keyword">by</span> 字段  排序关键词<span class="token punctuation">(</span><span class="token keyword">desc</span> <span class="token operator">|</span> <span class="token keyword">asc</span><span class="token punctuation">)</span>
</code></pre></div><p>排序关键词 desc 降序 asc 升序(默认)
5.1 通过字段来排序</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> star <span class="token keyword">order</span> <span class="token keyword">by</span> money <span class="token keyword">desc</span><span class="token punctuation">,</span> age <span class="token keyword">asc</span>
</code></pre></div><p>5.2 多字段排序</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段 <span class="token keyword">from</span> 表 <span class="token keyword">order</span> <span class="token keyword">by</span> 字段<span class="token number">1</span>  <span class="token keyword">desc</span> <span class="token operator">|</span><span class="token keyword">asc</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>字段n <span class="token keyword">desc</span><span class="token operator">|</span> <span class="token keyword">asc</span><span class="token punctuation">;</span>
</code></pre></div><p>6.常用的统计函数 sum，avg，count，max,min</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>只分组<span class="token punctuation">:</span><span class="token keyword">select</span> <span class="token operator">*</span> from 表 <span class="token keyword">group</span> <span class="token keyword">by</span> 字段
例子<span class="token punctuation">:</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">re</span><span class="token punctuation">,</span>sex <span class="token keyword">from</span> star <span class="token keyword">group</span> <span class="token keyword">by</span> sex having re <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
分组统计<span class="token punctuation">:</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token keyword">from</span> star <span class="token keyword">group</span> <span class="token keyword">by</span> sex<span class="token punctuation">;</span>
</code></pre></div><p>7.分组</p>
<p>7.1 使用 GROUP BY</p>
<div class="language-vbnet" data-ext="vbnet" data-title="vbnet"><pre class="language-vbnet"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>
FROM table_name
WHERE column_name <span class="token keyword">operator</span> value
GROUP BY column_name<span class="token punctuation">;</span>
</code></pre></div><p>例如</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee_tbl<span class="token punctuation">;</span>
<span class="token operator">+</span></code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209060153100.gif" type="image/gif"/>
    </item>
    <item>
      <title>MySQL的执行成本怎么算</title>
      <link>https://maijunxuan.cn/MySQL/MySQL%E7%9A%84%E6%89%A7%E8%A1%8C%E6%88%90%E6%9C%AC%E6%80%8E%E4%B9%88%E7%AE%97.html</link>
      <guid>https://maijunxuan.cn/MySQL/MySQL%E7%9A%84%E6%89%A7%E8%A1%8C%E6%88%90%E6%9C%AC%E6%80%8E%E4%B9%88%E7%AE%97.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">MySQL的执行成本怎么算</source>
      <description>MySQL的执行成本怎么算 查询成本组成有哪些。 1.I/O成本 2.CPU成本 3.Mysql规定读取一个页面花费的成本默认是1.0，读取以及检测一条记录是否符合搜索条件的成本默认是0.2。1.0、0.2这些数字称之为成本常数 4.需要注意的是，不管读取记录时需不需要检测是否满足搜索条件，其成本都算是0.2。 单表查询的成本 基于成本的优化步骤 1....</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>查询成本组成有哪些。</h2>
<ul>
<li>1.I/O成本</li>
<li>2.CPU成本</li>
<li>3.Mysql规定读取一个页面花费的成本默认是1.0，读取以及检测一条记录是否符合搜索条件的成本默认是0.2。1.0、0.2这些数字称之为成本常数</li>
<li>4.需要注意的是，不管读取记录时需不需要检测是否满足搜索条件，其成本都算是0.2。</li>
</ul>
<h2>单表查询的成本</h2>
<h3>基于成本的优化步骤</h3>
<ul>
<li>1.在一条单表查询语句真正执行之前，MySQL的查询优化器会找出执行该语句所有可能使用的方案，对比之后找出成本最低的方案--这个成本最低的方案就是所谓的执行计划</li>
<li>2.具体流程如下：</li>
<li>3.根据搜索条件，找出所有可能使用的索引</li>
<li>4.计算全表扫描的代价</li>
<li>5.计算使用不同索引执行查询的代价</li>
<li>6.对比各种执行方案的代价，找出成本最低的那一个</li>
</ul>
<h3>根据搜索条件，找出所有可能使用的索引</h3>
<ul>
<li>1.一个查询中可能使用到的索引称之为possible keys。</li>
</ul>
<h3>计算全表扫描的代价</h3>
<ul>
<li>1.聚簇索引占用的页面数</li>
<li>2.该表中的记录数</li>
<li>3.MySQL为每个表维护了一系列的统计信息,上述1和2的信息就在这里面。</li>
<li>4.可以通过SHOW TABLE STATUS LIKE tableName 来查询</li>
<li>5.Rows代表记录--在innodb下只是一个概数。</li>
<li>6.Data_length--表示表占用的存储空间字节数。</li>
<li>7.Data_length = 聚簇索引的页面数量 x 每个页面的大小（16KB）</li>
<li>8.I/O成本==页面数量*1.0+1.1</li>
<li>9.CPU成本=ROWS*0.2+1.0--0.2指的是访问一条记录所需的成本常数</li>
<li>10.总成本=I/O成本+CPU成本。</li>
<li>11.我们前边说过表中的记录其实都存储在聚簇索引对应B+树的叶子节点中，所以只要我们通过根节点获得了最左边的叶子节点，就可以沿着叶子节点组成的双向链表把所有记录都查看一遍
。也就是说全表扫描这个过程其实有的B+树内节点是不需要访问的.上述计算全表扫描是个比较粗略的计算。</li>
</ul>
<h3>计算使用不同索引执行查询的代价</h3>
<ul>
<li>1.要分别分析单独使用这些索引执行查询的成本，最后还要分析是否可能使用到索引合并</li>
<li>2.MySQL查询优化器先分析使用唯一二级索引的成本，再分析使用普通索引的成本</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://maijunxuan.cn/MySQL/%E4%B8%80%E6%9D%A1SQL%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.html</link>
      <guid>https://maijunxuan.cn/MySQL/%E4%B8%80%E6%9D%A1SQL%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.html</guid>
      <source url="https://maijunxuan.cn/rss.xml"></source>
      <description>一条SQL的执行过程 1) 连接器 连接器主要和身份认证和权限相关的功能相关，就好比一个级别很高的门卫一样。 主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即使管理员...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[<h4>一条SQL的执行过程</h4>
<h4>1) 连接器</h4>
<p>连接器主要和身份认证和权限相关的功能相关，就好比一个级别很高的门卫一样。</p>
<p>主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即使管理员修改了该用户的权限，该用户也是不受影响的。</p>
<h4>查询缓存(MySQL 8.0 版本后移除)</h4>
<p>查询缓存主要用来缓存我们所执行的 SELECT 语句以及该语句的结果集。</p>
<p>连接建立后，执行查询语句的时候，会先查询缓存，MySQL 会先校验这个 SQL 是否执行过，以 Key-Value 的形式缓存在内存中，Key 是查询预计，Value 是结果集。如果缓存 key 被命中，就会直接返回给客户端，如果没有命中，就会执行后续的操作，完成后也会把结果缓存起来，方便下一次调用。当然在真正执行缓存查询的时候还是会校验用户的权限，是否有该表的查询条件。</p>
<p>MySQL 查询不建议使用缓存，因为查询缓存失效在实际业务场景中可能会非常频繁，假如你对一个表更新的话，这个表上的所有的查询缓存都会被清空。对于不经常更新的数据来说，使用缓存还是可以的。</p>
<p>所以，一般在大多数情况下我们都是不推荐去使用查询缓存的。</p>
<p>MySQL 8.0 版本后删除了缓存的功能，官方也是认为该功能在实际的应用场景比较少，所以干脆直接删掉了。</p>
<h4>3) 分析器</h4>
<p>MySQL 没有命中缓存，那么就会进入分析器，分析器主要是用来分析 SQL 语句是来干嘛的，分析器也会分为几步：</p>
<p><strong>第一步，词法分析</strong>，一条 SQL 语句有多个字符串组成，首先要提取关键字，比如 select，提出查询的表，提出字段名，提出查询条件等等。做完这些操作后，就会进入第二步。</p>
<p><strong>第二步，语法分析</strong>，主要就是判断你输入的 SQL 是否正确，是否符合 MySQL 的语法。</p>
<p>完成这 2 步之后，MySQL 就准备开始执行了，但是如何执行，怎么执行是最好的结果呢？这个时候就需要优化器上场了。</p>
<h4>4) 优化器</h4>
<p>优化器的作用就是它认为的最优的执行方案去执行（有时候可能也不是最优，这篇文章涉及对这部分知识的深入讲解），比如多个索引的时候该如何选择索引，多表查询的时候如何选择关联顺序等。</p>
<p>可以说，经过了优化器之后可以说这个语句具体该如何执行就已经定下来。</p>
<h4>5) 执行器</h4>
<p>当选择了执行方案后，MySQL 就准备开始执行了，首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息，如果有权限，就会去调用引擎的接口，返回接口执行的结果。</p>
]]></content:encoded>
    </item>
    <item>
      <title>普通索引和唯一索引的区别</title>
      <link>https://maijunxuan.cn/MySQL/%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95%E5%92%8C%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8C%BA%E5%88%AB.html</link>
      <guid>https://maijunxuan.cn/MySQL/%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95%E5%92%8C%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8C%BA%E5%88%AB.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">普通索引和唯一索引的区别</source>
      <description>普通索引和唯一索引的区别 普通索引和唯一索引的区别就是，普通索引的字段内容是可以重复的，唯一索引的字段内容不可重复。 一、查询过程 假设查询语句为select id from test where k=10;首先会通过B+树的树根开始按层搜索叶子节点，找到对应的数据页后，在页内进行二分查找定位记录。 对于普通索引，查找到第一条符合条件的记录(id,10...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[
<p>普通索引和唯一索引的区别就是，普通索引的字段内容是可以重复的，唯一索引的字段内容不可重复。</p>
<h2>一、查询过程</h2>
<p>假设查询语句为<code>select id from test where k=10;</code>首先会通过B+树的树根开始按层搜索叶子节点，找到对应的数据页后，在页内进行二分查找定位记录。</p>
<ul>
<li>对于普通索引，查找到第一条符合条件的记录(id,10)之后，<strong>继续往后查找，直到找到第一条不满足k=10的记录</strong>；</li>
<li>对于唯一索引，<strong>查找到第一条符合条件的记录(id,10)之后，直接返回结果</strong>；</li>
</ul>
<blockquote>
<p>唯一索引定义了唯一性，有且只有一条符合条件的记录，普通索引则可能存在多条记录</p>
</blockquote>
<p><strong>这两种情况下，性能会相差多少？</strong></p>
<p>我们知道，InnoDB中的数据是按<strong>数据页为单位进行读写</strong>的，也就是说，当找到K=10的那条记录，包含这条记录的数据页已经在内存中，并且是顺序读取，读取一条记录和读取多条记录，性能相差不了多少。当然，如果刚好要读取的下一条记录在下一个数据页，花费的时间会长一点，但是这是小概率事件。 总而言之，<strong>对于查询过程，普通索引和唯一索引的效率相近</strong>。</p>
<h2>二、更新过程</h2>
<h3>1. change buffer</h3>
<p>当需要更新某个数据页时，有两种情况：</p>
<ul>
<li>数据页在内存中：直接更新，该数据页标记为脏。</li>
<li>数据页不在内存中，把更新操作缓存在change buffer当中，在下次需要读取这个数据页时，把该数据页加载到内存，并且把change buffer中的更新操作应用到数据页中，以此保证数据的一致性。</li>
</ul>
<h3>2、merge</h3>
<p>将change buffer中的操作应用到原始数据页的过程称为merge。 触发merge的情况有以下几种：读取该数据页、系统后台定期merge、数据库正常关闭。</p>
<p>显然，将更新语句缓存在change buffer的好处有两个：1、减少磁盘的IO次数，语句执行速度提升；2、减少数据页读入内存，提高内存利用率；</p>
<h3>3、使用场景</h3>
<p>当然，并不是任何情况下使用change buffer都会提升性能的。</p>
<h4>唯一索引还是普通索引？</h4>
<p>对于唯一索引，每次对数据的更新都需要先把数据页加载到内存，判断是否违反唯一性约束，而对于已经在内存当中的数据页，是否随机读写已经不重要了，也就没有必要使用change buffer缓存更新操作。</p>
<p>对于普通索引，由于不需要数据页在内存中判断唯一性约束，可以缓存更新操作，减少了对磁盘的随机IO次数。</p>
<h4>普通索引就可以了吗？</h4>
<p>如果业务场景是写后需要立即读取，change buffer还有优势吗？</p>
<p>更新操作写入change buffer后，由于需要马上读取，也就是立即触发了merge过程，这种情况下磁盘的随机IO次数并不会减少，甚至还额外增加了change buffer的维护成本。</p>
<p>也就是说，<strong>change buffer适用于写多读少的场景</strong>，这样才能在下一次merge之前缓存更多的更新操作，收益才更大。这种业务模型常见的就是账单、日志等系统。</p>
<h2>总结</h2>
<p>由于唯一索引用不了change buffer的优化机制，因此如果业务可以接受，从性能角度，推荐优先考虑非唯一索引。</p>
]]></content:encoded>
    </item>
    <item>
      <title>分布式锁的几种实现方式</title>
      <link>https://maijunxuan.cn/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html</link>
      <guid>https://maijunxuan.cn/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">分布式锁的几种实现方式</source>
      <description>分布式锁的几种实现方式 什么是分布式锁 要介绍分布式锁，首先要提到与分布式锁相对应的是线程锁、进程锁。 线程锁：主要用来给方法、代码块加锁。当某个方法或代码使用锁，在同一时刻仅有一个线程执行该方法或该代码段。线程锁只在同一JVM中有效果，因为线程锁的实现在根本上是依靠线程之间共享内存实现的，比如synchronized是共享对象头，显示锁Lock是共享...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>什么是分布式锁</h2>
<blockquote>
<p>要介绍分布式锁，首先要提到与分布式锁相对应的是线程锁、进程锁。</p>
</blockquote>
<ul>
<li><strong>线程锁</strong>：主要用来给方法、代码块加锁。当某个方法或代码使用锁，在同一时刻仅有一个线程执行该方法或该代码段。线程锁只在同一JVM中有效果，因为线程锁的实现在根本上是依靠线程之间共享内存实现的，比如synchronized是共享对象头，显示锁Lock是共享某个变量（state）。</li>
<li><strong>进程锁</strong>：为了控制同一操作系统中多个进程访问某个共享资源，因为进程具有独立性，各个进程无法访问其他进程的资源，因此无法通过synchronized等线程锁实现进程锁。</li>
<li><strong>分布式锁</strong>：当多个进程不在同一个系统中(比如分布式系统中控制共享资源访问)，用分布式锁控制多个进程对资源的访问。</li>
</ul>
<h2>分布式锁的设计原则</h2>
<blockquote>
<p>分布式锁的最小设计原则：<strong>安全性</strong>和<strong>有效性</strong></p>
</blockquote>
<p><a href="http://redis.io/docs/reference/patterns/distributed-locks/" target="_blank" rel="noopener noreferrer">Redis的官网  (opens new window)</a>上对使用分布式锁提出至少需要满足如下三个要求：</p>
<ol>
<li><strong>互斥</strong>（属于安全性）：在任何给定时刻，只有一个客户端可以持有锁。</li>
<li><strong>无死锁</strong>（属于有效性）：即使锁定资源的客户端崩溃或被分区，也总是可以获得锁；通常通过超时机制实现。</li>
<li><strong>容错性</strong>（属于有效性）：只要大多数 Redis 节点都启动，客户端就可以获取和释放锁。</li>
</ol>
<p>除此之外，分布式锁的设计中还可以/需要考虑：</p>
<ol>
<li>加锁解锁的<strong>同源性</strong>：A加的锁，不能被B解锁</li>
<li>获取锁是<strong>非阻塞</strong>的：如果获取不到锁，不能无限期等待；</li>
<li><strong>高性能</strong>：加锁解锁是高性能的</li>
</ol>
<h2>分布式锁的实现方案</h2>
<blockquote>
<p>就体系的角度而言，谈谈常见的分布式锁的实现方案。</p>
</blockquote>
<ul>
<li>
<p>基于数据库实现分布式锁</p>
<ul>
<li>基于数据库表（锁表，很少使用）</li>
<li>乐观锁(基于版本号)</li>
<li>悲观锁(基于排它锁)</li>
</ul>
</li>
<li>
<p>基于 redis 实现分布式锁</p>
<p>:</p>
<ul>
<li>单个Redis实例：setnx(key,当前时间+过期时间) + Lua</li>
<li>Redis集群模式：Redlock</li>
</ul>
</li>
<li>
<p>基于 zookeeper实现分布式锁</p>
<ul>
<li>临时有序节点来实现的分布式锁,Curator</li>
</ul>
</li>
<li>
<p><strong>基于 Consul 实现分布式锁</strong></p>
</li>
</ul>
<h2>基于数据库如何实现分布式锁？有什么缺陷？</h2>
<blockquote>
<p>基于数据库如何实现分布式锁？有什么缺陷？</p>
</blockquote>
<h3>基于数据库表（锁表，很少使用）</h3>
<p>最简单的方式可能就是直接创建一张锁表，然后通过操作该表中的数据来实现了。当我们想要获得锁的时候，就可以在该表中增加一条记录，想要释放锁的时候就删除这条记录。</p>
<p>为了更好的演示，我们先创建一张数据库表，参考如下：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> database_lock <span class="token punctuation">(</span>
	<span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">`</span>resource<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'锁定的资源'</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">""</span> <span class="token keyword">COMMENT</span> <span class="token string">'描述'</span><span class="token punctuation">,</span>
	<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> uiq_idx_resource <span class="token punctuation">(</span>resource<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'数据库分布式锁表'</span><span class="token punctuation">;</span>
</code></pre></div><p>当我们想要获得锁时，可以插入一条数据：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> database_lock<span class="token punctuation">(</span>resource<span class="token punctuation">,</span> description<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'lock'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>当需要释放锁的时，可以删除这条数据：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> database_lock <span class="token keyword">WHERE</span> resource<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre></div><p>1</p>
<h3>基于悲观锁</h3>
<p><strong>悲观锁实现思路</strong>？</p>
<ol>
<li>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。</li>
<li>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。</li>
<li>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。</li>
<li>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</li>
</ol>
<p><strong>以MySQL InnoDB中使用悲观锁为例</strong>？</p>
<p>要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">//0.开始事务</span>
<span class="token keyword">begin</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">begin</span> <span class="token keyword">work</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>三者选一就可以<span class="token punctuation">)</span>
<span class="token comment">//1.查询出商品信息</span>
<span class="token keyword">select</span> <span class="token keyword">status</span> <span class="token keyword">from</span> t_goods <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
<span class="token comment">//2.根据商品信息生成订单</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_orders <span class="token punctuation">(</span>id<span class="token punctuation">,</span>goods_id<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3.修改商品status为2</span>
<span class="token keyword">update</span> t_goods <span class="token keyword">set</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">//4.提交事务</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">commit</span> <span class="token keyword">work</span><span class="token punctuation">;</span>
</code></pre></div><p>上面的查询语句中，我们使用了<code>select…for update</code>的方式，这样就通过开启排他锁的方式实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。</p>
<p>上面我们提到，使用<code>select…for update</code>会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。</p>
<h3>基于乐观锁</h3>
<p>乐观并发控制（又名“乐观锁”，Optimistic Concurrency Control，缩写“OCC”）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。</p>
<p><strong>以使用版本号实现乐观锁为例？</strong></p>
<p>使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行+1操作。并判断当前版本号是不是该数据的最新的版本号。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token number">1.</span>查询出商品信息
<span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>version<span class="token punctuation">)</span> <span class="token keyword">from</span> t_goods <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token comment">#{id}</span>
<span class="token number">2.</span>根据商品信息生成订单
<span class="token number">3.</span>修改商品<span class="token keyword">status</span>为<span class="token number">2</span>
<span class="token keyword">update</span> t_goods 
<span class="token keyword">set</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>version<span class="token operator">=</span>version<span class="token operator">+</span><span class="token number">1</span>
<span class="token keyword">where</span> id<span class="token operator">=</span><span class="token comment">#{id} and version=#{version}; </span>
</code></pre></div><p>1
2
3
4
5
6
7</p>
<p>需要注意的是，乐观锁机制往往基于系统中数据存储逻辑，因此也具备一定的局限性。由于乐观锁机制是在我们的系统中实现的，对于来自外部系统的用户数据更新操作不受我们系统的控制，因此可能会造成脏数据被更新到数据库中。在系统设计阶段，我们应该充分考虑到这些情况，并进行相应的调整（如将乐观锁策略在数据库存储过程中实现，对外只开放基于此存储过程的数据更新途径，而不是将数据库表直接对外公开）。</p>
<ul>
<li><strong>缺陷</strong></li>
</ul>
<p>对数据库依赖，开销问题，行锁变表锁问题，无法解决数据库单点和可重入的问题。</p>
<h2>基于redis如何实现分布式锁？有什么缺陷？</h2>
<blockquote>
<p>基于redis如何实现分布式锁？这里一定要看<a href="http://redis.io/docs/reference/patterns/distributed-locks/" target="_blank" rel="noopener noreferrer">Redis的官网  (opens new window)</a>的分布式锁的实现这篇文章。</p>
</blockquote>
<h3>set NX PX + Lua</h3>
<p><strong>加锁</strong>： set NX PX + 重试 + 重试间隔</p>
<p>向Redis发起如下命令: <code>SET productId:lock 0xx9p03001 NX PX 30000</code> 其中，"productId"由自己定义，可以是与本次业务有关的id，"0xx9p03001"是一串随机值，必须保证全局唯一(原因在后文中会提到)，“NX"指的是当且仅当key(也就是案例中的"productId:lock”)在Redis中不存在时，返回执行成功，否则执行失败。"PX 30000"指的是在30秒后，key将被自动删除。执行命令后返回成功，表明服务成功的获得了锁。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> expire<span class="token punctuation">,</span> <span class="token keyword">int</span> retryTimes<span class="token punctuation">,</span> <span class="token keyword">long</span> retryDuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// use JedisCommands instead of setIfAbsense</span>
    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">setRedis</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> expire<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// retry if needed</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> retryTimes<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"lock failed, retrying..."</span> <span class="token operator">+</span> retryTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>retryDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// use JedisCommands instead of setIfAbsense</span>
        result <span class="token operator">=</span> <span class="token function">setRedis</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> expire<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">setRedis</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> expire<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisCallback <span class="token operator">=</span> connection <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">JedisCommands</span> commands <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JedisCommands</span><span class="token punctuation">)</span> connection<span class="token punctuation">.</span><span class="token function">getNativeConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token class-name">SnowIDUtil</span><span class="token punctuation">.</span><span class="token function">uniqueStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lockFlag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> commands<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token constant">NX</span><span class="token punctuation">,</span> <span class="token constant">PX</span><span class="token punctuation">,</span> expire<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 看这里</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"set redis occurred an exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>解锁</strong>：采用lua脚本</p>
<p>在删除key之前，一定要判断服务A持有的value与Redis内存储的value是否一致。如果贸然使用服务A持有的key来删除锁，则会误将服务B的锁释放掉。</p>
<div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">then</span>
	<span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
	<span class="token keyword">return</span> <span class="token number">0</span>
<span class="token keyword">end</span> 
</code></pre></div><h3>基于RedLock实现分布式锁</h3>
<blockquote>
<p>这是Redis作者推荐的分布式集群情况下的方式，请看这篇文章<a href="http://antirez.com/news/101" target="_blank" rel="noopener noreferrer">Is Redlock safe?  (opens new window)</a></p>
</blockquote>
<p>假设有两个服务A、B都希望获得锁，有一个包含了5个redis master的Redis Cluster，执行过程大致如下:</p>
<ol>
<li>客户端获取当前时间戳，单位: 毫秒</li>
<li>服务A轮寻每个master节点，尝试创建锁。(这里锁的过期时间比较短，一般就几十毫秒) RedLock算法会尝试在大多数节点上分别创建锁，假如节点总数为n，那么大多数节点指的是n/2+1。</li>
<li>客户端计算成功建立完锁的时间，如果建锁时间小于超时时间，就可以判定锁创建成功。如果锁创建失败，则依次(遍历master节点)删除锁。</li>
<li>只要有其它服务创建过分布式锁，那么当前服务就必须轮寻尝试获取锁。</li>
</ol>
<h3>基于Redis的客户端</h3>
<blockquote>
<p>这里Redis的客户端（Jedis, Redisson, Lettuce等）都是基于上述两类形式来实现分布式锁的，只是两类形式的封装以及一些优化（比如Redisson的watch dog)。</p>
</blockquote>
<p>以基于Redisson实现分布式锁为例（支持了 单实例、Redis哨兵、redis cluster、redis master-slave等各种部署架构）：</p>
<p><strong>特色</strong>？</p>
<ol>
<li>redisson所有指令都通过lua脚本执行，保证了操作的原子性</li>
<li>redisson设置了watchdog看门狗，“看门狗”的逻辑保证了没有死锁发生</li>
<li>redisson支持Redlock的实现方式。</li>
</ol>
<p><strong>过程</strong>？</p>
<ol>
<li>线程去获取锁，获取成功: 执行lua脚本，保存数据到redis数据库。</li>
<li>线程去获取锁，获取失败: 订阅了解锁消息，然后再尝试获取锁，获取成功后，执行lua脚本，保存数据到redis数据库。</li>
</ol>
<p><strong>互斥</strong>？</p>
<p>如果这个时候客户端B来尝试加锁，执行了同样的一段lua脚本。第一个if判断会执行“exists myLock”，发现myLock这个锁key已经存在。接着第二个if判断，判断myLock锁key的hash数据结构中，是否包含客户端B的ID，但明显没有，那么客户端B会获取到pttl myLock返回的一个数字，代表myLock这个锁key的剩余生存时间。此时客户端B会进入一个while循环，不听的尝试加锁。</p>
<p><strong>watch dog自动延时机制</strong>？</p>
<p>客户端A加锁的锁key默认生存时间只有30秒，如果超过了30秒，客户端A还想一直持有这把锁，怎么办？其实只要客户端A一旦加锁成功，就会启动一个watch dog看门狗，它是一个后台线程，会每隔10秒检查一下，如果客户端A还持有锁key，那么就会不断的延长锁key的生存时间。</p>
<p><strong>可重入</strong>？</p>
<p>每次lock会调用incrby，每次unlock会减一。</p>
<h3>进一步理解</h3>
<ol>
<li>借助Redis实现分布式锁时，有一个共同的缺陷: 当获取锁被拒绝后，需要不断的循环，重新发送获取锁(创建key)的请求，直到请求成功。这就造成空转，浪费宝贵的CPU资源。</li>
<li>RedLock算法本身有争议，具体看这篇文章<a href="http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html" target="_blank" rel="noopener noreferrer">How to do distributed locking  (opens new window)</a> 以及作者的回复<a href="http://antirez.com/news/101" target="_blank" rel="noopener noreferrer">Is Redlock safe?  (opens new window)</a></li>
</ol>
<h2>基于zookeeper如何实现分布式锁？</h2>
<p>说几个核心点：</p>
<ul>
<li><strong>顺序节点</strong></li>
</ul>
<p>创建一个用于发号的节点“/test/lock”，然后以它为父亲节点的前缀为“/test/lock/seq-”依次发号：</p>
<p><img src="http://pdai.tech/_images/zk/zk-1.png" alt="img"></p>
<ul>
<li><strong>获得最小号得锁</strong></li>
</ul>
<p>由于序号的递增性，可以规定排号最小的那个获得锁。所以，每个线程在尝试占用锁之前，首先判断自己是排号是不是当前最小，如果是，则获取锁。</p>
<ul>
<li><strong>节点监听机制</strong></li>
</ul>
<p>每个线程抢占锁之前，先抢号创建自己的ZNode。同样，释放锁的时候，就需要删除抢号的Znode。抢号成功后，如果不是排号最小的节点，就处于等待通知的状态。等谁的通知呢？不需要其他人，只需要等前一个Znode 的通知就可以了。当前一个Znode 删除的时候，就是轮到了自己占有锁的时候。第一个通知第二个、第二个通知第三个，击鼓传花似的依次向后。</p>
]]></content:encoded>
      <enclosure url="http://pdai.tech/_images/zk/zk-1.png" type="image/png"/>
    </item>
    <item>
      <title>Sharding-JDBC的简单使用</title>
      <link>https://maijunxuan.cn/%E4%B8%AD%E9%97%B4%E4%BB%B6/Sharding/Sharding-JDBC%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://maijunxuan.cn/%E4%B8%AD%E9%97%B4%E4%BB%B6/Sharding/Sharding-JDBC%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Sharding-JDBC的简单使用</source>
      <description>Sharding-JDBC的简单使用 1、创建一个springboot项目 2、导入如下依赖 2、sharding-jdbc实现水平分表 1、创建sharding_sphere数据库 2、在数据库中创建两张表，orders_1和orders_2 3、分片规则：如果订单编号是偶数添加到orders_1,如果是奇数添加到orders_2 4、创建实体类 5...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[
<h3>1、创建一个springboot项目</h3>
<h3>2、导入如下依赖</h3>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>2、sharding-jdbc实现水平分表</h3>
<h4>1、创建sharding_sphere数据库</h4>
<h4>2、在数据库中创建两张表，orders_1和orders_2</h4>
<h4>3、分片规则：如果订单编号是偶数添加到orders_1,如果是奇数添加到orders_2</h4>
<h4>4、创建实体类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> orderType<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> customerId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> amount<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>5、创建mapper类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrdersMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into orders(id,order_type,customer_id,amount) values(#{id},#{orderType},#{customerId},#{amount})"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Orders</span> orders<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from orders where id = #{id}"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"orderType"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"order_type"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"customerId"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"customer_id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"amount"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"amount"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Orders</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>6、创建配置文件</h4>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment">#整合mybatis</span>
<span class="token key attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token value attr-value">com.ityml.mapper</span>

<span class="token comment">#配置数据源的名称</span>
<span class="token key attr-name">spring.shardingsphere.datasource.names</span><span class="token punctuation">=</span><span class="token value attr-value">ds1</span>


<span class="token comment">#配置数据源的具体内容，</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/sharding_sphere?serverTimezone=UTC</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment">#指定orders表的分布情况，配置表在哪个数据库中，表名称是什么</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">ds1.orders_$-&gt;{1..2}</span>
<span class="token comment">#指定orders表里主键id生成策略</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.key-generator.column</span><span class="token punctuation">=</span><span class="token value attr-value">id</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.key-generator.type</span><span class="token punctuation">=</span><span class="token value attr-value">SNOWFLAKE</span>

<span class="token comment">#指定分片策略。根据id的奇偶性来判断插入到哪个表</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.table-strategy.inline.sharding-column</span><span class="token punctuation">=</span><span class="token value attr-value">id</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.table-strategy.inline.algorithm-expression</span><span class="token punctuation">=</span><span class="token value attr-value">orders_${id%2+1}</span>

<span class="token comment">#打开sql输出日志</span>
<span class="token key attr-name">spring.shardingsphere.props.sql.show</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><h4>7、创建测试类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">ShardingsphereDemoApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">OrdersMapper</span> ordersMapper<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Orders</span> orders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orders<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            orders<span class="token punctuation">.</span><span class="token function">setCustomerId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            orders<span class="token punctuation">.</span><span class="token function">setOrderType</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            orders<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token number">1000.0</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ordersMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Orders</span> orders <span class="token operator">=</span> ordersMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>3、sharding-jdbc实现水平分库</h3>
<h4>1、在不同的数据节点node01,node02上创建不同名称的数据库：sharding_sphere_1,sharding_sphere_2</h4>
<h4>2、在两个数据库上创建相同的表orders_1,orders_2</h4>
<h4>3、分片规则，按照customer_id的奇偶性来进行分库，然后按照id的奇偶性进行分表</h4>
<h4>4、修改配置文件</h4>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># 配置不同的数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.names</span><span class="token punctuation">=</span><span class="token value attr-value">ds1,ds2</span>

<span class="token comment">#配置ds1数据源的基本信息</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/sharding_sphere_1?serverTimezone=UTC</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment">#配置ds2数据源的基本信息</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.123.111:3306/sharding_sphere_2?serverTimezone=UTC</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment">#指定数据库的分布情况</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">ds$-&gt;{1..2}.orders_$-&gt;{1..2}</span>

<span class="token comment">#指定orders表的主键生成策略</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.key-generator.column</span><span class="token punctuation">=</span><span class="token value attr-value">id</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.key-generator.type</span><span class="token punctuation">=</span><span class="token value attr-value">SNOWFLAKE</span>

<span class="token comment">#指定表分片策略，根据id的奇偶性来添加到不同的表中</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.table-strategy.inline.sharding-column</span><span class="token punctuation">=</span><span class="token value attr-value">id</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.table-strategy.inline.algorithm-expression</span><span class="token punctuation">=</span><span class="token value attr-value">orders_$-&gt;{id%2+1}</span>

<span class="token comment">#指定库分片策略，根据customer_id的奇偶性来添加到不同的库中</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.database-strategy.inline.sharding-column</span><span class="token punctuation">=</span><span class="token value attr-value">customer_id</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.orders.database-strategy.inline.algorithm-expression</span><span class="token punctuation">=</span><span class="token value attr-value">ds$-&gt;{customer_id%2+1}</span>

<span class="token comment">#打开sql输出日志</span>
<span class="token key attr-name">spring.shardingsphere.props.sql.show</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><h4>5、修改mapper类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrdersMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into orders(id,order_type,customer_id,amount) values(#{id},#{orderType},#{customerId},#{amount})"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Orders</span> orders<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from orders where id = #{id}"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"orderType"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"order_type"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"customerId"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"customer_id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"amount"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"amount"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Orders</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from orders where id = #{id} and customer_id=#{customerId}"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"orderType"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"order_type"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"customerId"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"customer_id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"amount"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"amount"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Orders</span> <span class="token function">selectOneDB</span><span class="token punctuation">(</span><span class="token class-name">Orders</span> orders<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre></div><h4>6、编写测试类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">ShardingsphereDemoApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">OrdersMapper</span> ordersMapper<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrdersDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Orders</span> orders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orders<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            orders<span class="token punctuation">.</span><span class="token function">setCustomerId</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orders<span class="token punctuation">.</span><span class="token function">setOrderType</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            orders<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token number">1000.0</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ordersMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryOrdersDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Orders</span> orders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orders<span class="token punctuation">.</span><span class="token function">setCustomerId</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orders<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Orders</span> o <span class="token operator">=</span> ordersMapper<span class="token punctuation">.</span><span class="token function">selectOneDB</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>4、sharding-jdbc实现垂直分库</h3>
<h4>1、在不同的数据节点node01,node02创建相同的库sharding_sphere</h4>
<h4>2、在node01上创建orders表，在node02上创建customer表</h4>
<h4>3、分片规则：将不同的表插入到不同的库中</h4>
<h4>4、编写customer类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>5、编写customerMapper类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerMapper</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into customer(id,name) values(#{id},#{name})"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertCustomer</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>6、修改配置文件</h4>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment">#配置数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.names</span><span class="token punctuation">=</span><span class="token value attr-value">ds1,ds2</span>
<span class="token comment">#配置第一个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/sharding_sphere?serverTimezone=UTC</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment">#配置第二个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.123.111:3306/sharding_sphere?serverTimezone=UTC</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment">#配置orders表所在的数据节点</span>
<span class="token comment">#spring.shardingsphere.sharding.tables.order.actual-data-nodes=ds1.orders</span>

<span class="token comment">#配置customer表所在的数据节点</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.customer.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">ds2.customer</span>
<span class="token comment">#customer表的主键生成策略</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.customer.key-generator.column</span><span class="token punctuation">=</span><span class="token value attr-value">id</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.customer.key-generator.type</span><span class="token punctuation">=</span><span class="token value attr-value">SNOWFLAKE</span>
<span class="token comment">#指定分片的策略</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.customer.table-strategy.inline.sharding-column</span><span class="token punctuation">=</span><span class="token value attr-value">id</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.customer.table-strategy.inline.algorithm-expression</span><span class="token punctuation">=</span><span class="token value attr-value">customer</span>

<span class="token comment">#显示sql</span>
<span class="token key attr-name">spring.shardingsphere.props.sql.show</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><h4>7、编写测试类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">ShardingsphereDemoApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">CustomerMapper</span> customerMapper<span class="token punctuation">;</span>
  
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            customer<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            customer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            customerMapper<span class="token punctuation">.</span><span class="token function">insertCustomer</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>5、sharding-jdbc公共表</h3>
<p>在shardingsphere中有一种概念叫做公共表，也就是需要在各个库中都存在的表，方便做某些关联查询。</p>
<h4>1、在不同节点的库上创建相同的表</h4>
<h4>2、分片规则：公共表表示所有的库都具备相同的表</h4>
<h4>3、创建实体类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DictOrderType</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> orderType<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>4、创建DictOrderTypeMapper文件</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DictOrderTypeMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into dict_order_type(id,order_type) values(#{id},#{orderType})"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertDictOrderType</span><span class="token punctuation">(</span><span class="token class-name">DictOrderType</span> dictOrderType<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from dict_order_type where id = #{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">DeleteDictOrderType</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>5、修改配置文件</h4>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment">#配置数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.names</span><span class="token punctuation">=</span><span class="token value attr-value">ds1,ds2</span>
<span class="token comment">#配置第一个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/sharding_sphere?serverTimezone=UTC</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment">#配置第二个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.123.111:3306/sharding_sphere?serverTimezone=UTC</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment">#配置公共表</span>
<span class="token key attr-name">spring.shardingsphere.sharding.broadcast-tables</span><span class="token punctuation">=</span><span class="token value attr-value">dict_order_type</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.dict_order_type.key-generator.column</span><span class="token punctuation">=</span><span class="token value attr-value">id</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.dict_order_type.key-generator.type</span><span class="token punctuation">=</span><span class="token value attr-value">SNOWFLAKE</span>
</code></pre></div><h4>6、编写测试类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">ShardingsphereDemoApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DictOrderTypeMapper</span> dictOrderTypeMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertDictOrderType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">DictOrderType</span> dictOrderType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DictOrderType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dictOrderType<span class="token punctuation">.</span><span class="token function">setOrderType</span><span class="token punctuation">(</span><span class="token string">"orderType"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            dictOrderTypeMapper<span class="token punctuation">.</span><span class="token function">insertDictOrderType</span><span class="token punctuation">(</span>dictOrderType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteDictOrderType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name"><span class="token namespace">dictOrderTypeMapper<span class="token punctuation">.</span></span>DeleteDictOrderType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>6、sharding-jdbc实现读写分离</h3>
<p>读写分离的概念大家应该已经很熟练了，此处不在赘述，下面我们通过sharding-jdbc来实现读写分离，其实大家应该已经发现了，所有的操作都是配置问题，下面我们来讲一下具体的配置。</p>
<h4>1、我们规定ds1为写库，ds2为读库</h4>
<h4>2、创建person类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>3、创建personMapper类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into person(id,name) values(#{id},#{name})"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertPerson</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from person where id = #{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">queryPerson</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>4、修改配置文件</h4>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment">#配置数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.names</span><span class="token punctuation">=</span><span class="token value attr-value">ds1,ds2</span>
<span class="token comment">#配置第一个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/shardingsphere?serverTimezone=UTC</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment">#配置第二个数据源</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.123.111:3306/shardingsphere?serverTimezone=UTC</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds2.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token comment">#主库从库逻辑定义</span>
<span class="token key attr-name">spring.shardingsphere.masterslave.name</span><span class="token punctuation">=</span><span class="token value attr-value">ms</span>
<span class="token key attr-name">spring.shardingsphere.masterslave.master-data-source-name</span><span class="token punctuation">=</span><span class="token value attr-value">ds1</span>
<span class="token key attr-name">spring.shardingsphere.masterslave.slave-data-source-names</span><span class="token punctuation">=</span><span class="token value attr-value">ds2</span>

<span class="token comment">#显示执行的sql</span>
<span class="token key attr-name">spring.shardingsphere.props.sql.show</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><h4>5、编写测试类</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">ShardingsphereDemoApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PersonMapper</span> personMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        personMapper<span class="token punctuation">.</span><span class="token function">insertPerson</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> personMapper<span class="token punctuation">.</span><span class="token function">queryPerson</span><span class="token punctuation">(</span><span class="token number">1l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Git/Git%20%E6%8F%90%E4%BA%A4%E8%A7%84%E7%BA%A6.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Git/Git%20%E6%8F%90%E4%BA%A4%E8%A7%84%E7%BA%A6.html</guid>
      <source url="https://maijunxuan.cn/rss.xml"></source>
      <description>Git 提交规约 格式 注：[]代表可选，&amp;lt;&amp;gt;代表必选。 type 必填，用于指定 commit 的类型。 当同时有feat、fix和其他类型时，类型取feat、fix。 scope 非必填，用于描述改动的范围，格式一般为项目名/模块名，如果一次 commit 修改多个模块，建议拆分成多次 commit，以便更好追踪和维护。 subject 必填，此次...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Git 提交规约</h2>
<h3>格式</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;type&gt;[scope]: &lt;subject&gt;
// 空一行
[body]
// 空一行
[footer]
</code></pre></div><p><strong>注：[]代表可选，&lt;&gt;代表必选。</strong></p>
<h3>type</h3>
<p>必填，用于指定 commit 的类型。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>feat：增加新功能
fix：修复 bug
docs：只改动了文档相关的内容
style：格式修改，没有修改代码逻辑，比如格式化、换行等
refactor：重构代码，既没有新增功能，也没有修复 bug，比如提取某段代码为一个方法、重构某个功能等
perf：性能、体验优化等
test：新增 test 用例或修改现有测试用例
build：构造工具的或者外部依赖的改动，比如 maven
ci：与 CI（持续集成服务）有关的改动
chore：不修改 src 或者 test 的其余修改，例如构建过程或辅助工具的变动
revert：执行 git revert 打印的 message
</code></pre></div><p><strong>当同时有feat、fix和其他类型时，类型取feat、fix。</strong></p>
<h3>scope</h3>
<p>非必填，用于描述改动的范围，格式一般为项目名/模块名，如果一次 commit 修改多个模块，建议拆分成多次 commit，以便更好追踪和维护。</p>
<h3>subject</h3>
<p>必填，此次提交的简短描述，动词开头，第一人称现在时，比如add，而不用 added、adds，第一个字母小写，句尾不加句号（.）</p>
<h3>body</h3>
<p>非必填，此次提交的详细描述，主要描述改动之前的情况及修改动机，对于小的修改不作要求，但是重大需求、更新等必须添加body来作说明。</p>
<h3>footer</h3>
<p>footer只用于以下两种情况</p>
<ul>
<li>break changes</li>
</ul>
<p>break changes 指明是否产生了破坏性修改，涉及 break changes 的改动必须指明该项，类似版本升级、接口参数减少、接口删除、迁移等，以<code>BREAKING CHANGE：</code>开头，后面是变动的描述、变动的理由以及迁移的方法。</p>
<ul>
<li>关闭 issue</li>
</ul>
<p>当前提交修改了某个 issue</p>
<h3>示例</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>fix(ngStyle): correctly remove old style when new style value is invalid

Since d6098ee, old styles were not removed if `newStyles` specified an
invalid value for the style (e.g. `false`). The assumption was that the
new style would overwrite the old style value, but using an invalid
value made browsers ignore the new value and thus keep the old style.
This would typically happen when guarding a style with a boolean flag;
e.g.: `ng-style="{backgroundColor: isError &amp;&amp; 'red'}"`

This commit essentially revers commit d6098ee, whose main purpose was
to work around jquery/jquery#4185. The jQuery issue has been fixed in
3.4.0, so that should not be a problem any more.

Fixes #16860

Closes #16868
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>@Autowired注解详解</title>
      <link>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/@Autowired%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/@Autowired%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">@Autowired注解详解</source>
      <description>@Autowired注解详解 1. @Autowired的默认装配 ​ 我们都知道在spring中@Autowired注解，是用来自动装配对象的。默认情况下spring是按照类型装配的，也就是我们所说的byType方式。 此外，@Autowired注解的required参数默认是true，表示开启自动装配，有些时候我们不想使用自动装配功能，可以将该参数...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[
<h2><strong>1. @Autowired的默认装配</strong></h2>
<p>​		我们都知道在spring中@Autowired注解，是用来自动装配对象的。默认情况下spring是按照类型装配的，也就是我们所说的<code>byType</code>方式。</p>
<p>此外，@Autowired注解的<code>required</code>参数默认是true，表示开启自动装配，有些时候我们不想使用自动装配功能，可以将该参数设置成false。</p>
<h2><strong>2. 相同类型的对象不只一个时</strong></h2>
<p>上面<code>byType</code>方式主要针对相同类型的对象只有一个的情况，此时对象类型是唯一的，可以找到正确的对象。</p>
<p>但如果相同类型的对象不只一个时，会发生什么？</p>
<p>结果报错了，报类类名称有冲突，直接导致项目启动不来。</p>
<h2><strong>3. @Qualifier和@Primary</strong></h2>
<p>显然在spring中，按照Autowired默认的装配方式：<code>byType</code>，是无法解决上面的问题的，这时可以改用按名称装配：<code>byName</code>。</p>
<p>只需在代码上加上<code>@Qualifier("xxx")</code>注解即可</p>
<blockquote>
<p>Qualifier意思是合格者，一般跟Autowired配合使用，需要指定一个bean的名称，通过bean名称就能找到需要装配的bean。</p>
</blockquote>
<p>除了上面的<code>@Qualifier</code>注解之外，还能使用<code>@Primary</code>注解解决上面的问题。在其中一个Bean上面加上@Primary注解则会优先被注入</p>
<blockquote>
<p>当我们使用自动配置的方式装配Bean时，如果这个Bean有多个候选者，假如其中一个候选者具有@Primary注解修饰，该候选者会被选中，作为自动配置的值。</p>
</blockquote>
<h2><strong>4. @Autowired的使用范围</strong></h2>
<p>上面的实例中@Autowired注解，都是使用在成员变量上，但@Autowired的强大之处，远非如此。</p>
<p>该注解我们平常使用最多的地方可能是在成员变量上。接下来，我们重点看看在其他地方该怎么用？</p>
<h3><strong>4.1 成员变量</strong></h3>
<p>在成员变量上使用@Autowired注解：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3><strong>4.2 构造器</strong></h3>
<p>在构造器上使用@Autowired注解：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">IUser</span> user<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token class-name">IUser</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:"</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote>
<p>如果类只有一个构造方法，那么 <code>@Autowired</code> 注解可以省略；如果类中有多个构造方法，那么需要添加上 <code>@Autowired</code> 来明确指定到底使用哪个构造方法。</p>
</blockquote>
<h3><strong>4.3 方法</strong></h3>
<p>在普通方法上加Autowired注解：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">IUser</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       user<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Spring会在项目启动的过程中，自动调用一次加了@Autowired注解的方法，我们可以在该方法做一些初始化的工作。</p>
<p>也可以在setter方法上@Autowired注解：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">IUser</span> user<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token class-name">IUser</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3><strong>4.4 参数</strong></h3>
<p>可以在构造器的入参上加Autowired注解：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">IUser</span> user<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">IUser</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:"</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>也可以在非静态方法的入参上加Autowired注解：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">IUser</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       user<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2><strong>5. @Autowired的高端玩法</strong></h2>
<p>其实上面举的例子都是通过@Autowired自动装配单个实例，但这里我会告诉你，它也能自动装配多个实例，怎么回事呢？</p>
<p>将UserService方法调整一下，用一个List集合接收IUser类型的参数：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Service
public class UserService {

    @Autowired
    private List&lt;IUser&gt; userList;

    @Autowired
    private Set&lt;IUser&gt; userSet;

    @Autowired
    private Map&lt;String, IUser&gt; userMap;

    public void test() {
        System.out.println("userList:" + userList);
        System.out.println("userSet:" + userSet);
        System.out.println("userMap:" + userMap);
    }
}
</code></pre></div><p>@Autowired会自动把相同类型的IUser对象收集到集合中。</p>
<h2><strong>6. @Autowired一定能装配成功？</strong></h2>
<p>前面介绍了@Autowired注解这么多牛逼之处，其实有些情况下，即使使用了@Autowired装配的对象还是null，到底是什么原因呢？</p>
<h3><strong>6.1 没有加入容器</strong></h3>
<p>在类上面忘了加@Controller、@Service、@Component、@Repository等注解，Spring就无法完成自动装配的功能</p>
<h3><strong>6.2 注入Filter或Listener</strong></h3>
<p>web应用启动的顺序是：<code>Listener</code>-&gt;<code>Filter</code>-&gt;<code>Servlet</code>。</p>
<p>如果项目当中真的需要这样做，我们该如何解决这个问题呢？</p>
<p>答案是使用WebApplicationContextUtils.getWebApplicationContext获取当前的ApplicationContext，再通过它获取到bean实例。</p>
<h3><strong>6.3 循环依赖问题</strong></h3>
<p>如果A依赖于B，B依赖于C，C又依赖于A，这样就形成了一个死循环。</p>
<p>Spring的bean默认是单例的，如果单例bean使用@Autowired自动装配，大多数情况，能解决循环依赖问题。</p>
<p>但是如果bean是多例的，会出现循环依赖问题，导致bean自动装配不了。</p>
<p>还有有些情况下，如果创建了代理对象，即使bean是单例的，依然会出现循环依赖问题。</p>
<h2><strong>7. @Autowired和@Resouce的区别</strong></h2>
<p>@Autowired功能虽说非常强大，但是也有些不足之处。比如：比如它跟spring强耦合了，如果换成了JFinal等其他框架，功能就会失效。而@Resource是JSR-250提供的，它是Java标准，绝大部分框架都支持。</p>
<p>除此之外，有些场景使用@Autowired无法满足的要求，改成@Resource却能解决问题。接下来，我们重点看看@Autowired和@Resource的区别。</p>
<ul>
<li>@Autowired默认按byType自动装配，而@Resource默认byName自动装配。</li>
<li>@Autowired只包含一个参数：required，表示是否开启自动准入，默认是true。而@Resource包含七个参数，其中最重要的两个参数是：name 和 type。</li>
<li>@Autowired如果要使用byName，需要使用@Qualifier一起配合。而@Resource如果指定了name，则用byName自动装配，如果指定了type，则用byType自动装配。</li>
<li>@Autowired能够用在：构造器、方法、参数、成员变量和注解上，而@Resource能用在：类、成员变量和方法上。</li>
<li>@Autowired是Spring定义的注解，而@Resource是JSR-250定义的注解。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8CCGlib%E4%BB%A3%E7%90%86.html</link>
      <guid>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8CCGlib%E4%BB%A3%E7%90%86.html</guid>
      <source url="https://maijunxuan.cn/rss.xml"></source>
      <description>JDK动态代理和CGlib代理 **JDK动态代理: **利用拦截器(拦截器必须实现InvocationHanlder)加上反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。 CGLiB动态代理: 利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。 何时使用JDK还是CGL...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[<h3>JDK动态代理和CGlib代理</h3>
<p>**JDK动态代理: **利用拦截器(拦截器必须实现InvocationHanlder)加上反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。</p>
<p><strong>CGLiB动态代理:</strong> 利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p>
<h4><strong>何时使用JDK还是CGLIB？</strong></h4>
<p>1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP。</p>
<p>2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP。</p>
<p>3、如果目标对象没有实现了接口，必须采用CGLIB库，Spring会自动在JDK动态代理和CGLIB之间转换。</p>
<h4><strong>如何强制使用CGLIB实现AOP？</strong></h4>
<p>1、添加CGLIB库(aspectjrt-xxx.jar、aspectjweaver-xxx.jar、cglib-nodep-xxx.jar) 2、在Spring配置文件中加入&lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt;</p>
<h4><strong>JDK动态代理和CGLIB字节码生成的区别？</strong></h4>
<p>1、JDK动态代理只能对实现了接口的类生成代理，而不能针对类。</p>
<p>2、CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，并覆盖其中方法实现增强，但是因为采用的是继承，所以该类或方法最好不要声明成final，对于final类或方法，是无法继承的。</p>
<h4><strong>CGlib比JDK快？</strong></h4>
<p>1、使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类， 在jdk6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理， 因为CGLib原理是动态生成被代理类的子类。</p>
<p>2、在jdk6、jdk7、jdk8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLIB代理效率，只有当进行大量调用的时候，jdk6和jdk7比CGLIB代理效率低一点，但是到jdk8的时候，jdk代理效率高于CGLIB代理，总之，每一次jdk版本升级，jdk代理效率都得到提升，而CGLIB代理消息确有点跟不上步伐。</p>
<h4><strong>Spring如何选择用JDK还是CGLiB？</strong></h4>
<p>1、当Bean实现接口时，Spring就会用JDK的动态代理。 2、当Bean没有实现接口时，Spring使用CGlib是实现。 3、可以强制使用CGlib（在spring配置中加入&lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt;）。</p>
<h4><strong>JDK动态代理实现</strong></h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserManager</span> <span class="token punctuation">{</span>
    <span class="token comment">//新增用户抽象方法</span>
    <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//删除用户抽象方法</span>
    <span class="token keyword">void</span> <span class="token function">delUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserManagerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserManager</span> <span class="token punctuation">{</span>
    <span class="token comment">//重写新增用户方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了新增的方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"传入参数为 userName: "</span><span class="token operator">+</span>userName<span class="token operator">+</span><span class="token string">" password: "</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//重写删除用户方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了删除的方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"传入参数为 userName: "</span><span class="token operator">+</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span><span class="token comment">//需要代理的目标对象</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK动态代理，监听开始！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK动态代理，监听结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//定义获取代理对象方法</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getJDKProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> targetObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//为目标对象target赋值</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> targetObject<span class="token punctuation">;</span>
        <span class="token comment">//JDK动态代理只能针对实现了接口的类进行代理，newProxyInstance 函数所需参数就可看出</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>targetObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JdkProxy</span> jdkProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdkProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化JDKProxy对象</span>
        <span class="token class-name">UserManager</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserManager</span><span class="token punctuation">)</span> jdkProxy<span class="token punctuation">.</span><span class="token function">getJDKProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserManagerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取代理对象</span>
        user<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"123123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行新增方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4><strong>CGlib实现</strong></h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span><span class="token comment">//需要代理的目标对象</span>

    <span class="token comment">//重写拦截方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cglib动态代理，监听开始！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法执行，参数：target 目标对象 arr参数数组</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cglib动态代理，监听结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//定义获取代理对象方法</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getCglibProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> objectTarget<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//为目标对象target赋值</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> objectTarget<span class="token punctuation">;</span>
        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置父类,因为Cglib是针对指定的类生成一个子类，所以需要指定父类</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>objectTarget<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置回调</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建并返回代理对象</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CglibProxy</span> cglib <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化CglibProxy对象</span>
        <span class="token class-name">UserManager</span> user <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token class-name">UserManager</span><span class="token punctuation">)</span> cglib<span class="token punctuation">.</span><span class="token function">getCglibProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserManagerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取代理对象</span>
        user<span class="token punctuation">.</span><span class="token function">delUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行删除方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/Spring%20bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F.html</link>
      <guid>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/Spring%20bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F.html</guid>
      <source url="https://maijunxuan.cn/rss.xml"></source>
      <description>Spring bean的作用域 阅读了一下Spring官方文档中，关于bean的作用域这一块的内容。Spring5官方文档中，共介绍了六种bean作用域，这篇文章来简单介绍一下这六种作用域的含义。 1.Bean作用域的种类 在Spring官方文档中，共提到了6种不同的Bean作用域，分别是： image-20220715175906301 需要注意的是...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[<h3>Spring bean的作用域</h3>
<p>阅读了一下<code>Spring</code>官方文档中，关于<code>bean</code>的作用域这一块的内容。<code>Spring5</code>官方文档中，共介绍了六种<code>bean</code>作用域，这篇文章来简单介绍一下这六种作用域的含义。</p>
<h4>1.Bean作用域的种类</h4>
<p>在<code>Spring</code>官方文档中，共提到了<code>6</code>种不同的<code>Bean</code>作用域，分别是：</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207151759375.png" alt="image-20220715175906301"></p>
<p>需要注意的是，前两种是<code>Spring</code>中<code>bean</code>的基本作用域，而后四种，算是扩展的作用域，只能在<code>web</code>应用中使用。下面我就来分别介绍一下这<code>6</code>种不同的作用域。</p>
<h5>1.1 singleton作用域</h5>
<p><strong>singleton（单例）是Spring中，bean默认的作用域</strong>。若一个<code>bean</code>的作用域是单例的，那么每个<code>IoC</code>容器只会创建这个<code>bean</code>的一个实例对象。所有对这个<code>bean</code>的依赖，以及获取这个<code>bean</code>的代码，拿到的都是同一个<code>bean</code>实例。<code>Spring</code>容器在创建这个<code>bean</code>后，会将它缓存在容器中（实际上是放在一个<code>ConcurrentHashMap</code>中）。<strong>Spring中的bean不是线程安全的，所以只有在我们只关注bean能够提供的功能，而不在意它的状态（属性）时，才应该使用这个作用域</strong>。</p>
<p>需要注意的一点是，这里所说的单例，和设计模式中所提到的单例模式不同。设计模式中的单例，是强制一个类有且只有一个对象，我们如果不通过特殊的手段，将无法为这个单例类创建多个对象。而<code>Spring</code>中的单例作用域不同，这里的单例指的是在一个<code>Spring</code>容器中，只会缓存<code>bean</code>的唯一对象，所有通过容器获取这个<code>bean</code>的方式，最终拿到的都是同一个对象。但是在不同的<code>Spring</code>容器中，每一个<code>Spring</code>容器都可以拥有单例<code>bean</code>的一个实例对象，也就是说，这里的单例限定在一个<code>Spring</code>容器中，而不是整个应用程序。并且我们依然可以通过<code>new</code>的方式去自己创建<code>bean</code>。</p>
<h5>1.2 prototype作用域</h5>
<p><code>prototype</code>可以理解为多例。若一个<code>bean</code>的作用域是<code>prototype</code>，那么<code>Spring</code>容器并不会缓存创建的<code>bean</code>，程序中对这个<code>bean</code>的每一次获取，容器都会重新实例化一个<code>bean</code>对象。<strong>通常，如果我们需要使用bean的状态（属性），且这个状态是会改变的，那么我们就可以将它配置为这个作用域，以解决线程安全的问题</strong>。因为对于单例<code>bean</code>来说，多个线程共享它的可变属性，会存在线程安全问题。</p>
<p>前面也提过，如果<code>bean</code>的作用域是<code>prototype</code>的，那么容器在创建完这个<code>bean</code>后，并不会将它保存在容器中，这也就意味着，<code>Spring</code>容器并不能为我们做这个对象的销毁工作（比如资源释放）。此时我们可以通过<code>Spring</code>提供的接口，自定义一个后处理器，然后将这些<code>bean</code>的引用存储在这个后处理器中，当容器回调这个后处理器的方法时，我们可以在方法中通过提前存储的<code>bean</code>的引用，将它们销毁。</p>
<h5>1.3 request作用域</h5>
<p><code>request</code>作用域将<code>bean</code>的使用范围限定在一个<code>http</code>请求中，对于每一个请求，都会单独创建一个<code>bean</code>，若请求结束，<code>bean</code>也会随之销毁。使用<code>request</code>作用域一般不会存在线程安全问题，因为在<code>Web</code>应用中，每个请求都是由一个单独的线程进行处理，所有线程之间并不会共享<code>bean</code>，从而不会存在线程安全的问题。</p>
<p>这个作用域只能使用在<code>Web</code>应用中。如果使用的是注解扫描配置<code>bean</code>，那么在<code>bean</code>所属的类上使用<code>@RequestScope</code>注解即可使用此作用域，若是基于<code>xml</code>文件，则通过<code>bean</code>的<code>scope</code>配置项：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;bean id="userPreferences" class="com.foo.UserPreferences" scope="request"/&gt;
</code></pre></div><h5>1.4 session作用域</h5>
<p><code>session</code>作用域将<code>bean</code>的使用范围一次在一次<code>http会话</code>中，对于每一个会话，<code>Spring</code>容器都会创建一个单独的<code>bean</code>，若<code>session</code>被销毁，则<code>bean</code>也随之销毁。我们可以修改<code>bean</code>的状态，这个修改只对当前会话可见，但是是否线程安全呢？<code>Spring</code>文档中并未提及，但我认为不是线程安全的，因为每一个<code>session</code>可以对应于多个<code>request</code>，这些请求不一定就是串行执行的，比如说用户打开多个界面，同时进行多次操作，那后台将同时处理同一个<code>session</code>的多个<code>request</code>，此时并不能保证<code>bean</code>的线程安全。</p>
<p>与<code>request</code>作用域一样，<code>session</code>作用域只能使用在<code>Web</code>应用中。我们可以使用<code>@SessionScope</code>将<code>bean</code>指定为<code>session</code>作用域，也可以使用<code>xml</code>配置方式：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;bean id="userPreferences" class="com.foo.UserPreferences" scope="session"/&gt;
</code></pre></div><h5>1.5 application作用域</h5>
<p>学过<code>Servlet</code>的应该对<code>application</code>作用域有所了解，在<code>Servlet</code>程序中，有一个全局的<code>ServletContext</code>对象，这个对象被整个<code>web</code>应用所共享，我们可以通过<code>setAttribute</code>方法向其中添加全局共享的数据。而<code>Spring</code>中，<code>application</code>作用域就是这么实现的，作用域为<code>application</code>的<code>bean</code>，将会被作为<code>ServletContext</code>的属性，存储在其中，然后可以被全局访问，而且一个<code>ServletContext</code>只会存储这个<code>bean</code>的一个实例对象。<code>ServletContext</code>被销毁，这个<code>bean</code>自然也跟着被销毁。我们发现，这好像有点类似于<code>singleton</code>这个作用域，确实非常类似，但是也有一些区别。单例<code>bean</code>是一个<code>Spring</code>只会创建一个，而这里的却是每个<code>ServletContext</code>包含一个，不论有多少<code>Spring</code>容器，<code>bean</code>的数量只取决于<code>ServletContext</code>，而且单例<code>bean</code>只能通过容器去获取，是隐式的，而这种作用域的<code>bean</code>却是公开的，存储在<code>ServletContext</code>中，可直接通过<code>ServletContext</code>获取。</p>
<p><code>application</code>作用域也只能用于<code>web</code>应用中。使用方式和之前几种类似，可以通过<code>@ApplicationScope</code>注解，也可以使用<code>xml</code>配置文件：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;bean id="appPreferences" class="com.foo.AppPreferences" scope="application"/&gt;
</code></pre></div><h5>1.5 websocket作用域</h5>
<p><code>websocket</code>是一种应用层的通信协议，它提供应用层的全双工通信，而<code>Spring</code>提供对<code>websocket</code>协议的支持，于是就有了这么一个作用域。在我看的这个<code>Spring</code>官方文档中。若一个<code>bean</code>的作用域为<code>websocket</code>，则只作用于一次<code>websocket</code>通信，若连接被释放，则<code>bean</code>自然也会被销毁。需要注意的一点是需要对 WebSocket 作用域的 Bean 使用作用域代理模式</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>scopeName <span class="token operator">=</span> <span class="token string">"websocket"</span><span class="token punctuation">,</span> proxyMode <span class="token operator">=</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">TARGET_CLASS</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Invoked after dependencies injected</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>

    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Invoked when the WebSocket session ends</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MyBean</span> myBean<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">MyController</span><span class="token punctuation">(</span><span class="token class-name">MyBean</span> myBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>myBean <span class="token operator">=</span> myBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/action"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// this.myBean from the current WebSocket session</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>2. 为什么global session没有了？</h4>
<p>​	在其他的文章中，我们常常可以看到会有global session这个作用域，但是为什么我们从刚刚的官方文档没有看到呢？</p>
<h5>global session作用域是什么</h5>
<p>这个作用域就比较特殊了，<code>globalSession</code>作用域的效果与<code>session</code>作用域类似，但是只适用于基于<code>portlet</code>的<code>web</code>应用程序中。<code>Portlet</code>规范定义了<code>globalSession</code>的概念，该概念在组成单个<code>Portlet Web</code>应用程序的所有<code>Portlet</code>之间共享（引用自<code>Spring</code>文档）。说实话，在看到这里之前，我从来没听说过<code>portlet</code>。我现在所学的，基本上都是基于<code>Servlet</code>的<code>web</code>应用程序，所有关于这个作用域，我也不理解。但是<code>Spring</code>文档中有提到一点，那就是<strong>如果我们在基于Servlet的web应用程序中使用globalSession作用域，实际上容器使用session作用域进行处理</strong>。</p>
<h5>spring5 去掉了global session</h5>
<p>​		从StackOverFlow的一篇文章中找到了答案<a href="http://stackoverflow.com/questions/54742157/were-globalsession-scoped-beans-removed-from-spring-5-why" target="_blank" rel="noopener noreferrer">java - Were GlobalSession scoped beans removed from spring 5? Why? - Stack Overflow</a>，其中说到从Spring5开始停止了对Portlet的支持，从而去除掉了global session</p>
<p>​</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207151759375.png" type="image/png"/>
    </item>
    <item>
      <title></title>
      <link>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/Spring%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98%E4%B8%8E%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html</link>
      <guid>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/Spring%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98%E4%B8%8E%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html</guid>
      <source url="https://maijunxuan.cn/rss.xml"></source>
      <description>循环依赖 所谓的循环依赖，就是两个或则两个以上的bean互相依赖对方，最终形成闭环。比如“A对象依赖B对象，而B对象也依赖A对象”，或者“A对象依赖B对象，B对象依赖C对象，C对象依赖A对象”；类似以下代码： 常规情况下，会出现以下情况： 通过构建函数创建A对象（A对象是半成品，还没注入属性和调用init方法）。 A对象需要注入B对象，发现对象池（缓存...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[<h2>循环依赖</h2>
<p>所谓的<code>循环依赖</code>，就是两个或则两个以上的<code>bean</code>互相依赖对方，最终形成<code>闭环</code>。比如“A对象依赖B对象，而B对象也依赖A对象”，或者“A对象依赖B对象，B对象依赖C对象，C对象依赖A对象”；类似以下代码：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>常规情况下，会出现以下情况：</p>
<ol>
<li>通过构建函数创建A对象（A对象是半成品，还没注入属性和调用init方法）。</li>
<li>A对象需要注入B对象，发现对象池（缓存）里还没有B对象（对象在创建并且注入属性和初始化完成之后，会放入对象缓存里）。</li>
<li>通过构建函数创建B对象（B对象是半成品，还没注入属性和调用init方法）。</li>
<li>B对象需要注入A对象，发现对象池里还没有A对象。</li>
<li>创建A对象，循环以上步骤。</li>
</ol>
<h2>三级缓存</h2>
<p><code>Spring</code>解决<code>循环依赖</code>的核心思想在于<code>提前曝光</code>：</p>
<ol>
<li>通过构建函数创建A对象（A对象是半成品，还没注入属性和调用init方法）。</li>
<li>A对象需要注入B对象，发现缓存里还没有B对象，将<code>半成品对象A</code>放入<code>半成品缓存</code>。</li>
<li>通过构建函数创建B对象（B对象是半成品，还没注入属性和调用init方法）。</li>
<li>B对象需要注入A对象，从<code>半成品缓存</code>里取到<code>半成品对象A</code>。</li>
<li>B对象继续注入其他属性和初始化，之后将<code>完成品B对象</code>放入<code>完成品缓存</code>。</li>
<li>A对象继续注入属性，从<code>完成品缓存</code>中取到<code>完成品B对象</code>并注入。</li>
<li>A对象继续注入其他属性和初始化，之后将<code>完成品A对象</code>放入<code>完成品缓存</code>。</li>
</ol>
<p>其中缓存有三级：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/** Cache of singleton objects: bean name to bean instance. */</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/** Cache of early singleton objects: bean name to bean instance. */</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> earlySingletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token doc-comment comment">/** Cache of singleton factories: bean name to ObjectFactory. */</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ObjectFactory</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> singletonFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>| 缓存                  | 说明                                                         |
|</p>
]]></content:encoded>
      <enclosure url="https://segmentfault.com/img/bVbLnSZ" type="image/"/>
    </item>
    <item>
      <title>Spring的常用注解</title>
      <link>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/Spring%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html</link>
      <guid>https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/Spring%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Spring的常用注解</source>
      <description>Spring的常用注解 注解本身没有功能的，就和 xml 一样。注解和 xml 都是一种元数据，元数据即解释数据的数据，这就是所谓配置。 本文主要罗列 Spring|Spring MVC相关注解的简介。 Spring部分 1、声明bean的注解 @Component 组件，没有明确的角色 @Service 在业务逻辑层使用（service层） @Rep...</description>
      <pubDate>Mon, 19 Sep 2022 15:32:06 GMT</pubDate>
      <content:encoded><![CDATA[
<p>注解本身没有功能的，就和 xml 一样。注解和 xml 都是一种元数据，元数据即解释数据的数据，这就是所谓配置。</p>
<p>本文主要罗列 Spring|Spring MVC相关注解的简介。</p>
<p>Spring部分</p>
<h2><strong>1、声明bean的注解</strong></h2>
<p>@Component 组件，没有明确的角色</p>
<p>@Service 在业务逻辑层使用（service层）</p>
<p>@Repository 在数据访问层使用（dao层）</p>
<p>@Controller 在展现层使用，控制器的声明（C）</p>
<h2><strong>2、注入bean的注解</strong></h2>
<p>@Autowired：由Spring提供</p>
<p>@Inject：由JSR-330提供</p>
<p>@Resource：由JSR-250提供</p>
<p>都可以注解在set方法和属性上，推荐注解在属性上（一目了然，少写代码）。</p>
<h2><strong>3、Java配置类相关注解</strong></h2>
<p>@Configuration 声明当前类为配置类，相当于xml形式的Spring配置（类上）</p>
<p>@Bean 注解在方法上，声明当前方法的返回值为一个bean，替代xml中的方式（方法上）</p>
<p>@Configuration 声明当前类为配置类，其中内部组合了@Component注解，表明这个类是一个bean（类上）</p>
<p>@ComponentScan 用于对Component进行扫描，相当于xml中的（类上）</p>
<p>@WishlyConfiguration 为@Configuration与@ComponentScan的组合注解，可以替代这两个注解</p>
<h2><strong>4、切面（AOP）相关注解</strong></h2>
<p>Spring支持AspectJ的注解式切面编程。</p>
<p>@Aspect 声明一个切面（类上） 使用@After、@Before、@Around定义建言（advice），可直接将拦截规则（切点）作为参数。</p>
<p>@After 在方法执行之后执行（方法上） @Before 在方法执行之前执行（方法上） @Around 在方法执行之前与之后执行（方法上）</p>
<p>@PointCut 声明切点 在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持（类上）</p>
<h2><strong>5、@Bean的属性支持</strong></h2>
<p>@Scope 设置Spring<a href="https://cloud.tencent.com/product/tke?from=10680" target="_blank" rel="noopener noreferrer">容器</a>如何新建Bean实例（方法上，得有@Bean） 其设置类型包括：</p>
<p>Singleton （单例,一个Spring容器中只有一个bean实例，默认模式）, Protetype （每次调用新建一个bean）, Request （web项目中，给每个http request新建一个bean）, Session （web项目中，给每个http session新建一个bean）, GlobalSession（给每一个 global http session新建一个Bean实例）</p>
<p>@StepScope 在Spring Batch中还有涉及</p>
<p>@PostConstruct 由JSR-250提供，在构造函数执行完之后执行，等价于xml配置文件中bean的initMethod</p>
<p>@PreDestory 由JSR-250提供，在Bean销毁之前执行，等价于xml配置文件中bean的destroyMethod</p>
<h2><strong>6、@Value注解</strong></h2>
<p>@Value 为属性注入值（属性上） 支持如下方式的注入：</p>
<p>注入普通字符</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> name<span class="token punctuation">;</span>
</code></pre></div><p>注入操作系统属性</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{systemProperties['os.name']}"</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> osName<span class="token punctuation">;</span>
</code></pre></div><p>注入表达式结果</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{T(java.lang.Math).random()}"</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> randomNumber<span class="token punctuation">;</span>
</code></pre></div><p>注入其它bean属性</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"domeClass.name"</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> name<span class="token punctuation">;</span>
</code></pre></div><p>注入文件资源</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"classpath:com/mjx/hello/test.txt"</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> file<span class="token punctuation">;</span>
</code></pre></div><p>注入网站资源</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> url<span class="token punctuation">;</span>
</code></pre></div><p>注入配置文件</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${book.name}"</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> name<span class="token punctuation">;</span>
</code></pre></div><h2><strong>7、环境切换</strong></h2>
<p>@Profile 通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境。（类或方法上）</p>
<p>@Conditional Spring4中可以使用此注解定义条件话的bean，通过实现Condition接口，并重写matches方法，从而决定该bean是否被实例化。（方法上）</p>
<h2><strong>8、异步相关</strong></h2>
<p>@EnableAsync 配置类中，通过此注解开启对异步任务的支持，叙事性AsyncConfigurer接口（类上）</p>
<p>@Async 在实际执行的bean方法使用该注解来申明其是一个异步任务（方法上或类上所有的方法都将异步，需要@EnableAsync开启异步任务）</p>
<h2><strong>9、定时任务相关</strong></h2>
<p>@EnableScheduling 在配置类上使用，开启计划任务的支持（类上）</p>
<p>@Scheduled 来申明这是一个任务，包括cron,fixDelay,fixRate等类型（方法上，需先开启计划任务的支持）</p>
<h2><strong>10、@Enable*注解说明</strong></h2>
<p>这些注解主要用来开启对xxx的支持。 @EnableAspectJAutoProxy 开启对AspectJ自动代理的支持</p>
<p>@EnableAsync 开启异步方法的支持</p>
<p>@EnableScheduling 开启计划任务的支持</p>
<p>@EnableWebMvc 开启Web MVC的配置支持</p>
<p>@EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持</p>
<p>@EnableJpaRepositories 开启对SpringData JPA Repository的支持</p>
<p>@EnableTransactionManagement 开启注解式事务的支持</p>
<p>@EnableTransactionManagement 开启注解式事务的支持</p>
<p>@EnableCaching 开启注解式的缓存支持</p>
<h2><strong>11、测试相关注解</strong></h2>
<p>@RunWith 运行器，Spring中通常用于对JUnit的支持</p>
<p>@ContextConfiguration 用来加载配置ApplicationContext，其中classes属性用来加载配置类</p>
<h2>12、SpringMVC部分</h2>
<p>@EnableWebMvc 在配置类中开启Web MVC的配置支持，如一些ViewResolver或者MessageConverter等，若无此句，重写WebMvcConfigurerAdapter方法（用于对SpringMVC的配置）。</p>
<p>@Controller 声明该类为SpringMVC中的Controller</p>
<p>@RequestMapping 用于映射Web请求，包括访问路径和参数（类或方法上）</p>
<p>@ResponseBody 支持将返回值放在response内，而不是一个页面，通常用户返回json数据（返回值旁或方法上）</p>
<p>@RequestBody 允许request的参数在request体中，而不是在直接连接在地址后面。（放在参数前）</p>
<p>@PathVariable 用于接收路径参数，比如@RequestMapping(“/hello/{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。</p>
<p>@RestController 该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。</p>
<p>@ControllerAdvice 通过该注解，我们可以将对于控制器的全局配置放置在同一个位置，注解了@Controller的类的方法可使用@ExceptionHandler、@InitBinder、@ModelAttribute注解到方法上， 这对所有注解了 @RequestMapping的控制器内的方法有效。</p>
<p>@ExceptionHandler 用于全局处理控制器里的异常</p>
<p>@InitBinder 用来设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中。</p>
<p>@ModelAttribute 本来的作用是绑定键值对到Model里，在@ControllerAdvice中是让全局的@RequestMapping都能获得在此处设置的键值对。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java中的泛型</title>
      <link>https://maijunxuan.cn/Java/Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B.html</link>
      <guid>https://maijunxuan.cn/Java/Java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Java中的泛型</source>
      <description>Java中的泛型 泛型是jdk5中引入的概念，他的出现使得我们操作集合在存取时无需手动进行类型判断、强转等操作。从而使得代码可以更加干净清爽。 泛型的基础使用示例 泛型的使用场景 泛型大部分是应用于项目开发中通用对象例如我们常用的Map image-20220906000146969 什么是泛型擦除，为什么要泛型擦除呢 java本质就一门伪泛型语言，泛...</description>
      <pubDate>Mon, 05 Sep 2022 16:38:25 GMT</pubDate>
      <content:encoded><![CDATA[
<p>泛型是jdk5中引入的概念，他的出现使得我们操作集合在存取时无需手动进行类型判断、强转等操作。从而使得代码可以更加干净清爽。</p>
<h2>泛型的基础使用示例</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 泛型接口
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GeneratorInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 实现泛型接口不指定类型
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">GeneratorInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 泛型接口指定类型
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">GeneratorInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>



<span class="token doc-comment comment">/**
 * 泛型方法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorMethod</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">E</span> e <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GeneratorMethod</span><span class="token punctuation">.</span><span class="token function">printArray</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 泛型类的用法
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericObj</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> key<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setKey</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">GenericObj</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GenericObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>泛型的使用场景</h2>
<p>泛型大部分是应用于项目开发中通用对象例如我们常用的Map</p>
<p><img src="https://s2.loli.net/2023/06/14/qeaxh1pIVO83wEy.png" alt="image-20220906000146969"></p>
<h2>什么是泛型擦除，为什么要泛型擦除呢</h2>
<p>java本质就一门伪泛型语言，泛型的作用仅仅在编译期间进行类型检查的，一旦生成字节码之后，关于泛型的一切都会消失，如下所示，我们定义了Integer类型的list集合，我们完完全全可以通过反射的方式将字符串存入集合中，如下图所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        list.add("s"); 报错</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">List</span><span class="token punctuation">&gt;</span></span> clazz<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        java的泛型时伪泛型，运行时就会被擦除</span>
        <span class="token class-name">Method</span> add <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        add<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Object</span> object<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre></div><p>我们都知道泛型擦除是编译器行为，为了保证引入泛型而不创建新的类型，以及节省虚拟机没必要的开销，jvm会自动将泛型擦除。 这一点我们用如下的例子就能看出，相同参数不通泛型的方法根本不能重载</p>
<p><img src="https://s2.loli.net/2023/06/14/2lSnYwpeBMbkzOu.png" alt="img"></p>
<h2>既然编译器要把泛型擦除，为什么还要用泛型呢？用Object不行吗？</h2>
<ol>
<li>使用泛型后便于集合的取操作，且提高的代码的可读性</li>
<li>如下代码所示，虽然一下代码在编译后会擦除为Object类型，但是通过泛型限定后，jvm就会自动将其强转为Comparable类型，减少我们编写一些没必要的代码</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Comparable</span> comparable <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            comparable<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><p><img src="https://s2.loli.net/2023/06/14/pmZwGd5MbDAkjKU.png" alt="image-20220905235453573"></p>
<h2>什么是桥方法</h2>
<p>如下代码所示，我们创建了一个泛型类，然后继承这个泛型类，继承时ide时，为了保证类的多态性，他会自动让我们补充构造方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Node.setData"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>

    <span class="token comment">//继承泛型类后自动添加的，用于保证泛型的多态性</span>
    <span class="token keyword">public</span> <span class="token class-name">MyNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h2>泛型有哪些限制？</h2>
<h3>泛型不可以被实例化，如下所示</h3>
<p><img src="https://s2.loli.net/2023/06/14/hmywftuSKlvDOzj.png" alt="image-20220905235435825"></p>
<h3>泛型参数不可以是基本类型</h3>
<p>我们都知道泛型仅在编译器存在，当编译结束泛型就会被擦除，对象就会编程Object类型，所以基本类型作为泛型参数ide就会直接报错 <img src="https://s2.loli.net/2023/06/14/ZXbLQeKtdwi9myE.png" alt="在这里插入图片描述"></p>
<h3>泛型无法被实例化，无论是泛型变量还是泛型数组</h3>
<p>从上文我们就知道泛型会在编译期完成后被擦除，这正是因为jvm不想为泛型创建新的类型造成没必要的开销</p>
<h3>不能抛出或者捕获T类型的泛型异常</h3>
<p><img src="https://s2.loli.net/2023/06/14/36Zyf5gDSsWXwGQ.png" alt="image-20220905235406238"></p>
<h3>不能声明两个参数一样泛型不同的方法</h3>
<p>上述以说明，略</p>
<h3>泛型不能被声明为static</h3>
<p><img src="https://s2.loli.net/2023/06/14/DawRgzKd63SlANE.png" alt="在这里插入图片描述"></p>
<h2>以下代码是否能编译，为什么？</h2>
<h3>例1</h3>
<p>明显不能T不知道是何种类型</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Algorithm</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">T</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> x <span class="token operator">&gt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre></div><h3>例2</h3>
<p>不能，泛型不能被static修饰</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">T</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">T</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre></div><h2>泛型的通配符</h2>
<h3>什么是通配符，它用于解决什么问题</h3>
<p>我们都知道通配符是解决泛型之间无法协变的问题，当我们使用一种类型作为泛型参数时，却无法使用他的父类或者子类进行赋值，而通配符就是解决这种问题的对策。</p>
<h3>上界通配符</h3>
<h4>上界通配符使用示例</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 水果父类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 水果的子类 苹果
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 容器类
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Container</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 泛型测试
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestParttern</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Container</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token punctuation">&gt;</span></span> container<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h4>为什么上界通配符只能get不能set</h4>
<p>如上代码所示，当我们用上界通配符<code>? extends Fruit</code>，我们用其子类作为泛型参数，这只能保证我们get到的都是这个子类的对象。 但我们却忘了一点，当我们用子类apple作为泛型参数时，泛型的工作机制仅仅是对这个对象加个一个编号<code>CAP#1</code>，当我set一个新的对象，编译器无法识别这个对象类型是否和编号匹配。</p>
<p><img src="https://s2.loli.net/2023/06/14/bJxzLB9T5mYOCZ1.png" alt="image-20220905235325646"></p>
<h3>下界通配符</h3>
<h4>下界通配符使用示例</h4>
<p>这里使用的对象还是上述对象，只不过通配符改为下界通配符</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 泛型测试
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestParttern</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Container</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> container1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fruit</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h4>下界通配符原理介绍</h4>
<p>下界通配符决定了泛型的最大粒度的上限，通过super声明，它可以很直观的告诉我们泛型参数必须传super后的父类如下所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">Container</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> container1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fruit</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4>为什么下界通配符只能set不能get</h4>
<p>但是上界通配符有个缺点，他告诉我们泛型的最大粒度上限，结果上述声明后，我们泛型参数可以是apple的所有父类，所以我们进行set操作时，就可以set当前apple父类的所有子类型，这就使得我们get时无法很精确的确定类型，最好的情况只能以父类的形式get出来，而最差最差的情况只能以Object的方式get出来。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">Fruit</span> data <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://s2.loli.net/2023/06/14/qeaxh1pIVO83wEy.png" type="image/png"/>
    </item>
    <item>
      <title>Lambda实践</title>
      <link>https://maijunxuan.cn/Java/Lambda%E5%AE%9E%E8%B7%B5.html</link>
      <guid>https://maijunxuan.cn/Java/Lambda%E5%AE%9E%E8%B7%B5.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Lambda实践</source>
      <description>Lambda实践 java8以前的comparator和java8的comparator 可以看到使用lambda表达式，使得对象的创建以及声明变得简单且优雅 lambda的优势 匿名：使用lambda声明方法无需像普通方法需要很多明确的东西，它给了我们一种写得少但是想得多的优雅 函数：lambda表达式用起来就和方法一样，有参数列表、函数主体、返回值...</description>
      <pubDate>Mon, 05 Sep 2022 16:38:25 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>java8以前的comparator和java8的comparator</h2>
<p>可以看到使用lambda表达式，使得对象的创建以及声明变得简单且优雅</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>//老版本的比较器声明方式
Comparator&lt;Apple&gt; comparator=new Comparator&lt;Apple&gt;() {
    @Override
    public int compare(Apple a1, Apple a2) {
        return a1.getWeight().compareTo(a2.getWeight());
    }
};
//java8的比较器的声明方式
Comparator&lt;Apple&gt; cmp=(a1,a2)-&gt;a1.getWeight().compareTo(a2.getWeight());
</code></pre></div><h2>lambda的优势</h2>
<ol>
<li>匿名：使用lambda声明方法无需像普通方法需要很多明确的东西，它给了我们一种写得少但是想得多的优雅</li>
<li>函数：lambda表达式用起来就和方法一样，有参数列表、函数主体、返回值等</li>
<li>传递：lambda可以作为参数传递或者存储在变量中</li>
<li>简洁：如上文所示的代码，使用lambda可以避免没必要的模板编写，优雅且简洁</li>
</ol>
<h2>lambda的使用场景</h2>
<h3>函数式接口</h3>
<p>在介绍lambda表达式之前我们需要先介绍一下函数式接口，因为lambda就是为缩写函数式的接口而生的。 如下图所示Runnable接口就是一个函数式接口，函数式接口的特征也很明显，他是一个接口，且有且只有一个方法。并且还有一个注解<code>@FunctionalInterface</code>,需要说明的是这个注解非必须的，他只是告知编译器这是个函数式接口而已，让编译器留点心 也正是因为方法为一，才能确保简洁的lambda表达式可以唯一确定匹配接口的方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209052232783.png" alt="image-20220905223204749"></p>
<h3>函数式描述符</h3>
<p>了解了函数式接口，了解函数描述符就很简单了，以Runnable为例，他的方法是 <code>public abstract void run();</code> 所以他是一个没有参数且没有返回值的方法。 那么它的函数描述符就是<code>() -&gt; void</code>，后续我们使用lambda表达式的时候只要遵循这个表达式即可。 再看看一个例子，这也是笔者自定义的一个函数式接口，可以看出他的入参是一个苹果类，返回值是boolean，所以它的函数描述符是**(Apple)-&gt;boolean**</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>interface ApplePredicate{
         boolean test(Apple a);
    }
ApplePredicate applePredicate=(a)-&gt;true;
</code></pre></div><p>这就是为什么我们声明ApplePredicate可以缩写成下文所示</p>
<h2>使用lambda优化环绕执行模式的调用</h2>
<h3>需求描述</h3>
<p>我们现在有个文件data.txt,它的内容为</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Java
8
Lambdas
In
Action
</code></pre></div><p>我们希望编写的代码只读取第1行的结果然后返回即可</p>
<h3>代码实现</h3>
<p>可以看到这个需求实现也非常简单，如下所示</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> public static String processFileLimited() throws IOException {
        try (BufferedReader br =
                     new BufferedReader(new FileReader("F:\\github\\src\\main\\resources\\lambdasinaction\\chap3\\data.txt"))) {
            return br.readLine();
        }
    }
</code></pre></div><h3>项目演进</h3>
<h4>需求描述</h4>
<p>现在需求变了，我们希望能够读取两行，后续可能还会发生变化，这时候警觉的你就会发现读取文件这个行为可能多变无常，我们需要对变化进行封装</p>
<h4>声明函数式接口</h4>
<p>所以我们将读取文件这个行为封装成一个函数式接口，代码如下所示</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public interface BufferedReaderProcessor{
         String process(BufferedReader b) throws IOException;

    }
</code></pre></div><h4>修改原有方法逻辑</h4>
<p>这时候我们在进行行为参数化，将读取文件内容这个逻辑参数化，后续我们就可以大展身手了</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public static String processFile(BufferedReaderProcessor p) throws IOException {
        try(BufferedReader br = new BufferedReader(new FileReader("F:\\github\\Java8InAction\\src\\main\\resources\\lambdasinaction\\chap3\\data.txt"))){
            return p.process(br);
        }
    }
</code></pre></div><h4>调用并查看测试结果</h4>
<p>这时候我们就可以使用lambda进行调用测试了</p>
<p>测试读取1行</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>//        测试读取1行 输出结果 Java
        String s = processFile(b -&gt; b.readLine());
        System.out.println(s);
</code></pre></div><p>测试读取2行</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>//        测试读取2行 输出结果 Java 8
        String s2 = processFile(b -&gt; b.readLine()+" "+b.readLine());
        System.out.println(s2);
</code></pre></div><p>测试读取1行并行尾加上 "本人已读"</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>        //测试读取1行并行尾加上 "本人已读" 输出结果 Java 本人已读
        String s3 = processFile(b -&gt; b.readLine()+" 本人已读");
        System.out.println(s3);
</code></pre></div><h2>"现成的轮子" java8自带的函数式接口</h2>
<h3>简介</h3>
<p>其实面对常见的行为参数化，java已经考虑到这些情况了，他也为我们提供了不少的现有轮子，下面我们就来一一介绍几个常见的轮子</p>
<h3>Predicate</h3>
<p>这个接口就是针对于那些需要传入指定类型，并返回Boolean行的行为，例如：我们需要一组对字符串进行判断操作的行为，我们可以先这样写一个方法，通过Predicate将行为参数化</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public static boolean test(String s,Predicate&lt;String&gt; p){
        return p.test(s);
    }
</code></pre></div><p>假如我们需要判断字符串是大于2，我们就可以这样调用</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> boolean result = test("123", (s) -&gt; s.length() &gt; 12);
        System.out.println(result);
</code></pre></div><p>假如我们需要判断字符串是否为test，我们可以这样调用</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>  boolean result=test("test",(s)-&gt;"test".equals(s));
        System.out.println(result);
</code></pre></div><h3>Consumer</h3>
<p>与上同理，Consumer的函数描述符为<code>(T)-&gt;void</code>,即传入任意类型，无返回值的操作。 例如我们现在要遍历并输出不同类型的元素，我们可以先定义一个方法，将consumer行为参数化</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> public static &lt;T&gt; void   forEach(List&lt;T&gt; list, Consumer&lt;T&gt; consumer){
        for (T t : list) {
            consumer.accept(t);
        }
    } 
</code></pre></div><p>假如我们要遍历整形数组，我们可以这样</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> List&lt;Integer&gt; integerList=new ArrayList&lt;&gt;();
        integerList.add(1);
        integerList.add(2);
        integerList.add(3);
        integerList.add(4);
        forEach(integerList,(i)-&gt; System.out.println(i));
</code></pre></div><h3>Function</h3>
<p>通过查看源码，function的定义如下，不难看出，它适用于那些传入T类型返回R类型的行为</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@FunctionalInterface
public interface Function&lt;T, R&gt; {
    R apply(T t);

}

</code></pre></div><p>假如我们要求传入一个字符串，返回它的长度或者字符串第1位unocode码值，我们就可以使用Function做到。 首先我们定义一个方法，将返回整型的行为参数化，如下所示</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> public static Integer StringCalculate(String s, Function&lt;String,Integer&gt; function){
        return function.apply(s);
    }
</code></pre></div><p>调用如下所示</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>        //获取字符串长度
        System.out.println(StringCalculate("123", (s) -&gt; s.length()));
//        获取字符串第1位unicode
        System.out.println(StringCalculate("132", (s) -&gt; s.codePointAt(0)));
</code></pre></div><h3>更多函数式接口</h3>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209052231413.png" alt="image-20220905223123171"> ![在这</p>
<h2>lambda工作原理简析</h2>
<h3>类型检查</h3>
<p>那么问题来了，lambda表达式如此精简，请问它是如何完成类型检查的呢？我们就以下面代码为例，可以看到这段代码就是根据传入的String返回相应的boolean值</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public static &lt;T&gt; boolean test(T s, Predicate&lt;T&gt; p) {
        return p.test(s);
    }
</code></pre></div><p>假如我们这样调用</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>boolean result = test("123", (String s) -&gt; s.length() &gt; 12);
</code></pre></div><p>他的匹配过程就如下图所示，首先根据调用方法找到主方法，根据主方法的泛型得知入参是String，再查看predicate的唯一方法得知返回值是boolean，由此得知函数描述符为<code>String-&gt;boolean</code>,最终和调用的lambda匹配成功，校验通过</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209052228365.png" alt="image-20220905222806554"></p>
<h3>类型推断</h3>
<p>因为函数式接口方法是唯一的，我们也可以对类型进行省略，让java编译器去自动推断类型</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> boolean result = test("123", (s) -&gt; s.length() &gt; 12);
        System.out.println(result);
</code></pre></div><h3>使用限制(使用lambda使用局部变量)</h3>
<p>如下代码所示，这样一段代码在idea中会报红，原因很简单，局部变量分配在栈上，而r线程可能会在该变量被回收之后才使用这个变量，所以java在让线程r访问这个变量的时候，实际上访问到的num是num的副本，所以假如lambda访问变量num，再给num赋值就会爆红，因为如下所示代码若能正常执行，那么r线程最终输出的num很可能前后不一致是随机，进而导致线程安全问题。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token class-name">Runnable</span> r<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
 r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209052232783.png" type="image/png"/>
    </item>
    <item>
      <title>使用缓存会存在哪些问题</title>
      <link>https://maijunxuan.cn/Redis/%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98%E4%BC%9A%E5%AD%98%E5%9C%A8%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98.html</link>
      <guid>https://maijunxuan.cn/Redis/%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98%E4%BC%9A%E5%AD%98%E5%9C%A8%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">使用缓存会存在哪些问题</source>
      <description>使用缓存会存在哪些问题 使用缓存常用于缓解数据库压力以及提高查询效率等问题，在高并发场景下，对于不同场景我们都需要使用合理的技术安排确保中间件和数据库做好协调。 5种缓存问题以及对应策略 缓存穿透 问题简介 尽管我们将数据库中某些数据换到到内存中，但是若有些攻击者使用一些数据库中不存在的key进行恶意攻击，这时候，所有的查询请求就像穿透了缓存中间件一样...</description>
      <pubDate>Mon, 05 Sep 2022 16:38:25 GMT</pubDate>
      <content:encoded><![CDATA[
<p>使用缓存常用于缓解数据库压力以及提高查询效率等问题，在高并发场景下，对于不同场景我们都需要使用合理的技术安排确保中间件和数据库做好协调。</p>
<h2>5种缓存问题以及对应策略</h2>
<h3>缓存穿透</h3>
<h4>问题简介</h4>
<p>尽管我们将数据库中某些数据换到到内存中，但是若有些攻击者使用一些数据库中不存在的key进行恶意攻击，这时候，所有的查询请求就像穿透了缓存中间件一样直接在数据库中进行查询操作，在高并发场景，这样的攻击就会使得数据压力过大，从而导致数据库性能瓶颈。</p>
<h4>应对策略</h4>
<ol>
<li>第一次查询不存在，我们就在redis中缓存该key值，值为null，并设置一个较短的生存时间(这里可能会出现缓存一致性问题，笔者会在后文进行相熟)。</li>
<li>在业务上对查询的值进行校验，例如我们的数据库id分为是0-999，攻击者使用的id为-1，这时候我们完全可以在业务代码上进行校验处理。</li>
<li>将所有key值缓存到布隆过滤器中，每次查询都到redis的布隆过滤器中进行查询，若查询不存在则直接返回。</li>
</ol>
<h3>缓存击穿</h3>
<h4>问题概述</h4>
<p>和上述问题情况一样，也是缓存中查不到用户数据，大量请求打到数据库上，但是这种情况的发生原因却非恶意攻击者所为，原因大抵如下:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. 大量用户查询的某个数据，刚刚好在缓存中过期
2. 大量用户查询的值都在数据中，缓存中没有
</code></pre></div><h4>解决对策</h4>
<ol>
<li>设置热点数据永不过期，亦或者一旦有超过多少个用户在单位时间内查询这个数据，我们就给这个缓存续命</li>
<li>对重要的接口做好熔断和限流，防止用户进行恶意重刷。</li>
<li>加互斥锁(在高并发场景对用户不太友好，不是很建议使用)</li>
</ol>
<h3>缓存雪崩</h3>
<h4>问题原因</h4>
<p>大量缓存数据同一时间到期，所有查询一下子都打到数据库上。导致数据库压力过大进而直接宕机。</p>
<h4>解决策略</h4>
<ol>
<li>设置热点数据永不过期</li>
<li>设置随机过期</li>
</ol>
<h3>缓存污染(缓存空间全满)</h3>
<h4>问题原因</h4>
<p>某些数据查询一次就被缓存在数据库中，随着时间推移，缓存空间已经满了，这时候redis就要根据缓存策略进行缓存置换。这就造成没意义的数据需要通过缓存置换策略来淘汰数据，而且还可能出现淘汰热点数据的情况。</p>
<h4>解决方案</h4>
<p>选定合适的缓存置换策略，而redis缓存策略主要分三类</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>    不淘汰的
    <span class="token number">1</span>. noeviction （v4.0后默认的）:不会淘汰任何过期键，满了就报错
    
    对设置了过期时间的数据中进行淘汰
    <span class="token number">2</span>. volatile-random:随机删除过期key
    <span class="token number">3</span>. volatile-ttl:根据过期时间进行排序，越早过期的数据就优先被淘汰。
    <span class="token number">4</span>. volatile-lru:即最近最少使用算法，redis的lru缓存置换算法相比传统的算法做了一定优化，根据 maxmemory-samples从缓存中随机取出几个key值，然后进行比较在进行淘汰，这样就避免了缓存置换时需要操作一个大链表进行key值淘汰了。
    <span class="token number">5</span>. volatile-lfu:lru只知晓用户最近使用次数，而不知道该数据使用频率，所以lfu就是基于lru进一步的优化，进行淘汰时随机取出访问次数最少的数据，如果最少的数据有多个，按按照lru算法进行淘汰。但是redis只用8bit记录访问次数，超过255就无法进行自增了，所以我们可以使用<span class="token variable"><span class="token variable">`</span>lfu-log-factor<span class="token variable">`</span></span> 和<span class="token variable"><span class="token variable">`</span>lfu-decay-time<span class="token variable">`</span></span>来用户访问次数增加的频率。
    lfu-decay-time：控制访问次数衰减。LFU 策略会计算当前时间和数据最近一次访问时间的差值，并把这个差值换算成以分钟为单位。然后，LFU 策略再把这个差值除以 lfu_decay_time 值，所得的结果就是数据 counter 要衰减的值。若设置为0，则意味着每次扫描访问次数都会扣减。
    lfu-log-factor：用计数器当前的值乘以配置项 lfu_log_factor 再加 <span class="token number">1</span>，再取其倒数，得到一个 p 值；然后，把这个 p 值和一个取值范围在（0，1）间的随机数 r 值比大小，只有 p 值大于 r 值时，计数器才加 <span class="token number">1</span>。 

    从全部数据中进行淘汰
    <span class="token number">6</span>. allkeys-random:从所有键值对中使用lru淘汰
    <span class="token number">7</span>. allkeys-lru:从所有键值对中随机删除
    <span class="token number">8</span>. allkeys-lfu:从所有键值对中使用lfu随机淘汰
</code></pre></div><p>具体可以查看redis配置文件描述</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
# is reached. You can select one from the following behaviors:
#
# volatile-lru -&gt; Evict using approximated LRU, only keys with an expire set.
# allkeys-lru -&gt; Evict any key using approximated LRU.
# volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire set.
# allkeys-lfu -&gt; Evict any key using approximated LFU.
# volatile-random -&gt; Remove a random key having an expire set.
# allkeys-random -&gt; Remove a random key, any key.
# volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)
# noeviction -&gt; Don't evict anything, just return an error on write operations.
#
# LRU means Least Recently Used
# LFU means Least Frequently Used
</code></pre></div><h3>数据库缓存一致性问题</h3>
<h4>问题描述</h4>
<p>用户某个时间段查询的数据刚刚好被更新，结果用户查到的是老数据,我们可能会想到两种应用方案:</p>
<ol>
<li>若我们先清空缓存再更新：很可能出现，数据清空后，刚刚好有个用户进来从数据库中读到老数据，后续就一直使用老数据。</li>
<li>若先更新再更新缓存:刚好更新缓存的时候的线程挂掉，数据不一致问题照样没有得到解决。</li>
</ol>
<h4>解决方案</h4>
<p>Cache Aside Pattern(旁路缓存模式)</p>
<ol>
<li>读缓存:先从缓存读，缓存有直接返回，缓存没有去数据库读，在缓存到Redis中。</li>
<li>写缓存:先更新数据库，再删除缓存。</li>
</ol>
<p>这种方案对于情况1并没有很好的解决，但是情况1发生的概率不大，他需要具备以下4个条件</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>    1. 读操作时刚刚好数据失效
    2. 读操作要先于写操作，且读操作要比写操作后完成(实际上写操作非常慢，更新还要进行锁表等，所以这一步大概率不会发生，生产环境基本最多出现一次脏数据读取或者根本不会发生这种情况)
</code></pre></div><p>针对情况2，我们有3中方案</p>
<p>方案1:若删除失败，我们则将这个key值的过期时间变短(让他秒挂)，但是治标不治本，不建议使用。</p>
<p>方案2:我们可以使用队列+重试机制解决问题，整体步骤为</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>    1. 执行数据库更新操作，成功则进行缓存清空
    2. 若清空失败，则将这个key发送到消息队列中
    3. 业务代码从队列中捞出这个key值进行删除重试直到成功为止
</code></pre></div><p><img src="https://s2.loli.net/2023/06/14/mCMfReBXyoQUDbi.png" alt="在这里插入图片描述"></p>
<p>但是缺点也很明显，对于业务代码侵入性太强，所以我们对解决方案进行升级。</p>
<p>方案3:使用一个异步线程去订阅数据库的binlog，然后使用非业务代码进行删除重试</p>
<p><img src="https://s2.loli.net/2023/06/14/MdzhBquK1o3ESys.png" alt="在这里插入图片描述"></p>
]]></content:encoded>
      <enclosure url="https://s2.loli.net/2023/06/14/mCMfReBXyoQUDbi.png" type="image/png"/>
    </item>
    <item>
      <title>分布式基础之CAP和BASE理论</title>
      <link>https://maijunxuan.cn/%E5%88%86%E5%B8%83%E5%BC%8F/CAP%E5%92%8CBASE%E7%90%86%E8%AE%BA.html</link>
      <guid>https://maijunxuan.cn/%E5%88%86%E5%B8%83%E5%BC%8F/CAP%E5%92%8CBASE%E7%90%86%E8%AE%BA.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">分布式基础之CAP和BASE理论</source>
      <description>分布式基础之CAP和BASE理论 CAP理论 CAP是一个已经经过证实的理论：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项，其中P是网络的特性，所以只能选择AP或者CP。 一致性 我们知道ACID中事务的一致性是指事务的执行不能破坏...</description>
      <pubDate>Mon, 05 Sep 2022 16:38:25 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>CAP理论</h2>
<p>CAP是一个已经经过证实的理论：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项，其中P是网络的特性，所以只能选择AP或者CP。</p>
<h3>一致性</h3>
<p>我们知道ACID中事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行前后，数据库都必须处于一致性状态。也就是说，事务的执行结果必须是使数据库从一个一致性状态转变到另一个一致性状态。</p>
<p>和ACID中的一致性不同，分布式环境中的一致性是指数据在多个副本之间是否能够保持一致的特性。</p>
<p>分布式系统中，数据一般会存在不同节点的副本中，如果对第一个节点的数据成功进行了更新操作，而第二个节点上的数据却没有得到相应更新，这时候读取第二个节点的数据依然是更新前的数据，即脏数据，这就是分布式系统数据不一致的情况。
在分布式系统中，如果能够做到针对一个数据项的更新操作执行成功后，所有的用户都能读取到最新的值，那么这样的系统就被认为具有强一致性（或严格的一致性）。</p>
<h3>可用性</h3>
<p>可用性是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果，如果超过了这个时间范围，那么系统就被认为是不可用的。</p>
<p>“有限的时间内”是在系统的运行指标，不同系统会有差别。例如搜索引擎通常在0.5秒内需要给出用户检索结果。</p>
<p>“返回结果”是可用性的另一个重要指标，它要求系统完成对用户请求的处理后，返回一个正常的响应结果，要明确的反映出对请求处理的成功或失败。如果返回的结果是系统错误，比如"OutOfMemory"等报错信息，则认为此时系统是不可用的。</p>
<h3>分区容错性</h3>
<p>一个分布式系统中，节点组成的网络本来应该是连通的。然而可能因为某些故障，使得有些节点之间不连通了，整个网络就分成了几块区域，而数据就散布在了这些不连通的区域中，这就叫分区。</p>
<p>当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。</p>
<p>提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项仍然能在其他区中读取，容忍性就提高了。然而，把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。</p>
<p>总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。</p>
<h3>面临的问题</h3>
<p>对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到N个9，即保证P和A，舍弃C。</p>
<h2>BASE理论</h2>
<p>BASE理论是对CAP理论的延伸，思想是即使无法做到强一致性（CAP的一致性就是强一致性），但可以采用适当的采取弱一致性，即最终一致性。</p>
<p>BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。</p>
<h3>基本可用</h3>
<p>基本可用是指分布式系统在出现故障的时候，允许损失部分可用性（例如响应时间、功能上的可用性），允许损失部分可用性。需要注意的是，基本可用绝不等价于系统不可用。</p>
<p>响应时间上的损失：正常情况下搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了1~2秒。</p>
<p>功能上的损失：购物网站在购物高峰（如双十一）时，为了保护系统的稳定性，部分消费者可能会被引导到一个降级页面。</p>
<h3>软状态</h3>
<p>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据会有多个副本，允许不同副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现。</p>
<h3>最终一致性</h3>
<p>最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</p>
]]></content:encoded>
    </item>
    <item>
      <title>分布式事务的解决方案</title>
      <link>https://maijunxuan.cn/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</link>
      <guid>https://maijunxuan.cn/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">分布式事务的解决方案</source>
      <description>分布式事务的解决方案 可随着业务量的不断增长，单体架构渐渐扛不住巨大的流量，此时就需要对数据库、表做 分库分表处理，将应用 SOA 服务化拆分。也就产生了订单中心、用户中心、库存中心等，由此带来的问题就是业务间相互隔离，每个业务都维护着自己的数据库，数据的交换只能进行 RPC 调用。 当用户再次下单时，需同时对订单库 order、库存库 storage...</description>
      <pubDate>Mon, 05 Sep 2022 16:38:25 GMT</pubDate>
      <content:encoded><![CDATA[
<p>可随着业务量的不断增长，单体架构渐渐扛不住巨大的流量，此时就需要对数据库、表做 <code>分库分表</code>处理，将应用 <code>SOA</code> 服务化拆分。也就产生了订单中心、用户中心、库存中心等，由此带来的问题就是业务间相互隔离，每个业务都维护着自己的数据库，数据的交换只能进行 <code>RPC</code> 调用。</p>
<p>当用户再次下单时，需同时对订单库 <code>order</code>、库存库 <code>storage</code>、用户库 <code>account</code> 进行操作，可此时我们只能保证自己本地的数据一致性，无法保证调用其他服务的操作是否成功，所以为了保证整个下单流程的数据一致性，就需要分布式事务介入。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207140013888.png" alt="img"></p>
<h2>Seata 优势</h2>
<p>实现分布式事务的方案比较多，常见的比如基于 <code>XA</code> 协议的 <code>2PC</code>、<code>3PC</code>，基于业务层的 <code>TCC</code>，还有应用消息队列 + 消息表实现的最终一致性方案，还有今天要说的 <code>Seata</code> 中间件，下边看看各个方案的优缺点。</p>
<h3><code>2PC</code></h3>
<p>基于 XA 协议实现的分布式事务，XA 协议中分为两部分：事务管理器和本地资源管理器。其中本地资源管理器往往由数据库实现，比如 Oracle、MYSQL 这些数据库都实现了 XA 接口，而事务管理器则作为一个全局的调度者。</p>
<p>两阶段提交（<code>2PC</code>），对业务侵⼊很小，它最⼤的优势就是对使⽤⽅透明，用户可以像使⽤本地事务⼀样使⽤基于 XA 协议的分布式事务，能够严格保障事务 ACID 特性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207140013858.png" alt="img"></p>
<p>可 <code>2PC</code>的缺点也是显而易见，它是一个强一致性的同步阻塞协议，事务执⾏过程中需要将所需资源全部锁定，也就是俗称的 <code>刚性事务</code>。所以它比较适⽤于执⾏时间确定的短事务，整体性能比较差。</p>
<p>一旦事务协调者宕机或者发生网络抖动，会让参与者一直处于锁定资源的状态或者只有一部分参与者提交成功，导致数据的不一致。因此，在⾼并发性能⾄上的场景中，基于 XA 协议的分布式事务并不是最佳选择。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207140013892.png" alt="img"></p>
<h3><code>3PC</code></h3>
<p>三段提交（<code>3PC</code>）是二阶段提交（<code>2PC</code>）的一种改进版本 ，为解决两阶段提交协议的阻塞问题，上边提到两段提交，当协调者崩溃时，参与者不能做出最后的选择，就会一直保持阻塞锁定资源。</p>
<p><code>2PC</code> 中只有协调者有超时机制，<code>3PC</code> 在协调者和参与者中都引入了超时机制，协调者出现故障后，参与者就不会一直阻塞。而且在第一阶段和第二阶段中又插入了一个准备阶段（如下图，看着有点啰嗦），保证了在最后提交阶段之前各参与节点的状态是一致的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207140013866.png" alt="img"></p>
<p>虽然 <code>3PC</code> 用超时机制，解决了协调者故障后参与者的阻塞问题，但与此同时却多了一次网络通信，性能上反而变得更差，也不太推荐。</p>
<h2>TCC</h2>
<p>所谓的 <code>TCC</code> 编程模式，也是两阶段提交的一个变种，不同的是 <code>TCC</code> 为在业务层编写代码实现的两阶段提交。<code>TCC</code> 分别指 <code>Try</code>、<code>Confirm</code>、<code>Cancel</code> ，一个业务操作要对应的写这三个方法。</p>
<p>以下单扣库存为例，<code>Try</code> 阶段去占库存，<code>Confirm</code> 阶段则实际扣库存，如果库存扣减失败 <code>Cancel</code> 阶段进行回滚，释放库存。</p>
<p>TCC 不存在资源阻塞的问题，因为每个方法都直接进行事务的提交，一旦出现异常通过则 <code>Cancel</code> 来进行回滚补偿，这也就是常说的补偿性事务。</p>
<p>原本一个方法，现在却需要三个方法来支持，可以看到 TCC 对业务的侵入性很强，而且这种模式并不能很好地被复用，会导致开发量激增。还要考虑到网络波动等原因，为保证请求一定送达都会有重试机制，所以考虑到接口的幂等性。</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207140013888.png" type="image/png"/>
    </item>
    <item>
      <title>Git常用命令</title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Git/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Git/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Git常用命令</source>
      <description>Git常用命令 img 几个专用名词的译名如下。 Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 一、新建代码库 二、配置 Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 三、增加/删除文件 四、代码提交 五、...</description>
      <pubDate>Mon, 05 Sep 2022 16:38:25 GMT</pubDate>
      <content:encoded><![CDATA[
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt="img"></p>
<p>几个专用名词的译名如下。</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h2>一、新建代码库</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 在当前目录新建一个Git代码库</span>
<span class="token function">git</span> init

<span class="token comment"># 新建一个目录，将其初始化为Git代码库</span>
<span class="token function">git</span> init <span class="token punctuation">[</span>project-name<span class="token punctuation">]</span>

<span class="token comment"># 下载一个项目和它的整个代码历史</span>
<span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span>
</code></pre></div><h2>二、配置</h2>
<p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 显示当前的Git配置</span>
<span class="token function">git</span> config <span class="token parameter variable">--list</span>

<span class="token comment"># 编辑Git配置文件</span>
<span class="token function">git</span> config <span class="token parameter variable">-e</span> <span class="token punctuation">[</span>--global<span class="token punctuation">]</span>

<span class="token comment"># 设置提交代码时的用户信息</span>
<span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.name <span class="token string">"[name]"</span>
<span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.email <span class="token string">"[email address]"</span>
</code></pre></div><h2>三、增加/删除文件</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 添加指定文件到暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.

<span class="token comment"># 添加指定目录到暂存区，包括子目录</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span>

<span class="token comment"># 添加当前目录的所有文件到暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>

<span class="token comment"># 添加每个变化前，都会要求确认</span>
<span class="token comment"># 对于同一个文件的多处变化，可以实现分次提交</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-p</span>

<span class="token comment"># 删除工作区文件，并且将这次删除放入暂存区</span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.

<span class="token comment"># 停止追踪指定文件，但该文件会保留在工作区</span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 改名文件，并且将这个改名放入暂存区</span>
<span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span>
</code></pre></div><h2>四、代码提交</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 提交暂存区到仓库区</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 提交暂存区的指定文件到仓库区</span>
<span class="token function">git</span> commit <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span>
<span class="token function">git</span> commit <span class="token parameter variable">-a</span>

<span class="token comment"># 提交时显示所有diff信息</span>
<span class="token function">git</span> commit <span class="token parameter variable">-v</span>

<span class="token comment"># 使用一次新的commit，替代上一次提交</span>
<span class="token comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 重做上一次commit，并包括指定文件的新变化</span>
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.
</code></pre></div><h2>五、分支</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 列出所有本地分支</span>
<span class="token function">git</span> branch

<span class="token comment"># 列出所有远程分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-r</span>

<span class="token comment"># 列出所有本地分支和远程分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-a</span>

<span class="token comment"># 新建一个分支，但依然停留在当前分支</span>
<span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 新建一个分支，并切换到该分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 新建一个分支，指向指定commit</span>
<span class="token function">git</span> branch <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 新建一个分支，与指定的远程分支建立追踪关系</span>
<span class="token function">git</span> branch <span class="token parameter variable">--track</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span>

<span class="token comment"># 切换到指定分支，并更新工作区</span>
<span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 切换到上一个分支</span>
<span class="token function">git</span> checkout -

<span class="token comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span>
<span class="token function">git</span> branch --set-upstream <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span>

<span class="token comment"># 合并指定分支到当前分支</span>
<span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 选择一个commit，合并进当前分支</span>
<span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 删除分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 删除远程分支</span>
<span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>
<span class="token function">git</span> branch <span class="token parameter variable">-dr</span> <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span>
</code></pre></div><h2>六、标签</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 列出所有tag</span>
<span class="token function">git</span> tag

<span class="token comment"># 新建一个tag在当前commit</span>
<span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span>

<span class="token comment"># 新建一个tag在指定commit</span>
<span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 删除本地tag</span>
<span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span>

<span class="token comment"># 删除远程tag</span>
<span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tagName<span class="token punctuation">]</span>

<span class="token comment"># 查看tag信息</span>
<span class="token function">git</span> show <span class="token punctuation">[</span>tag<span class="token punctuation">]</span>

<span class="token comment"># 提交指定tag</span>
<span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span>

<span class="token comment"># 提交所有tag</span>
<span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--tags</span>

<span class="token comment"># 新建一个分支，指向某个tag</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span>
</code></pre></div><h2>七、查看信息</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 显示有变更的文件</span>
<span class="token function">git</span> status

<span class="token comment"># 显示当前分支的版本历史</span>
<span class="token function">git</span> log

<span class="token comment"># 显示commit历史，以及每次commit发生变更的文件</span>
<span class="token function">git</span> log <span class="token parameter variable">--stat</span>

<span class="token comment"># 搜索提交历史，根据关键词</span>
<span class="token function">git</span> log <span class="token parameter variable">-S</span> <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span>

<span class="token comment"># 显示某个commit之后的所有变动，每个commit占据一行</span>
<span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:%s

<span class="token comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span>
<span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD <span class="token parameter variable">--grep</span> feature

<span class="token comment"># 显示某个文件的版本历史，包括文件改名</span>
<span class="token function">git</span> log <span class="token parameter variable">--follow</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
<span class="token function">git</span> whatchanged <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 显示指定文件相关的每一次diff</span>
<span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 显示过去5次提交</span>
<span class="token function">git</span> log <span class="token parameter variable">-5</span> <span class="token parameter variable">--pretty</span> <span class="token parameter variable">--oneline</span>

<span class="token comment"># 显示所有提交过的用户，按提交次数排序</span>
<span class="token function">git</span> shortlog <span class="token parameter variable">-sn</span>

<span class="token comment"># 显示指定文件是什么人在什么时间修改过</span>
<span class="token function">git</span> blame <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 显示暂存区和工作区的差异</span>
<span class="token function">git</span> <span class="token function">diff</span>

<span class="token comment"># 显示暂存区和上一个commit的差异</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 显示工作区与当前分支最新commit之间的差异</span>
<span class="token function">git</span> <span class="token function">diff</span> HEAD

<span class="token comment"># 显示两次提交之间的差异</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>first-branch<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>second-branch<span class="token punctuation">]</span>

<span class="token comment"># 显示今天你写了多少行代码</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--shortstat</span> <span class="token string">"@{0 day ago}"</span>

<span class="token comment"># 显示某次提交的元数据和内容变化</span>
<span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 显示某次提交发生变化的文件</span>
<span class="token function">git</span> show --name-only <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 显示某次提交时，某个文件的内容</span>
<span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>:<span class="token punctuation">[</span>filename<span class="token punctuation">]</span>

<span class="token comment"># 显示当前分支的最近几次提交</span>
<span class="token function">git</span> reflog
</code></pre></div><h2>八、远程同步</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 下载远程仓库的所有变动</span>
<span class="token function">git</span> fetch <span class="token punctuation">[</span>remote<span class="token punctuation">]</span>

<span class="token comment"># 显示所有远程仓库</span>
<span class="token function">git</span> remote <span class="token parameter variable">-v</span>

<span class="token comment"># 显示某个远程仓库的信息</span>
<span class="token function">git</span> remote show <span class="token punctuation">[</span>remote<span class="token punctuation">]</span>

<span class="token comment"># 增加一个新的远程仓库，并命名</span>
<span class="token function">git</span> remote <span class="token function">add</span> <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span>

<span class="token comment"># 取回远程仓库的变化，并与本地分支合并</span>
<span class="token function">git</span> pull <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 上传本地指定分支到远程仓库</span>
<span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 强行推送当前分支到远程仓库，即使有冲突</span>
<span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--force</span>

<span class="token comment"># 推送所有分支到远程仓库</span>
<span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--all</span>
</code></pre></div><h2>九、撤销</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 恢复暂存区的指定文件到工作区</span>
<span class="token function">git</span> checkout <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 恢复某个commit的指定文件到暂存区和工作区</span>
<span class="token function">git</span> checkout <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 恢复暂存区的所有文件到工作区</span>
<span class="token function">git</span> checkout <span class="token builtin class-name">.</span>

<span class="token comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>
<span class="token function">git</span> reset <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 重置暂存区与工作区，与上一次commit保持一致</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span>

<span class="token comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>
<span class="token function">git</span> reset <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>
<span class="token function">git</span> reset <span class="token parameter variable">--keep</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 新建一个commit，用来撤销指定commit</span>
<span class="token comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>
<span class="token function">git</span> revert <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 暂时将未提交的变化移除，稍后再移入</span>
<span class="token function">git</span> stash
<span class="token function">git</span> stash pop
</code></pre></div>]]></content:encoded>
      <enclosure url="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" type="image/png"/>
    </item>
    <item>
      <title>Linux常用网络命令</title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Linux/Linux%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Linux/Linux%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Linux常用网络命令</source>
      <description>Linux常用网络命令 手动/自动设定与启动/关闭 IP 参数：ifconfig, ifup, ifdown ifconfig ifconfig常用于修改网络配置以及查看网络参数的指令 基础示例 临时修改某接口ip，如下所示，将lo环回口ip地址改为127.0.0.2，注意我们没有增加子网掩码、广播地址等配置，所以这些参数值都是由系统自动计算得出的 修...</description>
      <pubDate>Mon, 05 Sep 2022 16:38:25 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>手动/自动设定与启动/关闭 IP 参数：ifconfig, ifup, ifdown</h2>
<h3>ifconfig</h3>
<p>ifconfig常用于修改网络配置以及查看网络参数的指令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@www ~]# ifconfig {interface} {up|down} &lt;== 观察与启动接口
[root@www ~]# ifconfig interface {options} &lt;== 设定与修改接口
选项与参数：
interface：网络卡接口代号，包括 eth0, eth1, ppp0 等等
options ：可以接的参数，包括如下：
up, down ：启动 (up) 或关闭 (down) 该网络接口(不涉及任何参数)
mtu ：可以设定不同的 MTU 数值，例如 mtu 1500 (单位为 byte)
netmask ：就是子屏蔽网络；
broadcast：就是广播地址啊！
</code></pre></div><p>基础示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[zhangshiyu@localhost ~]$ ifconfig

# 输出结果
# ens33为网卡代号 mtu为以太网最大传输单元 1500
ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
# inet 为ipv4地址 netmask 为子网掩码 broadcast 为广播地址
        inet 192.168.0.100  netmask 255.255.255.0  broadcast 192.168.0.255
        # inet6 为ipv6地址
        inet6 fe80::fee8:8f4e:2041:7509  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)
        # RX packets 代表接受到网络包数量  errors代表网络包发生错误的数量 ，dropped 代表被丢失的网络包数量
        RX packets 63446  bytes 63343307 (60.4 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        # 由本机传输的网络包数量 其余字段代表语义遇上相同，只不过传输方向相反
        TX packets 9302  bytes 1593829 (1.5 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

# 环回口网络参数信息，不多赘述
lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 3668  bytes 316656 (309.2 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3668  bytes 316656 (309.2 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

</code></pre></div><p>临时修改某接口ip，如下所示，将lo环回口ip地址改为127.0.0.2，注意我们没有增加子网掩码、广播地址等配置，所以这些参数值都是由系统自动计算得出的</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@localhost zhangshiyu]# ifconfig lo 127.0.0.2
# 使用ifconfig确定修改结果是否生效
[root@localhost zhangshiyu]# ifconfig
ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.100  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::fee8:8f4e:2041:7509  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)
        RX packets 63701  bytes 63365589 (60.4 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 9417  bytes 1606248 (1.5 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536
        inet 127.0.0.2  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 3668  bytes 316656 (309.2 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3668  bytes 316656 (309.2 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

</code></pre></div><p>修改环回口地址，子网掩码，mtu值</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@localhost zhangshiyu]# ifconfig lo 127.0.0.2 \
&gt; netmask 255.255.255.255 mtu 8000
# 使用ifconfig确认修改是否生效
[root@localhost zhangshiyu]# ifconfig
ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.100  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::fee8:8f4e:2041:7509  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)
        RX packets 63887  bytes 63381397 (60.4 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 9500  bytes 1614832 (1.5 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 8000
        inet 127.0.0.2  netmask 255.255.255.255
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 3668  bytes 316656 (309.2 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3668  bytes 316656 (309.2 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

[root@localhost zhangshiyu]#

</code></pre></div><p>仅仅修改以太网最大mtu的值</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@localhost zhangshiyu]# ifconfig lo mtu 9000
[root@localhost zhangshiyu]# ifconfig
ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.100  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::fee8:8f4e:2041:7509  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)
        RX packets 63963  bytes 63387686 (60.4 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 9535  bytes 1618429 (1.5 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 9000
        inet 127.0.0.2  netmask 255.255.255.255
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 3668  bytes 316656 (309.2 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3668  bytes 316656 (309.2 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

</code></pre></div><p>基于lo口，创建一个仿真的虚拟网络接口</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 如下所示格式为   ifconfig    网口:数字 ip地址等参数
[root@localhost zhangshiyu]# ifconfig lo:0 127.0.0.4
# 可以看到最终会输出一个lo:0的网口
[root@localhost zhangshiyu]# ifconfig
ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.100  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::fee8:8f4e:2041:7509  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)
        RX packets 64048  bytes 63394595 (60.4 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 9577  bytes 1622719 (1.5 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 9000
        inet 127.0.0.2  netmask 255.255.255.255
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 3668  bytes 316656 (309.2 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3668  bytes 316656 (309.2 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo:0: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 9000
        inet 127.0.0.4  netmask 255.0.0.0
        loop  txqueuelen 1000  (Local Loopback)

</code></pre></div><p>将上述修改还原</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>/etc/init.d/network restart

</code></pre></div><p>如果我们希望接口直接启动，而无需配置ip，使用下述命令即可</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>ifconfig eth0 up
</code></pre></div><h3>ifup、ifdown</h3>
<p>这两条指令只能用于修改过<code>/etc/sysconfig/network-scripts</code>对应接口配置后，对接口进行启动和关闭所用的.注意假如你用ifconfig等命令修改过网络的话，那么ifup、ifdown可能就不会成功，因为这两条指令会将当前网络参数和上述的配置文件进行比较，若不同则不允许ifup、ifdown</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 关闭接口示例
[root@localhost ~]# ifdown ens33
Device 'ens33' successfully disconnected.

# 可以看到ens33的ip消失了
[root@localhost ~]# ifconfig 
ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)
        RX packets 64366  bytes 63427667 (60.4 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 9731  bytes 1650547 (1.5 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 9000
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 3892  bytes 336256 (328.3 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3892  bytes 336256 (328.3 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

# 启动接口示例
[root@localhost ~]# ifup ens33
Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/8)

# 可以看到ens33的ip回来了
[root@localhost ~]# ifconfig 
ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.100  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::fee8:8f4e:2041:7509  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)
        RX packets 64370  bytes 63428006 (60.4 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 9749  bytes 1653181 (1.5 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 9000
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 3980  bytes 344032 (335.9 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3980  bytes 344032 (335.9 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

</code></pre></div><h2>路由修改： route</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@www ~]# route [-nee]
[root@www ~]# route add [-net|-host] [网域或主机] netmask [mask]
[gw|dev]
[root@www ~]# route del [-net|-host] [网域或主机] netmask [mask]
[gw|dev]
观察的参数：
-n ：不要使用通讯协议或主机名，直接使用 IP 或 port number；
-ee ：使用更详细的信息来显示
增加 (add) 与删除 (del) 路由的相关参数：
-net ：表示后面接的路由为一个网域；
-host ：表示后面接的为连接到单部主机的路由；
netmask ：与网域有关，可以设定 netmask 决定网域的大小；
gw ：gateway 的简写，后续接的是 IP 的数值喔，与 dev 不同；
net.qiang@hotmail.com
dev ：如果只是要指定由那一块网络卡联机出去，则使用这个设定，
后面接 eth0 等
</code></pre></div><p>不显示计算机名字，直接以ip的形式查看路由</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[zhangshiyu@localhost ~]$ route -n

# 输出结果
#Destination     目标网段
# Gateway         经过网关
# Genmask         子网掩码
# flags:U 代表该路由启动的，H 目标是一部主机而非某个网段，G 该路由要走网关，R 使用动态路由时，恢复路由信息的旗标，D:已经由服务或转 port 功能设定为动态路由     M:路由已经被修改了；
# Iface该路由经过的网卡
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.254   0.0.0.0         UG    100    0        0 ens33
192.168.0.0     0.0.0.0         255.255.255.0   U     100    0        0 ens33
</code></pre></div><p>注意路由的排序是由精确到模糊，所以当你配置的两条路由目标网段一致，永远只会走最上面的那条路由，如下所示，两条路由目标地址一致，但是计算机永远只会走ens33这个接口的路由</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.254   0.0.0.0         UG    100    0        0 ens33
0.0.0.0         192.168.0.254   0.0.0.0         UG    100    0        0 ens34
</code></pre></div><p>增加一条路由，注意这条路由必须是你和你计算机同网段或者是可达的，否则会报错</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 增加一条到达127网段的路由 从ens33这张网卡走
[root@localhost zhangshiyu]# route add -net 127.0.0.0 netmask 255.255.255.0 dev ens33

# 可以看到这条路有添加成功了
[root@localhost zhangshiyu]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.254   0.0.0.0         UG    100    0        0 ens33
127.0.0.0       0.0.0.0         255.255.255.0   U     0      0        0 ens33
192.168.0.0     0.0.0.0         255.255.255.0   U     100    0        0 ens33

</code></pre></div><p>增加一条默认路由</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 增加一条默认路由 网关为127.0.0.6
[root@localhost zhangshiyu]# route add default gw 127.0.0.6

# 可以看到增加了一条经过网关的默认路由
[root@localhost zhangshiyu]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         127.0.0.6       0.0.0.0         UG    0      0        0 ens33
0.0.0.0         192.168.0.254   0.0.0.0         UG    100    0        0 ens33
127.0.0.0       0.0.0.0         255.255.255.0   U     0      0        0 ens33
192.168.0.0     0.0.0.0         255.255.255.0   U     100    0        0 ens33

</code></pre></div><p>删除一条路由，就以笔者路由为例上文中有一条Gateway 为<code>127.0.0.6</code>的默认路由，Destination 为<code>0.0.0.0</code>所以我们的命令如下</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 删除一条Destination 为0.0.0.0 netmask 0.0.0.0 网口为ens33的路由
[root@localhost zhangshiyu]# route del -net 0.0.0.0 netmask 0.0.0.0 dev ens33

# 可以看到删除成功了
[root@localhost zhangshiyu]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.254   0.0.0.0         UG    100    0        0 ens33
127.0.0.0       0.0.0.0         255.255.255.0   U     0      0        0 ens33
192.168.0.0     0.0.0.0         255.255.255.0   U     100    0        0 ens33

</code></pre></div><h2>网络参数综合指令： ip</h2>
<p>这条指令可以完成上述指令的功能，且可以做更多的事情</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@www ~]# ip [option] [动作] [指令]
选项与参数：
net.qiang@hotmail.com
option ：设定的参数，主要有：
-s ：显示出该装置的统计数据(statistics)，例如总接受封包数等；
动作：亦即是可以针对哪些网络参数进行动作，包括有：
link ：关于装置 (device) 的相关设定，包括 MTU, MAC 地址等等
addr/address ：关于额外的 IP 协议，例如多 IP 的达成等等；
route ：与路由有关的相关设定
</code></pre></div><p>列出所有的接口信息</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@localhost zhangshiyu]# ip link show

# 输出内容
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 9000 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 00:0c:29:bd:2b:9e brd ff:ff:ff:ff:ff:ff
3: virbr0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default qlen 1000
    link/ether 52:54:00:75:26:83 brd ff:ff:ff:ff:ff:ff
4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN mode DEFAULT group default qlen 1000
    link/ether 52:54:00:75:26:83 brd ff:ff:ff:ff:ff:ff

</code></pre></div><p>启动和关闭网络</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 关闭环回口
[root@localhost zhangshiyu]# ip link set lo down
# 查看ip发现lo消失
[root@localhost zhangshiyu]# ifconfig
ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.100  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::fee8:8f4e:2041:7509  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)
        RX packets 66790  bytes 63767299 (60.8 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 10587  bytes 1748607 (1.6 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

# 开启环回口
[root@localhost zhangshiyu]# ip link set lo up

# 查看ip发现lo回来了
[root@localhost zhangshiyu]# ifconfig
ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.100  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::fee8:8f4e:2041:7509  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)
        RX packets 66879  bytes 63774928 (60.8 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 10641  bytes 1754435 (1.6 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 9000
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 4194  bytes 362432 (353.9 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 4194  bytes 362432 (353.9 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

</code></pre></div><p>修改网卡名称</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 修改前记得将网络关闭
[root@localhost zhangshiyu]# ip link set lo down

# 将lo修改为test_lo
[root@localhost zhangshiyu]# ip link set lo name test_lo

# 再次启动查看ip发现名字确实修改了
[root@localhost zhangshiyu]# ip link set lo up
Cannot find device "lo"
[root@localhost zhangshiyu]# ip link set test_lo up


# 查看ip发现名字确实修改了
[root@localhost zhangshiyu]# ifconfig
ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.100  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::fee8:8f4e:2041:7509  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)
        RX packets 67093  bytes 63792856 (60.8 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 10751  bytes 1765917 (1.6 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

test_lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 9000
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 4194  bytes 362432 (353.9 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 4194  bytes 362432 (353.9 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

</code></pre></div><p>修改mac地址</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 将test_lo环回口改为aa:aa:aa:aa:aa:aa
[root@localhost zhangshiyu]# ip link set test_lo address aa:aa:aa:aa:aa:aa

# 查看ip信息得以印证
[root@localhost zhangshiyu]# ip link show
1: test_lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 9000 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback aa:aa:aa:aa:aa:aa brd 00:00:00:00:00:00
2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 00:0c:29:bd:2b:9e brd ff:ff:ff:ff:ff:ff
3: virbr0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default qlen 1000
    link/ether 52:54:00:75:26:83 brd ff:ff:ff:ff:ff:ff
4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN mode DEFAULT group default qlen 1000
    link/ether 52:54:00:75:26:83 brd ff:ff:ff:ff:ff:ff

</code></pre></div><p>上文操作都是和网络第二层(数据链路层)相关的操作，接下来我们介绍一下网络第三层的操作</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@www ~]# ip address show &lt;==就是查阅 IP 参数啊！
[root@www ~]# ip address [add|del] [IP 参数] [dev 装置名] [相关参数]
选项与参数：
show ：单纯的显示出接口的 IP 信息啊；
add|del ：进行相关参数的增加 (add) 或删除 (del) 设定，主要有：
IP 参数：主要就是网域的设定，例如 192.168.100.100/24 之类的设定
喔；
dev ：这个 IP 参数所要设定的接口，例如 eth0, eth1 等等；
相关参数：主要有底下这些：
broadcast：设定广播地址，如果设定值是 + 表示『让系统自动计算』
label ：亦即是这个装置的别名，例如 eth0:0 就是了！
scope ：这个界面的领域，通常是这几个大类：
global ：允许来自所有来源的联机；
site ：仅支持 IPv6 ，仅允许本主机的联机；
link ：仅允许本装置自我联机；
host ：仅允许本主机内部的联机；
所以当然是使用 global 啰！预设也是 global 啦
</code></pre></div><p>列出所有接口的ip参数</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@localhost zhangshiyu]# ip address show

# 输出结果
1: test_lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 9000 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback aa:aa:aa:aa:aa:aa brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host test_lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:bd:2b:9e brd ff:ff:ff:ff:ff:ff
    inet 192.168.0.100/24 brd 192.168.0.255 scope global noprefixroute ens33
       valid_lft forever preferred_lft forever
    inet6 fe80::fee8:8f4e:2041:7509/64 scope link noprefixroute
       valid_lft forever preferred_lft forever
3: virbr0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000
    link/ether 52:54:00:75:26:83 brd ff:ff:ff:ff:ff:ff
4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000
    link/ether 52:54:00:75:26:83 brd ff:ff:ff:ff:ff:ff

</code></pre></div><p>为ens33网卡增加一个虚拟ip</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 增加一条 ip为192.168.2.33/24 广播地址为192.168.0.255 经过ens33网卡的地址
[root@localhost zhangshiyu]#ip address add 192.168.2.33/24 broadcast  +  dev ens33 label ens33:5233

# 可以看到增加成功了
[root@localhost zhangshiyu]# ifconfig
ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.100  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::fee8:8f4e:2041:7509  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)
        RX packets 67995  bytes 63887086 (60.9 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 11217  bytes 1815310 (1.7 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

ens33:5233: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.2.33  netmask 255.255.255.0  broadcast 192.168.2.255
        ether 00:0c:29:bd:2b:9e  txqueuelen 1000  (Ethernet)

test_lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 9000
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 4350  bytes 376116 (367.3 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 4350  bytes 376116 (367.3 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

</code></pre></div><p>接下来就是ip指令关于路由的操作了</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 查看当前路由表
[root@localhost zhangshiyu]# ip route show
default via 192.168.0.254 dev ens33 proto static metric 100
192.168.0.0/24 dev ens33 proto kernel scope link src 192.168.0.100 metric 100
192.168.2.0/24 dev ens33 proto kernel scope link src 192.168.2.33


# 增加一条到达192.168.5.0网段的路由，交由ens33网卡处理
[root@localhost zhangshiyu]# ip route add 192.168.5.0/24 dev ens33

# 查看路由，可以看到增加的路由，说明配置成功了
[root@localhost zhangshiyu]# ip route show
default via 192.168.0.254 dev ens33 proto static metric 100
192.168.0.0/24 dev ens33 proto kernel scope link src 192.168.0.100 metric 100
192.168.2.0/24 dev ens33 proto kernel scope link src 192.168.2.33
192.168.5.0/24 dev ens33 scope link
[root@localhost zhangshiyu]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.254   0.0.0.0         UG    100    0        0 ens33
192.168.0.0     0.0.0.0         255.255.255.0   U     100    0        0 ens33
192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens33
192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 ens33

</code></pre></div><p>增加一条默认路由</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 查看当前路由
[root@localhost zhangshiyu]# ip route show
\default via 192.168.0.254 dev ens33 proto static metric 100
192.168.0.0/24 dev ens33 proto kernel scope link src 192.168.0.100 metric 100
192.168.2.0/24 dev ens33 proto kernel scope link src 192.168.2.33
192.168.5.0/24 dev ens33 scope link

# 增加一条默认路由 网关为192.168.1.254 经过ens33网卡处理
[root@localhost zhangshiyu]# ip route add default via 192.168.1.254 dev ens33
RTNETLINK answers: Network is unreachable
[root@localhost zhangshiyu]# ip route add default via 192.168.0.254 dev ens33
[root@localhost zhangshiyu]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.254   0.0.0.0         UG    0      0        0 ens33
0.0.0.0         192.168.0.254   0.0.0.0         UG    100    0        0 ens33
192.168.0.0     0.0.0.0         255.255.255.0   U     100    0        0 ens33
192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens33
192.168.5.0     0.0.0.0         255.255.255.0   U     0      0        0 ens33

</code></pre></div><h2>网络侦错与观察指令</h2>
<h3>两部主机两点沟通： ping, 用 ping 追踪路径中的最大 MTU 数值</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@www ~]# ping [选项与参数] IP
选项与参数：
-c 数值：后面接的是执行 ping 的次数，例如 -c 5 ；
-n ：在输出数据时不进行 IP 与主机名的反查，直接使用 IP 输出(速度
较快)；
-s 数值：发送出去的 ICMP 封包大小，预设为 56bytes，不过你可以放大此
一数值；
-t 数值：TTL 的数值，预设是 255，每经过一个节点就会少一；
-W 数值：等待响应对方主机的秒数。
-M [do|dont] ：主要在侦测网络的 MTU 数值大小，两个常见的项目是：
do ：代表传送一个 DF (Don't Fragment) 旗标，让封包不能重新拆包与
打包；
dont：代表不要传送 DF 旗标，表示封包可以在其他主机上拆包与打包
</code></pre></div><p>ping三次目标主机</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@localhost zhangshiyu]# ping -c 3 192.168.0.107


# 64 bytes 代表icmp封包大小
# icmp_seq=1 第几次探测 1代表第一次
#  ttl=128代表网络封包经过的最大跳数
# time响应时间
PING 192.168.0.107 (192.168.0.107) 56(84) bytes of data.
64 bytes from 192.168.0.107: icmp_seq=1 ttl=128 time=0.345 ms
64 bytes from 192.168.0.107: icmp_seq=2 ttl=128 time=0.352 ms
64 bytes from 192.168.0.107: icmp_seq=3 ttl=128 time=0.277 ms

</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209052050361.png" type="image/png"/>
    </item>
    <item>
      <title>Linux的文件结构</title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Linux/Linux%E7%9A%84%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Linux/Linux%E7%9A%84%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Linux的文件结构</source>
      <description>Linux的文件结构 了解一下文件类型 Linux采用的一切皆文件的思想，将硬件设备、软件等所有数据信息都以文件的形式呈现在用户面前，这就使得我们对计算机的管理更加简介明了。所以在展开文章后续文章的讨论一下，我们不妨花一个小节了解一下Linux中常见的文件类型(注意，笔者为了能够更好的展示各个文件夹下的文件，使用的是root账号) 首先我们键入到达~目...</description>
      <pubDate>Mon, 05 Sep 2022 16:38:25 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>了解一下文件类型</h2>
<p>Linux采用的一切皆文件的思想，将硬件设备、软件等所有数据信息都以文件的形式呈现在用户面前，这就使得我们对计算机的管理更加简介明了。所以在展开文章后续文章的讨论一下，我们不妨花一个小节了解一下Linux中常见的文件类型(注意，笔者为了能够更好的展示各个文件夹下的文件，使用的是root账号)</p>
<p>首先我们键入到达~目录</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>cd ~
</code></pre></div><p>然后键入ll查看所有非隐藏文件,注意笔者描述，是非隐藏文件哦，可以看到在每个文件最前方都有一个由10个字符构成的字符串，就以第一行为例`-rw</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209051956663.png" type="image/png"/>
    </item>
    <item>
      <title>Linux的进程管理</title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Linux/Linux%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Linux/Linux%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Linux的进程管理</source>
      <description>Linux的进程管理 进程与程序 进程与pid的关系 在程序被执行前，他们不过是硬盘或者其他存储介质中的一个文件。当这些文件被加载到内存中时，系统就会根据执行者的权限属性生成程序执行参数(如下图执行者为root所以程序到内存中时权限属性都是以root为准)，并生成一个唯一标识，即PID。之后基于该程序基于运行的子进程的权限属性也是一句当前这个进程的相关...</description>
      <pubDate>Mon, 05 Sep 2022 16:38:25 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>进程与程序</h2>
<h3>进程与pid的关系</h3>
<p>在程序被执行前，他们不过是硬盘或者其他存储介质中的一个文件。当这些文件被加载到内存中时，系统就会根据执行者的权限属性生成程序执行参数(如下图执行者为root所以程序到内存中时权限属性都是以root为准)，并生成一个唯一标识，即PID。之后基于该程序基于运行的子进程的权限属性也是一句当前这个进程的相关权限。</p>
<h3>子进程</h3>
<p>由上文我们知道，子进程即由父进程操作中儿诞生的进程，如下所示所示，我们在终端键入bash，再用ps -l查看，可以看到这样一个二维表格，其中pid代表进程唯一标识，而ppid即当前进程的父进程号，可以看到pid为5445的进程ppid为4844，即第一个进程的pid，说明第二个bash就是我们键入bash命令后所加载的新进程</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># bash</span>

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ps -l</span>
F S   <span class="token environment constant">UID</span>    PID   <span class="token environment constant">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
<span class="token number">4</span> S     <span class="token number">0</span>   <span class="token number">4844</span>   <span class="token number">4833</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">29192</span> do_wai pts/0    00:00:00 <span class="token function">bash</span>
<span class="token number">4</span> S     <span class="token number">0</span>   <span class="token number">5445</span>   <span class="token number">4844</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">29213</span> do_wai pts/0    00:00:00 <span class="token function">bash</span>
<span class="token number">0</span> R     <span class="token number">0</span>   <span class="token number">5480</span>   <span class="token number">5445</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">38331</span> -      pts/0    00:00:00 <span class="token function">ps</span>

</code></pre></div><h3>父进程是如何执行子进程的</h3>
<p>父进程会fork出一个进程，ppid为自己的pid，然后基于fork出来的进程执行exec命令从磁盘中将文件加载到内存中成为当前进程的子进程，而子进程的就是以暂存进程的ppid、pid作为自己的ppid、pid作为程序运行。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209052014841.png" alt="image-20220905201417116"></p>
<h3>后台进程</h3>
<p>crond每分钟都会区<code>/etc/crontab</code>扫描相关进程,而crond就是我们常说的后台进程，也是常年停留在内存中的进程，这种进程我们也可以称他们为damon(服务)</p>
<h2>Linux的多人多任务环境</h2>
<h3>多人环境</h3>
<p>Linux支持多人操作，即使不同用户使用root账号也能运行，原因很简单，每个用户使用即使使用相同用户账号登录，Linux也为为其分配PID来区分两者。</p>
<h3>多任务行为</h3>
<p>因为CPU的速度可达Ghz，即每秒钟都能执行<code>10^9</code>个指令，所以即使你在运行多个任务，也几乎不会感觉到阻塞，正是因为CPU的强大，Linux系统才能支持多人多任务</p>
<h3>后台进程</h3>
<p>我们希望某些指令可以在系统后台运行，然后我们在此期间能够做别的事情，Linux已经给我们提供了这样一个操作，做法也很简单，如下所示，我们希望复制命令可以在后台运行</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 创建一个文件</span>
<span class="token punctuation">[</span>root@localhost tmp<span class="token punctuation">]</span><span class="token comment"># touch file1</span>
<span class="token comment"># 加个&amp; 该指令就会在后台运行</span>
<span class="token punctuation">[</span>root@localhost tmp<span class="token punctuation">]</span><span class="token comment"># cp file1 file2 &amp;</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">6006</span>


</code></pre></div><h2>工作管理</h2>
<h3>前台进程和后台进程</h3>
<p>前台进程：我们在终端与操作系统交互的命令就叫做前台进程 后台进程:那些无需和我们进行任何交互且不能使用ctrl+c停止的进程就是后台进程</p>
<h3>job control的管理</h3>
<h4>进程后台执行示例</h4>
<p>我们希望打包命令可以在后台运行，如下所示，我们使用tar命令进行压缩的时候加了个&amp;，可以看到在打包过程中我们还可以运行别的命令。而且系统还会为这个进程分配pid为6137，当进程运行结束就会自动弹出一个Done</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost tmp<span class="token punctuation">]</span><span class="token comment"># tar -zpcf /tmp/etc.tar.gz /etc/ &amp;</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">6137</span>
<span class="token punctuation">[</span>root@localhost tmp<span class="token punctuation">]</span><span class="token comment"># tar: Removing leading `/' from member names</span>
<span class="token function">ls</span>
etc.tar.gz  swap
<span class="token punctuation">[</span>root@localhost tmp<span class="token punctuation">]</span><span class="token comment"># ll</span>
total <span class="token number">143728</span>
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">12958457</span> Jul  <span class="token number">1</span> <span class="token number">23</span>:30 etc.tar.gz
<span class="token parameter variable">-rw</span></code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209052014841.png" type="image/png"/>
    </item>
    <item>
      <title>synchronized的优化</title>
      <link>https://maijunxuan.cn/JUC/synchronized%E7%9A%84%E4%BC%98%E5%8C%96.html</link>
      <guid>https://maijunxuan.cn/JUC/synchronized%E7%9A%84%E4%BC%98%E5%8C%96.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">synchronized的优化</source>
      <description>synchronized的优化 一、简介 Java SE 1.6 为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。因此，在 Java SE 1.6 一共有 4 种锁的状态，级别由低到高依次是：无锁、偏向锁、轻量级锁、重量级锁，并且四种状态会随着竞争的情况逐渐升级，而且是不可逆的过程，即不可降级，也就是说只能进行锁升级（从低级别到高...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h3>一、简介</h3>
<p>Java SE 1.6 为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。因此，在 Java SE 1.6 一共有 4 种锁的状态，级别由低到高依次是：无锁、偏向锁、轻量级锁、重量级锁，并且四种状态会随着竞争的情况逐渐升级，而且是不可逆的过程，即不可降级，也就是说只能进行锁升级（从低级别到高级别），意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率。</p>
<h3>二、预备知识</h3>
<h4>2.1 对象头</h4>
<p>以 Hotspot 虚拟机为例，对象在堆内存中的存储布局可以分为三个部分：对象头、实例数据和对齐填充，这里我们只需了解对象头即可。Hotspot 虚拟机的对象头主要包括两类信息，分别是：Mark Word 和类型指针。</p>
<p>Mark Word：用于存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等，这些信息都是与对象自身定义的数据无关的额外存储成本，所以 Mark Word 被设计成一个动态定义的数据结构以便在极小的空间存储尽量多的数据。此外，它会根据对象的状态复用自己的存储空间，即在运行期间 Mark Word 里存储的数据会随着锁标志位的变化而变化。</p>
<p>类型指针：即对象指向它的类型元数据的指针，虚拟机通过这个指针来确定该对象是属于哪个类的实例。但并不是所有的虚拟机实现都必须在对象数据上保留类型指针，即查找对象的元数据信息并不一定要经过对象本身。此外，若对象是一个数组，则对象头中还必须有一块用于记录数组长度的数据，这是因为无法通过元数据中的信息推断出数组的大小，而虚拟机可以通过普通 Java 对象的元数据信息确定 Java 对象的大小。</p>
<p>Mark Word 的结构如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207271726954.png" alt="在这里插入图片描述">
<img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207271726890.png" alt="在这里插入图片描述"></p>
<p>以 32 位虚拟机为例，总结下在不同锁状态下，Mark Word 的字节码分配情况。</p>
<p>| 锁状态 | 字节码分配情况 |
|</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207271726954.png" type="image/png"/>
    </item>
    <item>
      <title>volatile和CAS的弊端</title>
      <link>https://maijunxuan.cn/JUC/volatile%E5%92%8CCAS%E7%9A%84%E5%BC%8A%E7%AB%AF.html</link>
      <guid>https://maijunxuan.cn/JUC/volatile%E5%92%8CCAS%E7%9A%84%E5%BC%8A%E7%AB%AF.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">volatile和CAS的弊端</source>
      <description>volatile和CAS的弊端 一、什么是总线风暴 总线风暴，听着真是一个帅气的词语，但如果发生在你的系统上那就不是很美丽了，废话不多说，先看图说结论。 imgimg 什么是总线风暴，先来看结论 在java中使用unsafe实现cas,而其底层由cpp调用汇编指令实现的，如果是多核cpu是使用lock cmpxchg指令，单核cpu 使用compxch...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>一、什么是总线风暴</h2>
<p>总线风暴，听着真是一个帅气的词语，但如果发生在你的系统上那就不是很美丽了，废话不多说，先看图说结论。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207182244806.jpeg" alt="img">img</p>
<p>什么是总线风暴，先来看结论</p>
<p>在java中使用unsafe实现cas,而其底层由cpp调用汇编指令实现的，如果是多核cpu是使用lock cmpxchg指令，单核cpu 使用compxch指令。如果在短时间内产生大量的cas操作在加上 volatile的嗅探机制则会不断地占用总线带宽，导致总线流量激增，就会产生总线风暴。     总之，就是因为volatile 和CAS 的操作导致BUS总线缓存一致性流量激增所造成的影响。</p>
<h2>二、一些需要的基础知识</h2>
<p>这里有些基础需要铺垫下，了解过volatile和cas 的朋友都知道由于一个变量在多个高速缓存中都存在，但由于高速缓存间的数据是不共享的，所以势必会有数据不一致的问题，为了解决这种问题处理器是通过总线锁定<strong>和</strong>缓存锁定这两个机制来保证复杂内存操作的原子性的。</p>
<h3>1、总线锁</h3>
<p>在早期处理器提供一个 LOCK# 信号，CPU1在操作共享变量的时候会预先对总线加锁，此时CPU2就不能通过总线来读取内存中的数据了，但这无疑会大大降低CPU的执行效率。</p>
<h3>2、缓存一致性协议</h3>
<p>由于总线锁的效率太低所以就出现了缓存一致性协议，Intel 的MESI协议就是其中一个佼佼者。MESI协议保证了每个缓存变量中使用的共享变量的副本都是一致的。</p>
<h3>3、MESI 的核心思想</h3>
<p>modified（修改）、exclusive（互斥）、share（共享）、invalid（无效）</p>
<p>如上图，CPU1使用共享数据时会先数据拷贝到CPU1缓存中,然后置为独占状态(E)，这时CPU2也使用了共享数据，也会拷贝也到CPU2缓存中。通过总线嗅探机制，当该CPU1监听总线中其他CPU对内存进行操作，此时共享变量在CPU1和CPU2两个缓存中的状态会被标记为共享状态(S)；</p>
<p>若CPU1将变量通过缓存回写到主存中，需要先锁住缓存行，此时状态切换为（M），向总线发消息告诉其他在嗅探的CPU该变量已经被CPU1改变并回写到主存中。接收到消息的其他CPU会将共享变量状态从（S）改成无效状态（I），缓存行失效。若其他CPU需要再次操作共享变量则需要重新从内存读取。</p>
<p><strong>缓存一致性协议失效的情况：</strong></p>
<ul>
<li>共享变量大于缓存行大小，MESI无法进行缓存行加锁；</li>
<li>CPU并不支持缓存一致性协议</li>
</ul>
<h3>4、嗅探机制</h3>
<p>每个处理器会通过嗅探器来监控总线上的数据来检查自己缓存内的数据是否过期，如果发现自己缓存行对应的地址被修改了，就会将此缓存行置为无效。当处理器对此数据进行操作时，就会重新从主内存中读取数据到缓存行。</p>
<h3>5、缓存一致性流量</h3>
<p>通过前面都知道了缓存一致性协议，比如MESI会触发嗅探器进行数据传播。当有大量的volatile 和cas 进行数据修改的时候就会产大量嗅探消息。</p>
<h2>三、总结性言论</h2>
<p>通过上面一顿巴拉，大家应该对开局图有一定的了解了，也大概知道了总线风暴的原因。这里再做一下概括性的总结（当前内部还有很有详细的机制，大家感兴趣可以撸一波）</p>
<p>在多核处理器架构上，所有的处理器是共用一条总线的，都是靠此总线来和主内存进行数据交互。当主内存的数据同时存在于多个处理的高速缓存中时，某一处理器更新了此共享数据后。会通过总线触发嗅探机制来通知其他处理器将自己高速缓存内的共享数据置为无效，在下次使用时重新从主内存加载最新数据。而这种通过总线来进行通信则称之为”缓存一致性流量“。</p>
<p>因为总线是固定的，所有相应可以接受的通信能力也就是固定的了，如果缓存一致性流量突然激增，必然会使总线的处理能力受到影响。而恰好CAS和volatile 会导致缓存一致性流量增大。如果很多线程都共享一个变量，当共享变量进行CAS等数据变更时，就有可能产生总线风暴。</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207182244806.jpeg" type="image/jpeg"/>
    </item>
    <item>
      <title>AOF简介</title>
      <link>https://maijunxuan.cn/Redis/AOF%E7%AE%80%E4%BB%8B.html</link>
      <guid>https://maijunxuan.cn/Redis/AOF%E7%AE%80%E4%BB%8B.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">AOF简介</source>
      <description>AOF简介 什么是AOF AOF 持久化就是在客户端执行完成操作指令后将该指定先记录到内存中，在根据持久化机制将这些指令持久化到硬盘的一种机制**(写后再日志记录)**。注意，这种持久化机制会将指令以文本的形式存储。 AOF为什么采用写后日志 优势 综合考量，redis写后再日志有以下两点好处: 劣势 当然在生产环境，这种持久化机制很可能产生两种问题:...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>什么是AOF</h2>
<p>AOF 持久化就是在客户端执行完成操作指令后将该指定先记录到内存中，在根据持久化机制将这些指令持久化到硬盘的一种机制**(写后再日志记录)**。注意，这种持久化机制会将指令以文本的形式存储。</p>
<h2>AOF为什么采用写后日志</h2>
<h3>优势</h3>
<p>综合考量，redis写后再日志有以下两点好处:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. 客户端操作的指令可能会出错，采用写后再日志的形式可以避免很多没必要的日志记录，节约磁盘空间
2. 写日志需要进行磁盘IO，可能会产生阻塞，所以采用先写入再日志，可以避免写时阻塞
</code></pre></div><h3>劣势</h3>
<p>当然在生产环境，这种持久化机制很可能产生两种问题:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. 有可能在写操作之后，日志记录之前服务器出现宕机，可能会造成数据丢失
2. 主线程磁盘压力过大，导致写入磁盘慢，进而造成后续操作阻塞。
</code></pre></div><h2>配置参数详解</h2>
<h3>appendonly</h3>
<h4>参数详解</h4>
<p>若将该参数设置为yes，则开启aof持久化机制，此时redis持久化机制就以aof为主，而非rdb</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>############################## APPEND ONLY MODE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
#
# The Append Only File is an alternative persistence mode that provides
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is
# still running correctly.
#
# AOF and RDB persistence can be enabled at the same time without problems.
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
#
# Please check https://redis.io/topics/persistence for more information.

appendonly yes

</code></pre></div><h4>使用示例</h4>
<p>我们将该参数配置为yes后重启redis服务端，使用客户端完成如下操作</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 设置三个key
127.0.0.1:6379&gt; set k1 v1
OK
127.0.0.1:6379&gt; set k2 v2
OK
127.0.0.1:6379&gt; set k3 v3
OK
127.0.0.1:6379&gt;


# 全局搜索发现已生成aof文件，大小为110

[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# find / -name appendonly.aof
/usr/sbin/appendonly.aof
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# find / -name appendonly
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# find / -name appendonly.aof
/usr/sbin/appendonly.aof
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# ll appendonly.aof
-rw-r--r-- 1 root root 110 Aug 26 00:09 appendonly.aof




# 再次使用redis客户端写入指令
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli
127.0.0.1:6379&gt; set test vv
(error) NOAUTH Authentication required.
127.0.0.1:6379&gt; auth 123
OK
127.0.0.1:6379&gt; set k4 v4
OK
127.0.0.1:6379&gt;


# 再次查看aof文件大小，变为139，说明aof配置生效
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# ll appendonly.aof
-rw-r--r-- 1 root root 139 Aug 26 00:10 appendonly.aof
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]#
</code></pre></div><h3>appendfilename</h3>
<p>该参数决定aof持久化文件的名字</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># The name of the append only file (default: "appendonly.aof")

appendfilename "appendonly.aof"

</code></pre></div><h3>dir</h3>
<p>该参数决定aof文件持久化位置，默认为redis-server的位置</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># The working directory.
#
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
#
# The Append Only File will also be created inside this directory.
#
# Note that you must specify a directory here, not a file name.
dir ./

</code></pre></div><h3>appendfsync</h3>
<p>在介绍appendfsync，我们必须介绍一下操作系统提供的两个函数</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. write:write操作会触发操作系统延迟写机制，即将需要被写入磁盘的数据先写入页缓冲区，写入完成后立刻返回。同步到硬盘操作由操作系统决定，有可能会因为页缓冲区满了或者特定周期时间点到了，页缓冲区的数据就会被写到磁盘中。所以在文件同步前，如果服务器宕机了，就很可能造成数据丢失。
2. fsync:该调用会强制将缓存写入磁盘中，写入完成后才会结束阻塞，从而保证数据持久化。
</code></pre></div><p>appendfsync 参数决定aof的同步策略，参数有如下三种:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. always:该选项会使得命令一旦写入aof_buf后，就会调用操作系统的fsync将指令写到aof物理文件中，完成操作后线程返回
2. everysec:该选项会在命令写入aof_buf后调用操作系统的wirte，完成write后线程返回。fsync会由专门的线程美标调用一次
3. no:该选项会在命令写入aof_buf后调用操作系统的write，完成write后线程返回，不调用fsync，同步操作由操作系统执行，最长周期为30s。
 appendfsync always
# appendfsync everysec
# appendfsync no

</code></pre></div><p>所以配置时，我们建议采用默认的写入策略everysec，他不会像always造成线程阻塞亦或者像no一样不可控。</p>
<h3>no-appendfsync-on-rewrite</h3>
<p>redis为了保证持久化aof文件时调用fsync时不会出现长时间的卡顿，增加了该参数，若设置为yes，则加redis调用fsync时不会将这段时间客户端写入的指令存放到页缓存(Page Cache)中(但是redis服务端仍然在接收客户端的各种指令)。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># When the AOF fsync policy is set to always or everysec, and a background
# saving process (a background save or AOF log background rewriting) is
# performing a lot of I/O against the disk, in some Linux configurations
# Redis may block too long on the fsync() call. Note that there is no fix for
# this currently, as even performing fsync in a different thread will block
# our synchronous write(2) call.
#
# In order to mitigate this problem it's possible to use the following option
# that will prevent fsync() from being called in the main process while a
# BGSAVE or BGREWRITEAOF is in progress.
#
# This means that while another child is saving, the durability of Redis is
# the same as "appendfsync none". In practical terms, this means that it is
# possible to lose up to 30 seconds of log in the worst scenario (with the
# default Linux settings).
#
# If you have latency problems turn this to "yes". Otherwise leave it as
# "no" that is the safest pick from the point of view of durability.

no-appendfsync-on-rewrite no

</code></pre></div><p>auto-aof-rewrite-percentage和auto-aof-rewrite-min-size</p>
<p>这两个参数决定redis合适进行重写，如下所示，这两个参数分别为100和64mb，意味当本次aof文件超过<code>64+64*100%</code>就触发redis自动重写。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

</code></pre></div><h3>aof-load-truncated</h3>
<p>若设置为yes时在redis加载aof文件出错后会发送日志通知用户，反之则不做任何处理也不会启动redis，用户可以使用<code>redis-check-aof</code>指令完成数据修复。 这个参数笔者会在后文演示。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># If aof-load-truncated is set to yes, a truncated AOF file is loaded and
# the Redis server starts emitting a log to inform the user of the event.
# Otherwise if the option is set to no, the server aborts with an error
# and refuses to start. When the option is set to no, the user requires
# to fix the AOF file using the "redis-check-aof" utility before to restart
# the server.
#
# Note that if the AOF file will be found to be corrupted in the middle
# the server will still exit with an error. This option only applies when
# Redis will try to read more data from the AOF file but not enough bytes
# will be found.
aof-load-truncated yes

</code></pre></div><h3>aof-rewrite-incremental-fsync</h3>
<p>开启该参数后，子进程在进行aof重写时，每32m就会将数据写到的新的aof文件中，从而避免单刷造成的线程阻塞。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># When a child rewrites the AOF file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
aof-rewrite-incremental-fsync yes

</code></pre></div><h3>aof-use-rdb-preamble</h3>
<p>redis 4.0之后支持同时开启rdb和aof，具体后文会详述</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># When rewriting the AOF file, Redis is able to use an RDB preamble in the
# AOF file for faster rewrites and recoveries. When this option is turned
# on the rewritten AOF file is composed of two different stanzas:
#
#   [RDB file][AOF tail]
#
# When loading, Redis recognizes that the AOF file starts with the "REDIS"
# string and loads the prefixed RDB file, then continues loading the AOF
# tail.
aof-use-rdb-preamble yes

</code></pre></div><h2>AOF实践</h2>
<p>介绍aof相关参数后，我们就来演示一下aof使用</p>
<h3>模拟断电数据丢失恢复</h3>
<p>我们在之前的aof文件重命名，模拟断电后数据丢失</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# mv appendonly.aof appendonly.aof.bak


# 重启redis服务端，打开客户端查看数据都丢失了
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli
127.0.0.1:6379&gt; auth 123
OK
127.0.0.1:6379&gt; keys *
(empty array)


# 将aof文件还原，并重启redis

[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# mv appendonly.aof.bak appendonly.aof
mv: overwrite ‘appendonly.aof’? y
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-server /root/redis/redis.conf


# 再次使用redis查看，丢失的数据都回来了
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli
127.0.0.1:6379&gt; auth 123
OK
127.0.0.1:6379&gt; keys *
1) "k4"
2) "k3"
3) "k2"
4) "k1"
127.0.0.1:6379&gt;
</code></pre></div><h2>重写机制</h2>
<h3>重写如何压缩文件体积</h3>
<p>上文已经阐述了redis重写的时机，随着时间的推移，aof文件大小会不断扩大，所以我们需要进行重写完成对aof文件体积的压缩，重写压缩的方式如下，而redis之所以可以实现文件压缩原因有如下:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>        1. redis重写会根据进程内的数据将过期的指令移除，如下所示列表里面A B C等都被pop掉了，所以重写时就不会记录这些指令的push操作
        2. 如下图所示，最终列表u:list只会剩下D C N三个值，重写会将这些值使用一条指令完成
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022043777.png" alt="在这里插入图片描述"></p>
<h3>重写是否会阻塞线程</h3>
<p>会，只不过是fork出bgrewriteaof子进程时阻塞。其重写工作流程如下图所示，整体步骤为:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. fork一个子进程完成负责将原有的aof文件进行重写，此时的客户端新写的数据都会存放到aof缓冲中
2. 子进程完成重写后通知父进程，父进程会将新写的数据追加到aof日志缓冲区，但是在高并发情况下，这极可能造成缓冲区过大，造成追加数据阻塞，所以redis后来通过Linux管道技术实现重写期间就能将缓冲区的数据进行存放到新的aof日志中，这样重写结束后，也只需追加最新的aof缓冲数据即可
3. 重写aof新文件的名字，原子覆盖旧的aof文件
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022044090.png" alt="在这里插入图片描述"></p>
<h3>重启加载</h3>
<p>由于redis持久化机制存在两种情况，所以重启redis加载磁盘数据文件就会先判断是否存在aof，若有aof优先加载aof文件，若没有才加载rdb文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022044237.png" alt="在这里插入图片描述"></p>
<h3>文件校验</h3>
<p>上文说过，aof机制很可能出现写入一半服务器宕机造成aof文件存在错误数据，以下这个示例就是实现如何修复错误数据</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 追加一个错误数据到aof文件末行并杀死redis 模拟服务器宕机
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# vim appendonly.aof


# 再次启动redis，操作数据时发现登录失败
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-server /root/redis/redis.conf
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli
Could not connect to Redis at 127.0.0.1:6379: Connection refused
not connected&gt;


#  使用 redis-check-aof --fix aof文件 修复文件
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-check-aof --fix appendonly.aof
0x              8b: Expected prefix '*', got: 's'
AOF analyzed: size=151, ok_up_to=139, ok_up_to_line=34, diff=12
This will shrink the AOF from 151 bytes, with 12 bytes, to 139 bytes
# 这里选择y
Continue? [y/N]: y
Successfully truncated AOF

# 重启redis，使用客户端连接发现启动成功且数据都还在
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-server /root/redis/redis.conf
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli
127.0.0.1:6379&gt; auth 123
OK
OK
127.0.0.1:6379&gt; keys *
1) "k4"
2) "k3"
3) "k2"
4) "k1"
</code></pre></div><h2>小结</h2>
<h3>使用优势和劣势</h3>
<p>优势:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>    1. 备份机制更稳健，丢失数据几率低
    2. 日志可读，可以处理误操作
</code></pre></div><p>劣势:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. 比RDB更占磁盘空间
2. 每次AOF都进行fsync的话，性能开销大
3. 恢复和备份速度较慢
</code></pre></div><h3>使用建议</h3>
<p><code>Redis4.0</code>实现了RDB和AOF混合方式，即可在两次RDB之间使用AOF记录操作，RDB持久化数据之后清空两次rdb之间的aof文件记录。从而用到RDB快照恢复以及AOF简单记录的优势。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022044226.png" alt="在这里插入图片描述"></p>
<h2>相关面试题</h2>
<ol>
<li>什么是 AOF 持久化？</li>
</ol>
<blockquote>
<p>与RDB相对的持久化机制，实时性更好，记录的是用户成功操作后的指令，缺点是数据备份和恢复略慢与RDB。</p>
</blockquote>
<ol>
<li>AOF 重写了解吗？</li>
</ol>
<blockquote>
<p>上文给出两条配置会触发redis重写机制，重写会fork一个子进程完成旧aof文件压缩重写，在此期间新写入数据都会在aof_buf中，redis通过Linux管道技术支持将aof缓冲数据直接写道新的aof文件。重写完成后会通过修改新的aof文件名实现原子替换。</p>
</blockquote>
<ol>
<li>Redis 4.0 对于持久化机制做了什么优化？</li>
</ol>
<blockquote>
<p>开启aof-use-rdb-preamble，支持两次rdb之间使用aof记录数据，每次RDB结束后将AOF文件数据清空。完美利用RDB持久化快照恢复和AOF数据实时记录的优势。</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022043777.png" type="image/png"/>
    </item>
    <item>
      <title>RDB简介</title>
      <link>https://maijunxuan.cn/Redis/RDB%E7%AE%80%E4%BB%8B.html</link>
      <guid>https://maijunxuan.cn/Redis/RDB%E7%AE%80%E4%BB%8B.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">RDB简介</source>
      <description>RDB简介 RDB持久化机制是将内存中的数据生成快照并持久化到磁盘的过程，RDB可以通过手动或者自动的方式实现持久化。 RDB触发流程 手动触发 save save会指令会直接阻塞当前redis服务器，知道RDB完成了为止，对于线上生产环境数据的备份，我们非常不建议使用这种方式。 bgsave bgsave则是主进程fork一个子进程，由子进程完成持久...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<p>RDB持久化机制是将<strong>内存</strong>中的数据生成<strong>快照</strong>并持久化到<strong>磁盘</strong>的过程，RDB可以通过<strong>手动</strong>或者<strong>自动</strong>的方式实现持久化。</p>
<h2>RDB触发流程</h2>
<h3>手动触发</h3>
<h4>save</h4>
<p>save会指令会直接阻塞当前redis服务器，知道RDB完成了为止，对于线上生产环境数据的备份，我们非常不建议使用这种方式。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; save
OK

</code></pre></div><h4>bgsave</h4>
<p>bgsave则是主进程fork一个子进程，由子进程完成持久化操作，而主进程继续处理客户端的读写请求，如果我们需要手动实现持久化，非常推荐使用这种方式。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 从输出我们就可以看出这种方式会将持久化的操作放在后台执行
127.0.0.1:6379&gt; bgsave
Background saving started

</code></pre></div><p>bgsave的工作流程如下图所示，整体可以简述为:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. 主进程fork出一个子进程，这时候主进程会被阻塞
2. 子进程创建完成后，redis客户端会输出Background saving started，这就意味子进程开始进行持久化操作了
3. 子进程持久化完成后，会生成一个rdb文件，将本次的rdb文件通过原子替换的方式将上一次备份的rdb覆盖。
4. 子进程发送信号通知父进程本次任务完成
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022044305.png" alt="在这里插入图片描述"></p>
<h4>自动触发</h4>
<p>自动触发我们可以通过配置实现redis.conf的save参数实现，如下所示，假如我们希望用户20s内写入3次就进行持久化，只需在配置中加一条<code>save 20 3</code>即可。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># Unless specified otherwise, by default Redis will save the DB:
#   * After 3600 seconds (an hour) if at least 1 key changed
#   * After 300 seconds (5 minutes) if at least 100 keys changed
#   * After 60 seconds if at least 10000 keys changed
#
# You can set these explicitly by uncommenting the three following lines.
#
# save 3600 1
# save 300 100
# save 60 10000
save 20 3

</code></pre></div><p>需要注意的是<code>save 20 3</code>的20s是以redis的时间间隔为主，并不是用户第1次写入后的20s内再写入两次进行持久化。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022045621.png" alt="在这里插入图片描述"></p>
<h2>RDB配置参数详解</h2>
<h3>指定rdb持久化文件名</h3>
<p>如下所示，我们可以通过配置dbfilename来指定，默认为dump.rdb</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># The filename where to dump the DB
dbfilename dump.rdb

</code></pre></div><h3>文件持久化位置</h3>
<p>通过dir来指定，如下默认配置就意味着持久化文件位置和redis服务端位置一致。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># The working directory.
#
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
#
# The Append Only File will also be created inside this directory.
#
# Note that you must specify a directory here, not a file name.
dir ./

</code></pre></div><h3>stop-writes-on-bgsave-error</h3>
<p>当reids无法将文件写入磁盘，直接关掉redis的写操作，默认为yes</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># However if you have setup your proper monitoring of the Redis server
# and persistence, you may want to disable this feature so that Redis will
# continue to work as usual even if there are problems with disk,
# permissions, and so forth.
stop-writes-on-bgsave-error yes

</code></pre></div><h3>rdbcompression</h3>
<p>redis默认会通过LZF算法压缩rdb文件。这种方式会消耗CPU，但是压缩后的大小远远小于内存，但是带来的收益却远远大于这点开销，通过压缩的文件无论是通过网络发送到从节点还是存储到硬盘的空间都是非常可观的。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># Compress string objects using LZF when dump .rdb databases?
# By default compression is enabled as it's almost always a win.
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
rdbcompression yes

</code></pre></div><h3>rdbchecksum</h3>
<p>在存储快照后，还可以让redis使用<strong>CRC64</strong>算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check.
rdbchecksum yes

</code></pre></div><h2>RDB持久化示例</h2>
<h3>模拟断电备份</h3>
<p>上文中我们已经配置了20s内3次写入即可触发rdb，所以我们使用redis客户端进行3次写入</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; set k1 v1
OK
127.0.0.1:6379&gt; set k2 v2
OK
127.0.0.1:6379&gt; set k3 v3
OK
</code></pre></div><p>完成后查看是否生成rdb文件，确认无误后，我们将这个文件备份，并强制关闭redis服务端，模拟断电的场景</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 强制关闭redis服务端
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# ll dump.rdb
-rw-r--r-- 1 root root 118 Aug 24 23:20 dump.rdb
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# ps -ef |grep redis
root      7773     1  0 22:59 ?        00:00:01 redis-server 127.0.0.1:6379
root      8884  7103  0 23:21 pts/0    00:00:00 grep --color=auto redis
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# kill -9 7773

# 重命名rdb文件
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# mv dump.rdb dump.rdb.bak
</code></pre></div><p>此时我们再启动redis就会发现数据为空</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; keys *
(empty array)
</code></pre></div><p>我们将rdb文件还原，并重启redis，可以发现备份数据还原了</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 强制关闭redis
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# ps -ef |grep redis |grep -v grep
root      8956     1  0 23:22 ?        00:00:00 redis-server 127.0.0.1:6379
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# kill -9 8956

# 还原rdb，并启动redis
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# mv dump.rdb.bak dump.rdb
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-server /root/redis/redis.conf
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli
127.0.0.1:6379&gt; auth 123
OK

# 可以看到之前设置的数据都回来了
127.0.0.1:6379&gt; keys *
1) "k3"
2) "k2"
3) "k1"
</code></pre></div><p><strong>注</strong>:当我们使用<strong>shutdown</strong>指令也会自动触发<strong>bgsave</strong>，读者可以自行测试</p>
<h2>RDB优缺点</h2>
<h3>优点</h3>
<ol>
<li>rdb是紧凑压缩的二进制文件，非常实用与备份或者全景复制等场景。</li>
<li>rdb恢复数据效率远远高于aof</li>
</ol>
<h3>缺点</h3>
<ol>
<li>无法做到毫秒级别的实时性持久化，尽管我们可以通过设置紧凑的save完成持久化，但是频繁的fork子进程进行持久化，很可能造成redis主进行长期阻塞。</li>
<li>存储的文件是二进制，不够直观。</li>
</ol>
<h2>RDB更深入的理解</h2>
<ol>
<li>生产环境大内存的redis数据如何在持久化的时候保持数据一致性呢？</li>
</ol>
<blockquote>
<p>redis的rdb持久化是基于cow(写时复制思想)，redis会fork一个子进程完成数据持久化，再次期间发生的原数据修改或者写入的新数据都会生成一个数据副本，被fork的bgsave子进程写入到快照文件中。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022044035.png" alt="在这里插入图片描述"></p>
<ol>
<li>在进行快照操作的这段时间，如果发生服务崩溃怎么办？</li>
</ol>
<blockquote>
<p>服务恢复的数据只会是上一次备份的rdb文件数据，因为bgsave子进程只会将操作成功的文件生成rdb文件覆盖上一次备份的文件。</p>
</blockquote>
<ol>
<li>可以每秒做一次快照吗？</li>
</ol>
<blockquote>
<p>可以，但是开销很大,原因有两点 1.频繁写入内存数据会给磁盘带来很大的压力，多个fork子进程抢占优先的磁盘带宽，前一个子进程没写完，后一个子进程又来写入。 2. rdb持久化每次fork子进程都会阻塞主进程，频繁fork很可能导致主进程长期处于阻塞状态。</p>
</blockquote>
<h2>RDB相关面试题</h2>
<ol>
<li>什么是 RDB 持久化？</li>
</ol>
<blockquote>
<p>Redis可以通过指定时间或者手动的方式将数据以rdb格式的文件持久化到磁盘中，完成数据备份，或者将数据备份到其他的从节点中。还可以用这个rdb文件作为备份文件，在redis数据丢失的时候可以通过rdb文件时间数据还原。</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022044305.png" type="image/png"/>
    </item>
    <item>
      <title>redis事务</title>
      <link>https://maijunxuan.cn/Redis/Redis%E4%BA%8B%E5%8A%A1.html</link>
      <guid>https://maijunxuan.cn/Redis/Redis%E4%BA%8B%E5%8A%A1.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">redis事务</source>
      <description>redis事务 redis事务的定义 redis的事务是一个单独隔离的操作，它会将一系列指令按需排队并顺序执行，期间不会被其他客户端的指令插队。 事务三大指令multi、exec、discard 简介 multi:开启事务 exec:执行事务 取消事务 如下图，通过multi，当前客户端就会开启事务，后续的指令都会安迅存到队列中。当用户键入exec后，...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>redis事务的定义</h2>
<p>redis的事务是一个单独隔离的操作，它会将一系列指令按需排队并顺序执行，期间不会被其他客户端的指令插队。</p>
<h2>事务三大指令multi、exec、discard</h2>
<h3>简介</h3>
<ol>
<li>multi:开启事务</li>
<li>exec:执行事务</li>
<li>取消事务</li>
</ol>
<p>如下图，通过multi，当前客户端就会开启事务，后续的指令都会安迅存到队列中。当用户键入exec后，这些指令都会按顺序执行。 若开启multi后输入若干指令，在键入discard，则之前的指令通通取消执行。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012248019.png" alt="在这里插入图片描述"></p>
<h3>基础示例</h3>
<p>开启事务并提交</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 开启事务
127.0.0.1:6379&gt; MULTI
OK
# 将两个指令组队
127.0.0.1:6379(TX)&gt; set k1 v1
QUEUED
127.0.0.1:6379(TX)&gt; set k2 v2
QUEUED
# 执行两个指令
127.0.0.1:6379(TX)&gt; EXEC
1) OK
2) OK
127.0.0.1:6379&gt; keys *
1) "k1"
2) "k2"
127.0.0.1:6379&gt;
</code></pre></div><h2>事务的错误</h2>
<h3>组队时错误</h3>
<p>如下，我们在组队时输入错误的指令，redis会之间将所有指令都会失效，因为这是一个问题队列。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; MULTI
OK
127.0.0.1:6379(TX)&gt; set k1 v1
QUEUED
127.0.0.1:6379(TX)&gt; set k2 v2
QUEUED
127.0.0.1:6379(TX)&gt; set k33
(error) ERR wrong number of arguments for 'set' command
127.0.0.1:6379(TX)&gt; set k4 v4
QUEUED
127.0.0.1:6379(TX)&gt; exec
(error) EXECABORT Transaction discarded because of previous errors.
127.0.0.1:6379&gt; keys *
(empty array)
127.0.0.1:6379&gt;
</code></pre></div><h3>执行时错误</h3>
<p>执行时错误比较特殊，他在按序处理所有指令，遇到错误就按正常流程处理继续执行下去。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; MULTI
OK
127.0.0.1:6379(TX)&gt; set k1 v1
QUEUED
127.0.0.1:6379(TX)&gt; INCR k1
QUEUED
127.0.0.1:6379(TX)&gt; set k2 v2
QUEUED
127.0.0.1:6379(TX)&gt; EXEC
1) OK
2) (error) ERR value is not an integer or out of range
3) OK
127.0.0.1:6379&gt; keys *
1) "k1"
2) "k2"
127.0.0.1:6379&gt;
</code></pre></div><h3>小结</h3>
<p>为什么组队时出错和运行时出错会出现两种不同的情况呢？其实我们可以这样理解:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. 组队时出错，错误对于redis来说是已知的，从设计者的角度出发，对于已知的错误我们需要提醒用户进行处理，所以就让事务中的所有指令都失效。
2. 运行时出错:因为错误是未知的，所以redis必须执行时才能知道错误，而redis也无错误回滚机制，所以就出现了将错就错，继续执行后续指令并有效的情况。
</code></pre></div><h2>为什么需要事务</h2>
<h2>高并发导致超卖问题</h2>
<p>如下图，假设一个秒杀活动中有3个用户，高并发场景下,执行以下步骤</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>    1. 都从数据库中查询到商品，若大于0开抢，小于等于0通知用户秒杀活动结束
    2. 有两个用户线程在此期间休眠
    3. 1人抢到商品，数据库扣为0
    4. 另外两个线程此时复活，由于休眠前查询到库存为1，也都执行抢产品的逻辑，导致库存最终变为-2，出现超卖问题
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012248643.png" alt="在这里插入图片描述"></p>
<h2>悲观锁</h2>
<p><strong>悲观锁(Pessimistic Lock)</strong> 认为自己操作的数据很可能会被他人修改，所以每次进行操作前都会对数据上锁，常见的关系型数据库MySQL的行锁、表锁等都是基于这种锁机制。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012248871.png" alt="在这里插入图片描述"></p>
<h2>乐观锁</h2>
<h3>乐观锁简介</h3>
<p><strong>乐观锁(Optimistic Lock)</strong> 认为自己操作的数据不会被他人修改，当用户使用乐观锁锁住数据时，用户对拿到当前数据的版本号，修改完成后，会比较这个版本号和数据的版本号是否一致，若一致则说明别人没动过，提交修改操作。反之就是数据被他人动过，用户持有数据过期，提交失败。redis就是利用这种check and set机制实现事务的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012248505.png" alt="在这里插入图片描述"></p>
<h2>基于watch实现乐观锁</h2>
<h3>简介</h3>
<p>redis就是通过CAS(check and set)实现乐观锁的，通过watch指令监听一个或者多个key值，当用户提交修改key值的事务时，会检查监听的key是否发生变化。若没有发生变化，则提交成功。</p>
<h3>第一个客户端初始化key值并开启监听以及事务</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 刷新数据库
127.0.0.1:6379&gt; FLUSHDB
OK
# 设置key值
127.0.0.1:6379&gt; set key 10
OK
# 监听key
127.0.0.1:6379&gt; WATCH key
OK
# 开启事务
127.0.0.1:6379&gt; MULTI
OK

</code></pre></div><h3>客户端2同样开启监听并开启事务</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 监听key
127.0.0.1:6379&gt; WATCH key
OK
# 开启事务
127.0.0.1:6379&gt; MULTI
OK
</code></pre></div><h3>客户端1提交修改</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 指令加入队列
127.0.0.1:6379(TX)&gt; INCR key
QUEUED
# 执行指令，可以看到执行成功，修改了一条数据，值被更新为11
127.0.0.1:6379(TX)&gt; EXEC
1) (integer) 11
</code></pre></div><h3>客户端2指令组队并提交</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379(TX)&gt; INCR key
QUEUED
127.0.0.1:6379(TX)&gt; exec
(nil)
</code></pre></div><h3>小结</h3>
<p>可以上到两个客户端同时监听一个key值，第一个客户端修改后，第2个客户端的修改就无法成功提交，说明redis的watch是基于乐观锁机制的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012248063.png" alt="在这里插入图片描述"></p>
<h2>更深入的理解事务</h2>
<h3>为什么redis不支持事务回滚</h3>
<ol>
<li>
<p>redis实际上是支持事务回滚的，只不过这种回滚是发生在指令组队阶段，因为这些指令是可以预知的。</p>
</li>
<li>
<p>对于运行时出错，redis是不支持回滚的，因为情况是未知的，所以为了保证redis简单快速，所以设计者并未将运行时出错的事务回滚。</p>
<h3>如何理解redis的事务与ACID</h3>
</li>
<li>
<p><strong>原子性:</strong> redis设计者认为他们是支持原子性的，因为原子性的概念是:所有指令要么全部执行，要么全部不执行。而非一起成功或者失败。</p>
</li>
<li>
<p><strong>一致性:</strong> redis事务保证命令失败(组队时出错)的情况下可以回滚，确保了一致性。</p>
</li>
<li>
<p><strong>隔离性:</strong> redis是基于单线程的，所以执行指令时不会被其他客户端打断，保证了隔离性。但是redis并没有像其他关系型数据库一样设计隔离级别。</p>
</li>
<li>
<p><strong>持久性:</strong> 持久性的定义为<strong>事务处理结束后，对数据的修改就是永久的</strong>，<strong>即便系统故障也不会丢失。</strong>)，考虑到性能问题，redis无论rdb还是aof都是异步持久化，所以并不能保证持久性。</p>
</li>
</ol>
<h3>Redis事务的其他实现</h3>
<p>基于lua脚本可以保证redis指令一次性执按顺序执行完成，并且不会被其他客户端打断。我们可以将其想象为redis实现悲观锁的一种方式，但是这种方式却无法实现事务回滚。</p>
<h2>事务三特性</h2>
<ol>
<li><strong>单独的隔离操作</strong>:事务中的命令都会序列化并且按序执行，执行过程中不会被其他客户端的指令打断。</li>
<li><strong>没有隔离级别的概念</strong>: 事务提交前所有指令都不会被执行。</li>
<li><strong>无原子性</strong>:上文示例已经演示过，执行时出错某段指令，事务过程中的指令仍然会生效。</li>
</ol>
<h2>实践——基于redis事务实现秒杀</h2>
<h3>需求简介</h3>
<p>我们使用一段简单的java代码实现一次秒杀活动,需求：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>    1. 秒杀成功的用户不可重复参加活动
    2. 秒杀的产品为0时，用户不可进行秒杀
    3. 若仓库中不存着该产品，则提示活动未开始
</code></pre></div><h3>基础代码</h3>
<h4>示例</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public boolean doSecKill(String uid, String productId) {
        if (uid == null || "".equals(uid)) {
            System.out.println("uid 不可为空");
            return false;
        }

        if (productId == null || "".equals(productId)) {
            System.out.println("productId 不可为空");
            return false;
        }

        Jedis jedis = null;
        try {
            jedis = new Jedis("127.0.0.1");
            String productCount = jedis.get("sk:" + productId);
            if (null == productCount || "".equals(productCount)) {
                System.out.println("秒杀还未开始");
                return false;
            }

            if (jedis.sadd("sk:users", uid) &lt;= 0) {
                System.out.println("该用户已参与过秒杀活动,不可重复参加");
                return false;
            }

            int count = Integer.valueOf(productCount);
            if (count &lt;= 0) {
                System.out.println("秒杀失败，谢谢参与");
                return false;
            }
            jedis.decr("sk:" + productId);
            jedis.sadd("sk:users", uid);
            return true;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (jedis != null) {
                jedis.close();
            }
        }

        return true;
    }
</code></pre></div><h4>测试代码</h4>
<h5>基础测试</h5>
<p>首先我们在redis中设置好商品数量</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; set sk:001 10
OK
127.0.0.1:6379&gt; get sk:001
"10"
</code></pre></div><p>执行测试逻辑</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> @Test
    public void secKillTest() {
        for (int i = 0; i &lt; 15; i++) {
            doSecKill("" + i, "001");
        }

    }
</code></pre></div><p>可以看到代码正常运行并且库存被秒杀光了</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012249600.png" alt="在这里插入图片描述"></p>
<p>秒杀成功的用户是这几个</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; SMEMBERS sk:users
 1) "0"
 2) "1"
 3) "2"
 4) "3"
 5) "4"
 6) "5"
 7) "6"
 8) "7"
 9) "8"
10) "9"
11) "10"
12) "11"
13) "12"
14) "13"
15) "14"
</code></pre></div><h4>存在问题</h4>
<ol>
<li>超卖</li>
<li>并发场景下容易出现redis请求超时</li>
</ol>
<p>超卖测试用例，这里笔者为了简单快捷，就是用了juc的工具模拟并发并使用flushdb清空redis数据库，再设置10个库存量。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Test
    public void concurrencySecKillTest() throws InterruptedException {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ExecutorService threadPool = Executors.newFixedThreadPool(2000);
        for (int i = 0; i &lt; 2000; i++) {
            final String uid = "" + i + 1;
            Runnable r = () -&gt; {
                System.out.println("uid " + uid + "准备开抢");
                try {
                    countDownLatch.await();
                } catch (InterruptedException e) {
                    System.out.println("uid" + uid + "秒杀失败 原因:" + e);
                }
                boolean result = doSecKill(uid, "001");
                System.out.println("uid" + uid + " 秒杀结果 " + result);
            };
            threadPool.submit(r);

        }

        Thread.sleep(5000);
        System.out.println("秒杀开始");
        countDownLatch.countDown();
        threadPool.shutdown();
        while (!threadPool.isTerminated()) {

        }


    }
</code></pre></div><p>可以看到库存出现负数，这就大名鼎鼎的超卖问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012249770.png" alt="在这里插入图片描述"></p>
<p>如下图，由于查询库存，扣除库存，记录获奖用户三个指令对于每一个redis客户端来说都是独立的，所以又可能出现宏观上(即相差几毫秒)，n个用户查询到库存中有1个商品，然后各自执行扣除逻辑，导致库存出现超卖的情况。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012249275.png" alt="在这里插入图片描述"></p>
<h3>改进(池化和增加事务解决超卖问题)</h3>
<h4>示例</h4>
<p>首先我们编写一个jedis池化工具解决偶现的redis请求超时问题</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;

public class JedisPoolUtil {
    private static volatile JedisPool jedisPool = null;

    private JedisPoolUtil() {
    }

    public static JedisPool getJedisPoolInstance() {
        if (null == jedisPool) {
            synchronized (JedisPoolUtil.class) {
                if (null == jedisPool) {
                    JedisPoolConfig poolConfig = new JedisPoolConfig();
                    poolConfig.setMaxTotal(200);
                    poolConfig.setMaxIdle(32);
                    poolConfig.setMaxWaitMillis(100*1000);
                    poolConfig.setBlockWhenExhausted(true);
                    poolConfig.setTestOnBorrow(true);  // ping  PONG

                    jedisPool = new JedisPool(poolConfig, "127.0.0.1", 6379, 60000 );
                }
            }
        }
        return jedisPool;
    }

}
</code></pre></div><p>基于事务改进秒杀案例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public boolean doSecKill(String uid, String productId) {
        if (uid == null || "".equals(uid)) {
            System.out.println("uid 不可为空");
            return false;
        }

        if (productId == null || "".equals(productId)) {
            System.out.println("productId 不可为空");
            return false;
        }

        Jedis jedis = null;
        try {
            //避免redis连接超时
            jedis = JedisPoolUtil.getJedisPoolInstance().getResource();

            //监视库存 相当于拿到库存的乐观锁
            jedis.watch("sk:" + productId);


            String productCount = jedis.get("sk:" + productId);
            if (null == productCount || "".equals(productCount)) {
                System.out.println("秒杀还未开始");
                return false;
            }

            if (jedis.sismember("sk:success:uid", uid)) {
                System.out.println("该用户已成功秒杀，不可重复参加");
                return false;
            }

            //开启事务执行扣减操作
            Transaction multi = jedis.multi();

            int count = Integer.valueOf(productCount);
            if (count &lt;= 0) {
                System.out.println("活动结束，谢谢参与");
//                jedis.close();
                return false;
            }
            multi.decr("sk:" + productId);
            multi.sadd("sk:success:uid", uid);

            List&lt;Object&gt; result = multi.exec();
            for (Object o : result) {
                System.out.println("执行结果: " + o.toString());
            }
            if (null == result || CollectionUtils.isEmpty(result)) {
                System.out.println("秒杀失败,谢谢参与");
                return false;
            }
            return true;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (jedis != null) {
                jedis.close();
            }
        }

        return true;
    }
</code></pre></div><p>[测试</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> @Test
    public void concurrencySecKillTest() throws InterruptedException {

        long start = System.currentTimeMillis();
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ExecutorService threadPool = Executors.newFixedThreadPool(2000);
        for (int i = 0; i &lt; 10000; i++) {
            final String uid = "" + i + 1;
            Runnable r = () -&gt; {
                System.out.println("uid " + uid + "准备开抢");
                try {
                    countDownLatch.await();
                } catch (InterruptedException e) {
                    System.out.println("uid" + uid + "秒杀失败 原因:" + e);
                }
                boolean result = doSecKill(uid, "001");
                System.out.println("uid" + uid + " 秒杀结果 " + result);
            };
            threadPool.submit(r);

        }

        Thread.sleep(1000);
        System.out.println("秒杀开始");
        countDownLatch.countDown();
        threadPool.shutdown();
        while (!threadPool.isTerminated()) {

        }

        long end = System.currentTimeMillis();
        long total = end - start;
        System.out.println("执行结束总执行时间 " + total);

    }
</code></pre></div><p>再次压测就会发现，这次就不会再出现超卖问题</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012249152.png" alt="在这里插入图片描述"></p>
<h4>存在问题</h4>
<p>库存遗留问题，由于redis事务使用的是乐观锁，有可能出现大量用户操作数据过期而导致大量库存并没有被秒杀完的情况，对此我们可以增加一定的库存量来模拟库存遗留问题</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012249382.png" alt="在这里插入图片描述"></p>
<p>为了更好的演示这种情况，我们将库存设置为995个，开启1000个线程</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Test
    public void concurrencySecKillTest() throws InterruptedException {

        long start = System.currentTimeMillis();
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ExecutorService threadPool = Executors.newFixedThreadPool(2000);
        for (int i = 0; i &lt; 1000; i++) {
            final String uid = "" + i + 1;
            Runnable r = () -&gt; {
                System.out.println("uid " + uid + "准备开抢");
                try {
                    countDownLatch.await();
                } catch (InterruptedException e) {
                    System.out.println("uid" + uid + "秒杀失败 原因:" + e);
                }
                boolean result = doSecKill(uid, "001");
                System.out.println("uid" + uid + " 秒杀结果 " + result);
            };
            threadPool.submit(r);

        }

        Thread.sleep(1000);
        System.out.println("秒杀开始");
        countDownLatch.countDown();
        threadPool.shutdown();
        while (!threadPool.isTerminated()) {

        }

        long end = System.currentTimeMillis();
        long total = end - start;
        System.out.println("执行结束总执行时间 " + total);

    }
</code></pre></div><p>可以看到问题复现了</p>
<h3>再改进(基于lua脚本解决库存遗留问题)</h3>
<h4>lua脚本的优势</h4>
<ol>
<li>可以轻易调用redis使用的C语言库函数，也可以轻易被C语言代码调用</li>
<li>具有一定原子性，将上述查询，扣减等逻辑全部编写到一个lua脚本中，避免宏观的并发查询和扣减，从而解决乐观锁的库存遗留问题</li>
</ol>
<h4>代码示例</h4>
<p>代码如下所示，这里笔者就不做测试了</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public boolean doSecKillByLua(String uid, String productId) {
        Jedis jedis = null;

        try {
            jedis = JedisPoolUtil.getJedisPoolInstance().getResource();
            /**
             * uid KEYS[1] 用户传入的第一个变量,用户id
             * prodid KEYS[2] 用户传入的第2个变量 产品id
             * 若用户已在秒杀成功名单中返回-1
             * 若库存小于等于0 返回0
             * 反之调用成功返回1
             */
            String luaScript = "local uid=KEYS[1]; \n" +
                    "local prodid=KEYS[2];\n" +
                    "local productCount=\"sk:\"..prodid;\n" +
                    "local successUsers=\"sk:success:uid\"; \n" +
                    "local userExists=redis.call(\"sismember\",successUsers,uid);\n" +
                    "if tonumber(userExists)==1 then \n" +
                    "  return -1;\n" +
                    "end\n" +
                    "local num= redis.call(\"get\" ,productCount);\n" +
                    "if tonumber(num)&lt;=0 then \n" +
                    "  return 0; \n" +
                    "else \n" +
                    "  redis.call(\"decr\",productCount);\n" +
                    "  redis.call(\"sadd\",successUsers,uid);\n" +
                    "end\n" +
                    "return 1;\n" +
                    "\n" +
                    "\n";

            String s = jedis.scriptLoad(luaScript);
            Object object = jedis.evalsha(s, 2, uid, productId);
            String result = String.valueOf(object);
            if ("-1".equals(result)) {
                System.out.println("当前用户以秒杀成功，不可重复");
                return false;
            } else if ("0".equals(result)) {
                System.out.println("活动结束");
                return false;
            } else if ("1".equals(result)) {
                System.out.println("uid:" + uid + "秒杀成功");
                return true;
            }

            return false;
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            jedis.close();
        }
        return false;
    }
</code></pre></div><h3>更进一步反思，基于java锁的性能是否比lua脚本更优越</h3>
<h4>代码示例</h4>
<p>以下便是java锁实现的秒杀案例的代码</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public boolean doSecKill3(String uid, String productId) {
        if (uid == null || "".equals(uid)) {
            System.out.println("uid 不可为空");
            return false;
        }

        if (productId == null || "".equals(productId)) {
            System.out.println("productId 不可为空");
            return false;
        }

        Jedis jedis = null;
        try {
            //避免redis连接超时
            jedis = JedisPoolUtil.getJedisPoolInstance().getResource();
            synchronized (SecKillTest.class) {
                //监视库存 相当于拿到库存的乐观锁
                jedis.watch("sk:" + productId);


                String productCount = jedis.get("sk:" + productId);
                if (null == productCount || "".equals(productCount)) {
                    System.out.println("秒杀还未开始");
                    return false;
                }

                if (jedis.sismember("sk:success:uid", uid)) {
                    System.out.println("该用户已成功秒杀，不可重复参加");
                    return false;
                }


                //开启事务执行扣减操作
                Transaction multi = jedis.multi();

                int count = Integer.valueOf(productCount);
                if (count &lt;= 0) {
                    System.out.println("活动结束，谢谢参与");
                    return false;
                }
                multi.decr("sk:" + productId);
                multi.sadd("sk:success:uid", uid);

                List&lt;Object&gt; result = multi.exec();

                if (null == result || CollectionUtils.isEmpty(result)) {
                    System.out.println("秒杀失败,谢谢参与");
                    return false;
                }
                return true;
            }


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (jedis != null) {
                jedis.close();
            }
        }

        return true;
    }
</code></pre></div><h4>性能评测</h4>
<h5>基于java锁</h5>
<p>我们同样设置9990个库存和10000个线程来看看效果</p>
<p>基于java锁的测试代码</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Test
    public void concurrencySecKillTest() throws InterruptedException {

        long start = System.currentTimeMillis();
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ExecutorService threadPool = Executors.newFixedThreadPool(2000);
        for (int i = 0; i &lt; 10000; i++) {
            final String uid = "" + i + 1;
            Runnable r = () -&gt; {
                System.out.println("uid " + uid + "准备开抢");
                try {
                    countDownLatch.await();
                } catch (InterruptedException e) {
                    System.out.println("uid" + uid + "秒杀失败 原因:" + e);
                }
                boolean result = doSecKill3(uid, "001");
                System.out.println("uid" + uid + " 秒杀结果 " + result);
            };
            threadPool.submit(r);

        }

        Thread.sleep(1000);
        System.out.println("秒杀开始");
        countDownLatch.countDown();
        threadPool.shutdown();
        while (!threadPool.isTerminated()) {

        }

        long end = System.currentTimeMillis();
        long total = end - start;
        System.out.println("执行结束总执行时间 " + total);

    }
</code></pre></div><p>执行时间</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>执行结束总执行时间 5091
</code></pre></div><h5>基于lua脚本</h5>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Test
    public void concurrencySecKillTest() throws InterruptedException {

        long start = System.currentTimeMillis();
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ExecutorService threadPool = Executors.newFixedThreadPool(2000);
        for (int i = 0; i &lt; 10000; i++) {
            final String uid = "" + i + 1;
            Runnable r = () -&gt; {
                System.out.println("uid " + uid + "准备开抢");
                try {
                    countDownLatch.await();
                } catch (InterruptedException e) {
                    System.out.println("uid" + uid + "秒杀失败 原因:" + e);
                }
                boolean result = doSecKillByLua(uid, "001");
                System.out.println("uid" + uid + " 秒杀结果 " + result);
            };
            threadPool.submit(r);

        }

        Thread.sleep(1000);
        System.out.println("秒杀开始");
        countDownLatch.countDown();
        threadPool.shutdown();
        while (!threadPool.isTerminated()) {

        }

        long end = System.currentTimeMillis();
        long total = end - start;
        System.out.println("执行结束总执行时间 " + total);

    }
</code></pre></div><p>执行时间</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>执行结束总执行时间 4180
</code></pre></div><h5>小结</h5>
<p>由于lua脚本更接近底层的调用C语言代码，所以执行效率相比java锁更加高效。</p>
<h2>面试题</h2>
<h3>如何使用 Redis 事务？</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Redis 可以通过 MULTI，EXEC，DISCARD 和 WATCH 等命令来实现事务(transaction)功能。
</code></pre></div><h3>Redis 支持原子性吗？</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>redis事务出错不回滚使得很多人认为redis事务是未被原子性这一原则的，实际上redis设计者不这么认为，因为redis设计者认为原子性的定义为:所有指令要么一起执行，要么全都不执行，而不是完全成功。
</code></pre></div><h3>如何解决 Redis 事务的缺陷？</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>从上文我们看出基于redis事务进行秒杀方面的需求时会出现库存遗留问题，这就是redis事务乐观锁机制的缺陷。
为了保证所有事务都能一次性的执行，我们可以使用lua脚本更快(lua脚本可以轻易调用C语言库函数以及被C语言直接调用)、更有效(基于lua脚本可以保证指令一次性被执行不会被其他线程打断)，但是这种方案不支持回滚。
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012248019.png" type="image/png"/>
    </item>
    <item>
      <title></title>
      <link>https://maijunxuan.cn/Redis/Redis%E7%9A%84Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A4%BA%E4%BE%8B.html</link>
      <guid>https://maijunxuan.cn/Redis/Redis%E7%9A%84Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A4%BA%E4%BE%8B.html</guid>
      <source url="https://maijunxuan.cn/rss.xml"></source>
      <description>Redis的Java客户端示例 Jedis基础示例 maven项目引入jedis依赖 简介 实际上jedis很多api都和redis操作命令相同，我们完全可以通过调试快速掌握jedis的使用 开启redis，并测试jedis连通性 若返回true则说明redis连接成功 jedis操作字符串 jedis操作列表 使用jedis操作集合 使用jedis操...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Redis的Java客户端示例</h2>
<h2>Jedis基础示例</h2>
<h4>maven项目引入jedis依赖</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> &lt;!--jedis依赖--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;redis.clients&lt;/groupId&gt;
            &lt;artifactId&gt;jedis&lt;/artifactId&gt;
            &lt;version&gt;3.2.0&lt;/version&gt;
        &lt;/dependency&gt;
</code></pre></div><h4>简介</h4>
<p>实际上jedis很多api都和redis操作命令相同，我们完全可以通过调试快速掌握jedis的使用</p>
<h4>开启redis，并测试jedis连通性</h4>
<p>若返回true则说明redis连接成功</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> /**
     * 测试ping
     */
    @Test
    public void testPing() {
        Jedis jedis = new Jedis("127.0.0.1");
        String result = jedis.ping();
        System.out.println("ping返回的结果:" + result);
        System.out.println("PONG".equals(result));
        jedis.close();
    }
</code></pre></div><h4>jedis操作字符串</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>/**
     * 测试str
     */
    @Test
    public void testStr() {
        Jedis jedis = new Jedis("127.0.0.1");
        jedis.set("key1", "str1");
        jedis.set("key2", "str2");
        jedis.set("key3", "str3");

        Set&lt;String&gt; keys = jedis.keys("*");
        int size = keys.size();
//        获取key的大小
        System.out.println("key size：" + size);

        //遍历所有的key
        for (String key : keys) {
            System.out.println("redis中的key： " + key);
        }

        //判断key是否存在
        System.out.println(jedis.exists("key1"));
        //查看key的ttl值
        System.out.println(jedis.ttl("key1"));
        //获取key的值
        System.out.println(jedis.get("key2"));

        jedis.close();

        jedis.flushDB();

        jedis.mset("key1", "value1", "key2", "value2");
        for (String key : jedis.keys("*")) {
            System.out.println("key " + key + "  value: " + jedis.get(key));
        }


    }
</code></pre></div><h4>jedis操作列表</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> @Test
    public void testList() {
        Jedis jedis = new Jedis("127.0.0.1");
        jedis.flushDB();
        jedis.rpush("list", "a");
        jedis.rpush("list", "b");
        jedis.rpush("list", "c");

        List&lt;String&gt; list = jedis.lrange("list", 0, -1);
        for (String ele : list) {
            System.out.println("list中的元素 " + ele);
        }
        jedis.close();
    }
</code></pre></div><h4>使用jedis操作集合</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Test
    public void testSet() {
        Jedis jedis = new Jedis("127.0.0.1");
        jedis.flushDB();
        jedis.sadd("set", "a");
        jedis.sadd("set", "b");
        jedis.sadd("set", "c");
        jedis.sadd("set", "c");
        jedis.sadd("set", "c");

        Set&lt;String&gt; smembers = jedis.smembers("set");
        for (String ele : smembers) {
            System.out.println("set中的元素 " + ele);
        }
        jedis.close();
    }
</code></pre></div><h4>使用jedis操作哈希</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> @Test
    public void testHash() {
        Jedis jedis = new Jedis("127.0.0.1");
        jedis.flushDB();
        jedis.hset("user:1", "name", "xiaoming");
        jedis.hset("user:1", "age", "18");

        Map user2 = new HashMap();
        user2.put("name", "xiaowang");
        user2.put("age", "19");
        jedis.hmset("user:2", user2);

        List&lt;String&gt; user1Result = jedis.hmget("user:1", "name", "age");
        for (String s : user1Result) {
            System.out.println("user:1 " + s);
        }

        String age = jedis.hget("user:2", "age");
        System.out.println("user:2 age:" + age);
        jedis.close();
    }
</code></pre></div><h4>使用jedis操作有序集合</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Test
    public void testZset(){
        Jedis jedis = new Jedis("127.0.0.1");
        jedis.flushDB();
        jedis.zadd("zset",10,"a");
        jedis.zadd("zset",12,"b");
        jedis.zadd("zset",99,"c");
        jedis.zadd("zset",18,"d");
        jedis.zadd("zset",33,"e");

        Set&lt;String&gt; zset = jedis.zrange("zset", 0, -1);
        for (String s : zset) {
            System.out.println("zset "+s);
        }

        jedis.close();
    }
</code></pre></div><h2>基于jedis连接池</h2>
<h4>简介</h4>
<p>使用上文的方式操作redis会使得每次操作都会新建TCP连接，如果用户操作不当很可能导致连接泄露，所以我们推荐通过jedis连接池的方式建立连接。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022045901.png" alt="在这里插入图片描述"></p>
<h4>使用示例</h4>
<p>可以看到笔者使用标准的异常捕获以及close方法归还jedis连接资源。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>/**
     * jedis连接池
     */
    @Test
    public void testJedisPool() {
        GenericObjectPoolConfig jedisConfig = new GenericObjectPoolConfig();
//        最大连接数
        jedisConfig.setMaxTotal(GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
//        最大空闲连接数
        jedisConfig.setMaxIdle(GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
        //最小空闲连接数
        jedisConfig.setMinIdle(GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
        //开启jmx功能
        jedisConfig.setJmxEnabled(true);
        //设置连接池没有连接后 redis客户端等待获取连接的时长
        jedisConfig.setMaxWaitMillis(3000);

        JedisPool jedisPool = new JedisPool(jedisConfig, "127.0.0.1");
        Jedis jedis = null;

        try {
            jedis = jedisPool.getResource();
            jedis.flushDB();
            jedis.set("hello", "world");
            String hello = jedis.get("hello");
            System.out.println("get result from redis key:hello value: " + hello);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            jedis.close();
        }


    }
</code></pre></div><p>至于为什么close不是关闭连接资源而是归还连接资源，从jedis源码我们就可以看出，当datasource不为空时，jedis做的就是将连接资源归还，而不是关闭。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012249400.png" alt="在这里插入图片描述"></p>
<h2>基于jedis完成短信验证码</h2>
<h4>需求</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>/**
     * 1、输入手机号，点击发送后随机生成6位数字码，2分钟有效
     * 2、输入验证码，点击验证，返回成功或失败
     * 3、每个手机号每天只能申请3次验证码
     */
</code></pre></div><h4>实现</h4>
<h6>生成验证码</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>private void generateCode(String phoneNum) {
        Jedis jedis = new Jedis("127.0.0.1");

        try {
            String countKey = "user:count:" + phoneNum;
            String count = jedis.get(countKey);
            if (count == null || "".equals(count)) {
                jedis.setex(countKey, 24 * 60 * 60, "1");
            } else if (Integer.valueOf(count) &lt;= 2) {
                jedis.incr(countKey);
            } else {
                System.out.println("每个手机号每天只能申请3次验证码");
                return;
            }

            String code = String.valueOf((int) ((Math.random() * 9 + 1) * Math.pow(10, 5)));
            String codeKey = "user:code:" + phoneNum;
            System.out.println("key：" + countKey + "生成的验证码为:" + code);
            //输入手机号，点击发送后随机生成6位数字码，2分钟有效
            jedis.setex(codeKey, 120, code);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (jedis != null) {
                jedis.close();
            }
        }

    }
</code></pre></div><h6>校验</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>private void verify(String phoneNum, String code) {
        Jedis jedis = new Jedis("127.0.0.1");
        try {
            String redisCode = jedis.get("user:code:" + phoneNum);
            if (redisCode != null &amp;&amp; !"".equals(redisCode) &amp;&amp; redisCode.equals(code)) {
                System.out.println(phoneNum + "校验成功");
            } else {
                System.out.println(phoneNum + "校验失败");
            }

        } catch (Exception e) {

        } finally {
            if (jedis != null) {
                jedis.close();
            }
        }
    }
</code></pre></div><h6>测试</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> @Test
    public void captchaTest() {
        String phone = "123";
        generateCode(phone);

//        verify(phone,"469471");
    }
</code></pre></div><p>首先得到验证码</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012249502.png" alt="在这里插入图片描述"></p>
<p>再进行校验</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012249971.png" alt="在这里插入图片描述"></p>
<h6>测试申请3次验证码</h6>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012249854.png" alt="在这里插入图片描述"></p>
<h2>spring boot整合Redis使用示例</h2>
<h4>引入依赖</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> &lt;!-- redis --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;!-- spring2.X集成redis所需common-pool2--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
            &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;
        &lt;/dependency&gt;
</code></pre></div><h4>spring boot配置文件增加配置</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>server.port=8080
##Redis服务器地址
spring.redis.host=127.0.0.1
##Redis服务器连接端口
spring.redis.port=6379
##Redis数据库索引（默认为0）
spring.redis.database= 0
##连接超时时间（毫秒）
spring.redis.timeout=1800000
##连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=20
##最大阻塞等待时间(负数表示没限制)
spring.redis.lettuce.pool.max-wait=-1
##连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=5
##连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=0
</code></pre></div><h4>编写配置类</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>package com.example.demo.redisTemplate;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CachingConfigurerSupport;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializationContext;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import java.time.Duration;

@EnableCaching
@Configuration
public class RedisConfig extends CachingConfigurerSupport {

    @Bean
    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) {
        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();
        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();
        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);
        ObjectMapper om = new ObjectMapper();
        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
        jackson2JsonRedisSerializer.setObjectMapper(om);
        template.setConnectionFactory(factory);
//key序列化方式
        template.setKeySerializer(redisSerializer);
//value序列化
        template.setValueSerializer(jackson2JsonRedisSerializer);
//value hashmap序列化
        template.setHashValueSerializer(jackson2JsonRedisSerializer);
        return template;
    }

    @Bean
    public CacheManager cacheManager(RedisConnectionFactory factory) {
        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();
        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);
//解决查询缓存转换异常的问题
        ObjectMapper om = new ObjectMapper();
        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
        jackson2JsonRedisSerializer.setObjectMapper(om);
// 配置序列化（解决乱码的问题）,过期时间600秒
        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofSeconds(600))
                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))
                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))
                .disableCachingNullValues();
        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)
                .cacheDefaults(config)
                .build();
        return cacheManager;
    }
}

</code></pre></div><h4>测试类</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@RestController
public class TestController {
    @Autowired
    private RedisTemplate redisTemplate;

    @RequestMapping("/set")
    public void setStr() {
        redisTemplate.opsForValue().set("user:1", "hello world");
    }

    @RequestMapping("/get")
    public String get() {
        return String.valueOf(redisTemplate.opsForValue().get("user:1"));
    }

}
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209012250625.png" alt="在这里插入图片描述"></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022045901.png" type="image/png"/>
    </item>
    <item>
      <title>Redis的安装与基本操作</title>
      <link>https://maijunxuan.cn/Redis/Redis%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html</link>
      <guid>https://maijunxuan.cn/Redis/Redis%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Redis的安装与基本操作</source>
      <description>Redis的安装与基本操作 什么是Redis 基于键值对的NoSql数据库，支持stirng、hash、list、set、zset、bitmaps、HyperLogLog、GEO等数据结构极其算法。 读写性能非常好。 有将数据存到快照或者日志上的机制，便于数据恢复。 提供键过期、发布订阅、事务、流水线、lua脚本等附加功能。 Redis特性 读写速度据...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>什么是Redis</h2>
<ol>
<li>基于键值对的NoSql数据库，支持stirng、hash、list、set、zset、bitmaps、HyperLogLog、GEO等数据结构极其算法。</li>
<li>读写性能非常好。</li>
<li>有将数据存到快照或者日志上的机制，便于数据恢复。</li>
<li>提供键过期、发布订阅、事务、流水线、lua脚本等附加功能。</li>
</ol>
<h2>Redis特性</h2>
<ol>
<li>读写速度据统计可达10w/s。</li>
<li>支持列表、哈希、集合、有序集合等数据结构的操作和算法。</li>
<li>功能丰富，支持键值过期、发布订阅、lua脚本创造新的Redis命令、客户端支持流水线操作，将一系列命令传给redis，避免多次网络io。</li>
<li>简单稳定</li>
<li>支持多种语言的客户端。</li>
<li>有RDB和AOF两种持久化策略。</li>
<li>支持主从复制。</li>
<li>支持高可用和分布式。</li>
</ol>
<h2>Redis支持的场景</h2>
<ol>
<li>缓存</li>
<li>排行榜系统</li>
<li>计数器应用</li>
<li>社交网络点赞等功能</li>
<li>消息队列(不常用)</li>
</ol>
<h2>不建议使用Redis的场景</h2>
<ol>
<li>几亿用户行为的数据不建议使用redis进行维护管理。</li>
<li>不经常被使用的冷数据不建议使用redis管理。</li>
</ol>
<h2>redis安装</h2>
<h4>安装C 语言的编译环境</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>yum install centos<span class="token operator">-</span>release<span class="token operator">-</span>scl scl<span class="token operator">-</span>utils<span class="token operator">-</span>build
yum install <span class="token operator">-</span>y devtoolset<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>toolchain
scl enable devtoolset<span class="token operator">-</span><span class="token number">8</span> bash
</code></pre></div><h4>完成之后设置gcc版本</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>gcc <span class="token operator">--</span>version
</code></pre></div><h4>下载redis-6.2.1.tar.gz放/opt目录</h4>
<h4>解压redis</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>tar -zxvf redis-6.2.1.tar.gz
</code></pre></div><h4>解压完成后进入目录：cd redis-6.2.1</h4>
<h4>键入<code>make</code></h4>
<p>注意：2.2.2.6.如果没有准备好C语言编译环境，make 会报错—Jemalloc/jemalloc.h：没有那个文件，可以运行<code>make distclean</code>，再次运行<code>make</code>即可解决问题</p>
<h4>运行<code>make install</code></h4>
<h4>小结</h4>
<p>自此，redis安装已经全部完成，redis会被默认安装在<code>/usr/local/bin</code>目录，所以为了方便后续各种操作，我们可以运行如下命令，创建一个redis配置目录方便后续各种实验操作</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>## 创建配置文件实验文件夹
mkdir myredis
进入redis解压目录
cd <span class="token operator">/</span>opt<span class="token operator">/</span>redis<span class="token operator">-</span><span class="token number">6.2</span><span class="token number">.1</span><span class="token operator">/</span>
复制配置文件到新文件夹
cp redis<span class="token punctuation">.</span>conf <span class="token operator">/</span>myredis<span class="token operator">/</span>
## 进入redis命令目录
cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>
</code></pre></div><h2>启动</h2>
<h4>前台启动</h4>
<p>一旦按ctrl+c进程直接结束</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>redis<span class="token operator">-</span>server <span class="token operator">/</span>myredis<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf
</code></pre></div><h4>后台启动(推荐)</h4>
<h6>运行一下命令配置文件</h6>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>vim <span class="token operator">/</span>myredis<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf

</code></pre></div><p>按<code>/daemonize</code>找到<code>daemonize</code>，将此参数设置为yes，如下图所示</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>## 启动redis
<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>redis<span class="token operator">-</span>server <span class="token operator">/</span>myredis<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf
## 检查redis是否启动
 ps <span class="token operator">-</span>ef<span class="token operator">|</span>grep redis
</code></pre></div><h4>启动客户端</h4>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>redis<span class="token operator">-</span>cli
</code></pre></div><h4>cli键入<code>ping</code></h4>
<p>若输出PONG，则说明redis客户端已经与服务端连通。</p>
<h4>关闭服务端</h4>
<ol>
<li>客户端运行<code>shutdown</code></li>
<li><code>/usr/local/bin/redis-cli -p 6379 shutdown</code></li>
</ol>
<h2>Redis常用操作</h2>
<h4>查看所有键值</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; keys *
(empty list or set)

</code></pre></div><h4>添加或者删除键值</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 添加字符串
127.0.0.1:6379&gt; set hello world
OK
127.0.0.1:6379&gt; set java jedis
OK
127.0.0.1:6379&gt; set python redis-py
OK

## 添加一个key名为mylist的键,存储一堆元素a b c d e f g
127.0.0.1:6379&gt; RPUSH mylist a b c d e f g
(integer) 7

## 使用keys * ,查看我们刚刚添加的key
127.0.0.1:6379&gt; KEYS *
1) "python"
2) "java"
3) "hello"
</code></pre></div><h4>查看当前键的数</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; DBSIZE
(integer) 3

</code></pre></div><h4>查看key是否存在</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 存在返回1 不存在返回0
127.0.0.1:6379&gt; EXISTS java
(integer) 1

</code></pre></div><h4>设置键过期</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 添加一个键hello 设置10秒过期
127.0.0.1:6379&gt; set hello world
OK
## 查看是否存在
127.0.0.1:6379&gt; EXPIRE hello 10
(integer) 1
## 我们也可以用tts判断是否存在,若过期则返回-2
127.0.0.1:6379&gt; ttl  hello
(integer) -2


</code></pre></div><h4>查看键值对的数据类型</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; type mylist
list

</code></pre></div><h2>字符串操作</h2>
<h4>操作指令</h4>
<h6>设置值</h6>
<p>赋值指令如下所示，<code>]</code>为可选项</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>set key value ex  value 秒级过期时间] px value 设置当前键值对的毫秒级过期时间]  nx 若键值存在才能赋值] xx 若键值存在才能赋值]
</code></pre></div><p>示例 设置一个key为str，value为hello的字符串</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; set str hello
OK
127.0.0.1:6379&gt;

</code></pre></div><p>设置一个10s过期的字符串str2，值为str2</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; set str2 str2 ex 10
OK
## 10s内值还在
127.0.0.1:6379&gt; get str2
"str2"

## 10s后键值对消失
127.0.0.1:6379&gt; get str2
(nil)
127.0.0.1:6379&gt;

</code></pre></div><h6>setnx、setxx、setex</h6>
<p>setnx和set的nx选项类似，值不存在时才能建立键值对</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>setnx key value
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 判断hello是否存在
127.0.0.1:6379&gt; EXISTS hello
(integer) 0
## 设置hello
127.0.0.1:6379&gt; set hello world
OK
## 如果hello不存在 则设置一个key为hello value为h的键值对
127.0.0.1:6379&gt; SETNX hello h
(integer) 0
## 发现值没变还是原本set指令的
127.0.0.1:6379&gt; get hello
"world"
## h不存在
127.0.0.1:6379&gt; EXISTS h
(integer) 0
## 使用setnx赋值，在使用get指令查看，发现存在
127.0.0.1:6379&gt; SETNX h hello
(integer) 1
127.0.0.1:6379&gt; get h
"hello"
127.0.0.1:6379&gt;


</code></pre></div><p>setxx相对set指令的xx选项，这里就不多赘述了</p>
<p>setex相当于set指令的ex选项</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 设置一个10s过期的键为key 值为value的键值对
127.0.0.1:6379&gt; SETEX key 10 value
OK
127.0.0.1:6379&gt; get key
"value"
## 10s后过期
127.0.0.1:6379&gt; get key
(nil)
</code></pre></div><h6>获取值</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>get key
</code></pre></div><h6>批量设置值和获取值</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 批量设置
mset key value key value] key value] key value]
## 批量获取
mget key1 key2 ....
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; MSET a 1 b 2 c 3
OK
127.0.0.1:6379&gt; MGET a b c
1) "1"
2) "2"
3) "3"


</code></pre></div><p>注意:如果我们某个业务需要获取redis中大量的key值，建议使用mget，原因：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>使用set获取1000个key: 1000个网络io时间+1000个指令执行时间
使用mget获取1000个key:1个网络io时间+1000个指令执行时间
</code></pre></div><p>get指令请求模型</p>
<p>mget指令请求模型</p>
<h6>计数</h6>
<p>自增指令，若值不存在，则创建并初始值为1，若存在且为整数则自增，若存在且为字符文字则报错。 因为redis是单线程的，所以计数指令无需考虑线程安全问题，无需使用cas等手段来修改值而是顺序执行自增，所以性能相当优秀。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>incr key
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; INCR k
(integer) 1
127.0.0.1:6379&gt; INCR k
(integer) 2
127.0.0.1:6379&gt; set str str
OK
127.0.0.1:6379&gt; incr str
(error) ERR value is not an integer or out of range
127.0.0.1:6379&gt;

</code></pre></div><p>其他计数指令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 自减
decr key
## 自增自己指定的值
incrby key increment
## 自减指定的值
decrby key decrement
## 自增小数值
incrbyfloat key increment
</code></pre></div><h6>不常用指令</h6>
<p>追加值</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>append key value
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 对key为hello的值增加一个world字符串
127.0.0.1:6379&gt; set hello hello
OK
127.0.0.1:6379&gt; APPEND hello world
(integer) 10
127.0.0.1:6379&gt; get hello
"helloworld"
127.0.0.1:6379&gt;

</code></pre></div><p>获取字符串长度</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>strlen key
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; strlen hello
(integer) 10
127.0.0.1:6379&gt;

</code></pre></div><p>设置并返回原先的值</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>getset key value
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; set hello world
OK
127.0.0.1:6379&gt; GETSET hello redis
"world"
127.0.0.1:6379&gt;

</code></pre></div><p>获取指定范围</p>
<p>语法</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> GETRANGE key start  end
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; set str 0123456789
OK
127.0.0.1:6379&gt; GETRANGE str 0  2
"012"

</code></pre></div><h4>不同长度的字符串的内部编码</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 8位数的长整型为int
127.0.0.1:6379&gt; set str 111
OK
127.0.0.1:6379&gt; object encoding str
"int"

## 小于39字节的字符串为embstr
127.0.0.1:6379&gt; set str helloworld
OK
127.0.0.1:6379&gt; object encoding str
"embstr"

## 大于39字节为raw
127.0.0.1:6379&gt; set str abcdefghijklmnopqrstudksajdlksadklsdaskdjlkasdjasdjajdlksadadjl
OK
127.0.0.1:6379&gt; object encoding str
"raw"
127.0.0.1:6379&gt;

</code></pre></div><h4>使用场景</h4>
<h6>用户信息缓存</h6>
<p>如下所示，可将常见的数据库数据存到redis中提高访问数据，建议使用的key为<code>表名:对象名:id</code>,例如<code>userInfo:user:1</code></p>
<p>伪代码示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>UserInfo getUserInfo(long id){
userRedisKey = "user:info:" + id
value = redis.get(userRedisKey);
UserInfo userInfo;
if (value != null) {
userInfo = deserialize(value);
} else {
userInfo = mysql.get(id);
if (userInfo != null)
redis.setex(userRedisKey, 3600, serialize(userInfo));
}
return userInfo;
}
</code></pre></div><h6>视频播放量计数</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>long incrVideoCounter(long id) {
key = "video:playCount:" + id;
return redis.incr(key);
}
</code></pre></div><h6>共享session</h6>
<p>为了保证用户在集群场景下能够公用一个会话session，我们会另起一台服务器搭建redis服务保存会话session，避免用户因为负载均衡在各个服务器之间时重复登录。</p>
<h6>短信限速</h6>
<p>避免单用户一分钟不能超过5次访问</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>phoneNum = "138xxxxxxxx";
key = "shortMsg:limit:" + phoneNum;
// SET key value EX 60 NX
isExists = redis.set(key,1,"EX 60","NX");
if(isExists != null || redis.incr(key) &lt;=5){
//  通过
}else{
//  限速
}
</code></pre></div><h2>哈希</h2>
<h4>简介</h4>
<p>存储键值对的数据结构，也叫映射，字典</p>
<h4>操作</h4>
<h6>设置值和取值</h6>
<p>语法</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 设置值
HSET key field value
## 获取值
HGET key field
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; HSET hashmap key1 value1 key2 value2
(integer) 2
127.0.0.1:6379&gt; HGET hashmap key1
"value1"
127.0.0.1:6379&gt;

</code></pre></div><h6>删除哈希一个键</h6>
<p>语法</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>HDEL key field
</code></pre></div><p>格式</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 删除hashmap的key1
127.0.0.1:6379&gt; HDEL hashmap key1
(integer) 1
127.0.0.1:6379&gt;

</code></pre></div><h6>计算哈希的key的个数</h6>
<p>语法</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>HLEN key
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; HLEN hashmap
(integer) 1
127.0.0.1:6379&gt;

</code></pre></div><h6>批量设置哈希的值和批量获取哈希的值</h6>
<p>语法</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> HMSET key  field value field value] field value]
 HMGET key  field field] field] field]


</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; HMSET user:1 name xiaoming age 18 city fujian
OK
127.0.0.1:6379&gt; HMGET user:1 name age city
1) "xiaoming"
2) "18"
3) "fujian"
127.0.0.1:6379&gt;

</code></pre></div><h6>判断键值对是否存在</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; HEXISTS key field
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; HEXISTS user:1 name
(integer) 1
127.0.0.1:6379&gt;

</code></pre></div><h6>获取所有key、获取所有value、获取所有的key-value</h6>
<p>语法</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 获取所有key
HKEYS key

## 获取所有value
 HVALS  key

## 获取所有key-value
HGETALL key
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; HKEYS user:1
1) "name"
2) "age"
3) "city"
127.0.0.1:6379&gt; HVALS user:1
1) "xiaoming"
2) "18"
3) "fujian"
127.0.0.1:6379&gt; HGETALL user:1
1) "name"
2) "xiaoming"
3) "age"
4) "18"
5) "city"
6) "fujian"
127.0.0.1:6379&gt;

</code></pre></div><p>建议:若哈希中存在多个键值对且我们需要一次性获取，建议使用hscan而不是hmget，避免造成redis阻塞</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 使用hscan从0位置获取所有键值对
127.0.0.1:6379&gt; HSCAN user:1 0
1) "0"
2) 1) "name"
   2) "xiaoming"
   3) "age"
   4) "18"
   5) "city"
   6) "fujian"
127.0.0.1:6379&gt;

</code></pre></div><h6>hincrby hincrbyfloat</h6>
<p>和incr类似，只不过增长的是field的值</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>hincrby key field
hincrbyfloat key field
</code></pre></div><h6>计算field的长度</h6>
<p>语法</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>hstrlen key field
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>获取user:1 的name的长度
127.0.0.1:6379&gt; HSTRLEN user:1 name
(integer) 8
127.0.0.1:6379&gt;

</code></pre></div><h6>内部编码</h6>
<p>在键值对个数小于512且所有值都小于64字节时，哈希的内部编码为ziplist，当超过这些限制时使用的就是hashtable(超过限制后使用这种数据结构时间复杂度更低,查询效率为O(1))。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 小于64字节为ziplist
127.0.0.1:6379&gt; hset user:1 name xiaoming
(integer) 0
127.0.0.1:6379&gt; object encoding user:1
"ziplist"
## 超过后为hashtable
127.0.0.1:6379&gt; hset user:1 name djdjkhdjhdhdhwhquehqhdjksdhqjhdjkojhdlksadsahdjsalkhdjlksahdjoaehduioqwajwksdhjaksdhjsahdsajkdhjslkadhjlksahdjksahdjksahdjk
(integer) 0
127.0.0.1:6379&gt; object encoding user:1
"hashtable"


</code></pre></div><h4>使用场景</h4>
<p>如果我们要缓存某行用户信息，使用哈希非常合适不过</p>
<p>原因如下:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> 1. 相较于字符串(占用过多的键)，哈希内聚更好更易于维护大量的用户信息
 2. 如果使用字符串进行序列化存储，就会造成网络io时序列化和反序列化的开销
 3. 操作简单，修改用户字段更加方便
</code></pre></div><p>需要注意:哈希存储相对二维表更加稀疏，如上图，二维表中null的数据，在哈希表中key是完全不存在的用户使用时需要考虑到这一点。</p>
<h2>列表</h2>
<h4>简介</h4>
<p>线性结构，允许重复元素，可以充当队列和栈。</p>
<h4>操作</h4>
<h6>添加</h6>
<p>从右边插入，语法:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>RPUSH key value value]
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 右边一次插入a b c
127.0.0.1:6379&gt; RPUSH list a b c
(integer) 3
## 查看list的元素
127.0.0.1:6379&gt; LRANGE list 0 -1
1) "a"
2) "b"
3) "c"
127.0.0.1:6379&gt;

</code></pre></div><p>从左边插入元素 lpush</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>LPUSH key value value...]
## 从左边依次插入
127.0.0.1:6379&gt; LPUSH arr a b c
(integer) 3
## 查看最终的元素值
127.0.0.1:6379&gt; LRANGE arr 0 -1
1) "c"
2) "b"
3) "a"
127.0.0.1:6379&gt;

</code></pre></div><p>向元素前或者后添加元素</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>linsert key before|after pivot value
</code></pre></div><p>示例：向a后面添加一个元素a+</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; LRANGE list 0 -1
1) "a"
2) "b"
3) "c"
127.0.0.1:6379&gt; LINSERT list after a a+
(integer) 4
127.0.0.1:6379&gt; LRANGE list 0 -1
1) "a"
2) "a+"
3) "b"
4) "c"
127.0.0.1:6379&gt;

</code></pre></div><h6>查询</h6>
<p>查找指定范围的元素</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>lrange key start end
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 查看list的所有元素
127.0.0.1:6379&gt; LRANGE list 0 -1
1) "a"
2) "a+"
3) "b"
4) "c"
##  查看一个不存在的key的元素
127.0.0.1:6379&gt; LRANGE key 1 2
(empty array)
## 查看list 2-3的元素
127.0.0.1:6379&gt; LRANGE list 1 2
1) "a+"
2) "b"
127.0.0.1:6379&gt;

</code></pre></div><p>获取指定索引的元素</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>lindex key index
</code></pre></div><p>示例:查看key为list第0个元素</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; LRANGE list 0 -1
1) "a"
2) "a+"
3) "b"
4) "c"
127.0.0.1:6379&gt; LINDEX list 0
"a"
127.0.0.1:6379&gt;

</code></pre></div><p>获取列表长度</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>llen key
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; LRANGE list 0 -1
1) "a"
2) "a+"
3) "b"
4) "c"
127.0.0.1:6379&gt; LLEN list
(integer) 4
127.0.0.1:6379&gt;

</code></pre></div><h6>删除</h6>
<p>从列表左侧弹出元素</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>lpop key
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; LRANGE list 0 -1
1) "a"
2) "a+"
3) "b"
4) "c"
127.0.0.1:6379&gt; LPOP list
"a"
127.0.0.1:6379&gt; LRANGE list 0 -1
1) "a+"
2) "b"
3) "c"
127.0.0.1:6379&gt;

</code></pre></div><p>同理右侧为rpop，不多赘述</p>
<p>删除元素</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>lrem key count value
</code></pre></div><p>count的大小有以下几种情况</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. 大于0，从左到右删除count个元素
2. 小于0，从右到左删除count个元素
3. =0 删除所有元素
</code></pre></div><p>示例:从左到右删除一个为a的元素</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; LRANGE list 0 -1
1) "a+"
2) "b"
3) "c"
127.0.0.1:6379&gt; LREM list 1 b
(integer) 1
127.0.0.1:6379&gt; LRANGE list 0 -1
1) "a+"
2) "c"
127.0.0.1:6379&gt;

</code></pre></div><p>修剪列表至指定索引范围</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>ltrim key start end
</code></pre></div><p>示例，将列表修剪为只有2 15索引范围内的元素</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; LRANGE list 0 -1
 1) "a+"
 2) "z"
 3) "a"
 4) "b"
 5) "c"
 6) "d"
 7) "e"
 8) "f"
 9) "g"
10) "h"
11) "i"
12) "j"
13) "k"
14) "l"
15) "m"
16) "n"
127.0.0.1:6379&gt; LTRIM list 2 15
OK
127.0.0.1:6379&gt; LRANGE list 0 -1
 1) "a"
 2) "b"
 3) "c"
 4) "d"
 5) "e"
 6) "f"
 7) "g"
 8) "h"
 9) "i"
10) "j"
11) "k"
12) "l"
13) "m"
14) "n"
127.0.0.1:6379&gt;

</code></pre></div><h6>修改</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>lset key index newValue
</code></pre></div><h6>阻塞操作</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>blpop key key ...] timeout
brpop key key ...] timeout
</code></pre></div><p>brpop 示例，当timeout大于0时，若有元素立即返回，若没有则等到对应时间为止 若timeout设置为0，则无限等待，如下所示，笔者使用另一个客户端push一个元素进来，这个阻塞就会立刻将这个元素弹出。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; BRPOP arr 3
1) "arr"
2) "a"
127.0.0.1:6379&gt; BRPOP arr 3
1) "arr"
2) "b"
127.0.0.1:6379&gt; BRPOP arr 3
1) "arr"
2) "c"
127.0.0.1:6379&gt; BRPOP arr 3
(nil)
(3.04s)
127.0.0.1:6379&gt; BRPOP arr 3
(nil)
(3.07s)
127.0.0.1:6379&gt; BRPOP arr 0
1) "arr"
2) "a"
(43.69s)

</code></pre></div><h6>内部编码</h6>
<p>当内部元素个数小于512，且每个元素小于64字节，列表默认使用ziplist，反之就会使用linklist</p>
<h6>使用场景</h6>
<p>Redis的lpush+brpop命令组合即可实现阻塞队列，如下图，每个消费者只需要关注自己感兴趣的专题即可，作为生产者只需不断使lpush添加专题即可。</p>
<p>关于列表更多用法可以参见以下口诀</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. lpush+lpop=Stack（栈）
2. lpush+rpop=Queue（队列）
3. lpsh+ltrim=Capped Collection（有限集合）
4. lpush+brpop=Message Queue（消息队列）
</code></pre></div><h2>集合</h2>
<h4>特点</h4>
<ol>
<li>最多可存储2^32-1个元素</li>
<li>集合内部元素不重复</li>
</ol>
<h4>命令</h4>
<h6>添加元素</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>sadd key element element ...]
</code></pre></div><p>示例，可以看到第2次添加的元素并没有成功</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; SADD set a b c
(integer) 3
127.0.0.1:6379&gt; SADD set a b
(integer) 0
127.0.0.1:6379&gt;

</code></pre></div><h6>删除元素</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>srem key element element ...]
</code></pre></div><h6>计算集合大小</h6>
<p>注意，这个计算的时间复杂度为O(1)，因为获得的这个集合的大小并不是计算来的，而是通过redis维护的一个内部变量得来的。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>scard key
</code></pre></div><h6>判断元素是否在集合中</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>sismember key element
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; SISMEMBER set a
(integer) 1
127.0.0.1:6379&gt; SISMEMBER set ac
(integer) 0
127.0.0.1:6379&gt;

</code></pre></div><h6>随机获取集合内的元素</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>srandmember key count]
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; SRANDMEMBER set 1
1) "a"
127.0.0.1:6379&gt; SRANDMEMBER set 1
1) "c"
127.0.0.1:6379&gt;

</code></pre></div><h6>随机弹出一个元素</h6>
<p>与srandmember 差不多，只不过该操作会将元素输出并将集合中的这个元素删除</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>spop key
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; SPOP set
"c"
127.0.0.1:6379&gt; SPOP set
"a"
127.0.0.1:6379&gt; SPOP set
"b"
127.0.0.1:6379&gt; SPOP set
(nil)
127.0.0.1:6379&gt; SPOP set
(nil)
127.0.0.1:6379&gt; SPOP set
(nil)
127.0.0.1:6379&gt; SPOP set
(nil)
127.0.0.1:6379&gt; SPOP set
</code></pre></div><h6>获取所有元素</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>smembers key
</code></pre></div><h6>获取两个集合之间的交集</h6>
<p>语法</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>sinter key key ...]
</code></pre></div><p>示例，可以看出set1和set2的交集为a</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; SADD set1 a b c d
(integer) 4
127.0.0.1:6379&gt; SADD set2 a e f g h
(integer) 5
127.0.0.1:6379&gt; SINTER set1 set2
1) "a"
127.0.0.1:6379&gt;

</code></pre></div><h6>求并集</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>suinon key key ...]
</code></pre></div><h6>求差集</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>sdiff key key ...]
</code></pre></div><p>示例，注意这个差集指的是第一个集合有，其他集合没有的元素</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; SDIFF set1 set2
1) "b"
2) "d"
3) "c"

</code></pre></div><h6>将交集、差集、并集结果保存</h6>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>sinterstore destination key key ...]
suionstore destination key key ...]
sdiffstore destination key key ...]
</code></pre></div><p>示例:将并集的结果保存</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; SADD set1 a b c d
(integer) 4
127.0.0.1:6379&gt; SADD set2 a e f g h
(integer) 5
127.0.0.1:6379&gt; SINTERstore set3 set1 set2
(integer) 1
127.0.0.1:6379&gt; SMEMBERS set3
1) "a"
127.0.0.1:6379&gt;

</code></pre></div><h4>内部编码</h4>
<p>当元素为整数且大小小于512时会使用intset(节省内存)，反之就会转为hashtable提高效率。</p>
<h4>使用场景</h4>
<ol>
<li>sadd=Tagging（标签,例如交友网站个人标签）</li>
<li>spop/srandmember=Random item（生成随机数，比如抽奖）</li>
<li>sadd+sinter=Social Graph（社交需求，与附近的人爱好匹配）</li>
</ol>
<h2>有序集合</h2>
<h4>简介</h4>
<ol>
<li>相较于集合，增加一个score属性，使得整体有序。</li>
<li>集合元素不可重复，但是score可以重复。</li>
</ol>
<h4>指令</h4>
<h6>添加成员</h6>
<p>命令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>zadd key score member score member ...]
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; zadd zset 1 tom 2 jack 3 lucy
(integer) 3
127.0.0.1:6379&gt;

</code></pre></div><p>可选项</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. nx：member必须不存在，才可以设置成功，用于添加。
2. xx：member必须存在，才可以设置成功，用于更新。
3. ch：返回此次操作后，有序集合元素和分数发生变化的个数
4. incr：对score做增加，相当于后面介绍的zincrby。
</code></pre></div><p>示例:如果tom存在，给tom自增。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; zadd zset xx incr 1 tom
"2"
</code></pre></div><p>相比于集合，有序集合增加了排序的操作，添加成员的时间复杂度由原来的<code>O(1)</code>变为<code>O(logn)</code></p>
<h6>计算有序集合的大小</h6>
<p>于scard一样，时间复杂度也是<code>O(1)</code></p>
<p>指令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>zcard key
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; ZCARD zset
(integer) 3
127.0.0.1:6379&gt;

</code></pre></div><h6>查看成员分数</h6>
<p>指令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>zscore key member
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; zscore zset tom
"3"
127.0.0.1:6379&gt; zscore zset jack
"2"
127.0.0.1:6379&gt; zscore zset xiaoming
(nil)
127.0.0.1:6379&gt;

</code></pre></div><h6>计算成员排名</h6>
<p>命令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 升序排名
zrank key member
## 降序排名
zrevrank key member
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; ZRANK zset tom
(integer) 2
127.0.0.1:6379&gt; ZrevRANK zset tom
(integer) 0
127.0.0.1:6379&gt;

</code></pre></div><h6>删除成员</h6>
<p>命令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>zrem key member member ...]
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; ZREM zset tom jack
(integer) 2
127.0.0.1:6379&gt;

</code></pre></div><h6>给成员增加分数</h6>
<p>指令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>zincrby key increment member
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; ZINCRBY zset 100 tom
"100"
127.0.0.1:6379&gt; ZINCRBY zset 100 tom
"200"
127.0.0.1:6379&gt;

</code></pre></div><h6>查看排名</h6>
<p>指令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>zrange key start end withscores]
zrevrange key start end withscores]
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; ZRANGE zset 0 -1 withscores
1) "lucy"
2) "3"
3) "tom"
4) "200"
127.0.0.1:6379&gt;

</code></pre></div><h6>返回指定分数范围的成员</h6>
<p>指令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>zrangebyscore key min max withscores] limit offset count]
zrevrangebyscore key max min withscores] limit offset count]
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; ZRANGEBYSCORE zset 0 300 withscores
1) "lucy"
2) "3"
3) "tom"
4) "200"

</code></pre></div><p>获取10到无限大的成员</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; ZRANGEBYSCORE zset (10 +inf withscores
1) "liu"
2) "11"
3) "tom"
4) "200"
127.0.0.1:6379&gt;

</code></pre></div><h6>获取指定分数范围内的用户</h6>
<p>指令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>zcount key min max
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; ZCOUNT zset 0 10
(integer) 2
127.0.0.1:6379&gt;

</code></pre></div><h6>删除指定排名内的用户</h6>
<p>指令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>zremrangebyrank key start end
</code></pre></div><p>示例:删除前3名成员</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; ZREMRANGEBYRANK zset 0 2
(integer) 3
127.0.0.1:6379&gt;

</code></pre></div><h6>删除指定分数范围内的用户</h6>
<p>指令</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>zremrangebyscore key min max
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; ZREMRANGEBYSCORE zset (250 +inf
(integer) 1
127.0.0.1:6379&gt;

</code></pre></div><h4>内部编码</h4>
<p>当集合size小于512且每个字符串大小不超过64字节时，有序集合使用的时ziplist，反之就是使用调表。从设计的角度来看，使用平衡树或者红黑树也能解决问题，但是跳表的实现相较于前者更加简单。查询也差不多。</p>
<h4>使用场景</h4>
<p>常用于点赞、播放量等排行榜</p>
<p>如下就模拟了点赞排行榜的操作</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>## 小明获得10个赞
127.0.0.1:6379&gt; zadd user:ranking:20220810 10 xiaoming
(integer) 1
## 小王获得11个赞
127.0.0.1:6379&gt; zadd user:ranking:20220810 11 xiaowang
(integer) 1
## 小刘获得8个赞
127.0.0.1:6379&gt; zadd user:ranking:20220810 8 xiaoliu
(integer) 1
## 小刘的赞+1
127.0.0.1:6379&gt; zincrby user:ranking:20220810  1  xiaoliu
"9"
## 查看排名前3
127.0.0.1:6379&gt; zrevrange user:ranking:20220810 0 2
1) "xiaowang"
2) "xiaoming"
3) "xiaoliu"
## 小刘被取消一个赞
127.0.0.1:6379&gt; zincrby user:ranking:20220810  -1  xiaoliu
"8"
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Redis配置文件介绍</title>
      <link>https://maijunxuan.cn/Redis/Redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D.html</link>
      <guid>https://maijunxuan.cn/Redis/Redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Redis配置文件介绍</source>
      <description>Redis配置文件介绍 Units单位 redis默认单位的度量为byte，而不是bit，这点我们需要注意一下 计量单位对大小写不敏感 include 该配置可以将其他配置全部提取到该配置文件中以便统一管理。 网络相关配置 bind 默认绑定127.0.0.1 若protected-mode yes，且没有设置bind ip、没有设置密码的情况下，只有...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Units单位</h2>
<ol>
<li>redis默认单位的度量为byte，而不是bit，这点我们需要注意一下</li>
<li>计量单位对大小写不敏感</li>
</ol>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># Note on units: when memory size is needed, it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth:
#
# 1k =&gt; 1000 bytes
# 1kb =&gt; 1024 bytes
# 1m =&gt; 1000000 bytes
# 1mb =&gt; 1024*1024 bytes
# 1g =&gt; 1000000000 bytes
# 1gb =&gt; 1024*1024*1024 bytes
#
# units are case insensitive so 1GB 1Gb 1gB are all the same.

</code></pre></div><h2>include</h2>
<p>该配置可以将其他配置全部提取到该配置文件中以便统一管理。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># Include one or more other config files here.  This is useful if you
# have a standard template that goes to all Redis servers but also need
# to customize a few per-server settings.  Include files can include
# other files, so use this wisely.
#
# Note that option "include" won't be rewritten by command "CONFIG REWRITE"
# from admin or Redis Sentinel. Since Redis always uses the last processed
# line as value of a configuration directive, you'd better put includes
# at the beginning of this file to avoid overwriting config change at runtime.
#
# If instead you are interested in using includes to override configuration
# options, it is better to use include as the last line.
#
# include /path/to/local.conf
# include /path/to/other.conf

</code></pre></div><h2>网络相关配置</h2>
<h3>bind</h3>
<ol>
<li>默认绑定127.0.0.1</li>
<li>若<code>protected-mode yes</code>，且没有设置bind ip、没有设置密码的情况下，只有本机可以访问redis。</li>
</ol>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>bind 127.0.0.1 -::1

# Protected mode is a layer of security protection, in order to avoid that
# Redis instances left open on the internet are accessed and exploited.
#
# When protected mode is on and if:
#
# 1) The server is not binding explicitly to a set of addresses using the
#    "bind" directive.
# 2) No password is configured.
#
# The server only accepts connections from clients connecting from the
# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain
# sockets.
#
# By default protected mode is enabled. You should disable it only if
# you are sure you want clients from other hosts to connect to Redis
# even if no authentication is configured, nor a specific set of interfaces
# are explicitly listed using the "bind" directive.
protected-mode yes
</code></pre></div><p>如下我们将bind注释，保护模式开启，使用远程连接工具时发现，redis-server拒绝访问了</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220901033637212.png" alt="image-20220901033637212"></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>#bind 127.0.0.1 -::1
protected-mode yes
</code></pre></div><h3>protected-mode</h3>
<p>设置redis的保护模式，若设置为no，则其他服务器的redis客户端可以随便访问你的redis服务端。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># By default protected mode is enabled. You should disable it only if
# you are sure you want clients from other hosts to connect to Redis
# even if no authentication is configured, nor a specific set of interfaces
# are explicitly listed using the "bind" directive.
protected-mode yes

</code></pre></div><h3>port</h3>
<p>指定redis服务端启用的端口号。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># Accept connections on the specified port, default is 6379 (IANA #815344).
# If port 0 is specified Redis will not listen on a TCP socket.
port 6379

</code></pre></div><h3>tcp-backlog</h3>
<p>该参数=已经建立3次握手请求队列+未完成三次握手的请求队列。 注：当你设置这个值的时候必须考虑到Linux内核的这两个参数</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. net.core.somaxconn参数决定了端口监听队列的最大长度，存放的是已经处于ESTABLISHED而没有被用户程序（例如nginx）接管的TCP连接，默认是128，对于高并发的，或者瞬发大量连接，必须调高该值，否则会直接丢弃连接
2. net.ipv4.tcp_max_syn_backlog参数决定已经收到syn包，但是还没有来得及确认的连接队列，这是传输层的队列，在高并发的情况下，必须调整该值，提高承载能力。
# TCP listen() backlog.
#
# In high requests-per-second environments you need a high backlog in order
# to avoid slow clients connection issues. Note that the Linux kernel
# will silently truncate it to the value of /proc/sys/net/core/somaxconn so
# make sure to raise both the value of somaxconn and tcp_max_syn_backlog
# in order to get the desired effect.
tcp-backlog 511

</code></pre></div><p>而上述Linux内核参数，可使用vim命令修改下面配置文件生效</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>vim /etc/sysctl.conf

</code></pre></div><p>示例内容</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>vm.swappiness = 0
kernel.sysrq = 1

net.ipv4.neigh.default.gc_stale_time = 120

# see details in https://help.aliyun.com/knowledge_detail/39428.html
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.default.arp_announce = 2
net.ipv4.conf.lo.arp_announce = 2
net.ipv4.conf.all.arp_announce = 2

# see details in https://help.aliyun.com/knowledge_detail/41334.html
net.ipv4.tcp_max_tw_buckets = 262144
net.ipv4.tcp_syncookies = 1

# tcp_max_syn_backlog will only take effect when net.ipv4.tcp_syncookies == 0
# net.ipv4.tcp_max_syn_backlog = 65536
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_slow_start_after_idle = 0

</code></pre></div><h3>timeout</h3>
<p>表示一个空闲的redis客户端维持多久后关闭，若设置为0，表示永不关闭。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># Close the connection after a client is idle for N seconds (0 to disable)
timeout 0

</code></pre></div><h3>tcp-keepalive</h3>
<p>该值表示对redis客户端心跳时长检测间隔，默认300s，建议设置成60</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># A reasonable value for this option is 300 seconds, which is the new
# Redis default starting with Redis 3.2.1.
tcp-keepalive 300

</code></pre></div><h2>通用设置</h2>
<h3>daemonize</h3>
<p>若设置为yes，则redis服务端会被设置为守护进程，会默认在后台启动</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># By default Redis does not run as a daemon. Use 'yes' if you need it.
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
# When Redis is supervised by upstart or systemd, this parameter has no impact.
daemonize yes
</code></pre></div><h3>pidfile</h3>
<p>指定redis的pid文件的存放位置</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># Note that on modern Linux systems "/run/redis.pid" is more conforming
# and should be used instead.
pidfile /var/run/redis_6379.pid

</code></pre></div><h3>loglevel</h3>
<p>指定日志记录的级别，总共有<code>debug</code>、<code>verbose</code>、<code>notice</code>、<code>warning</code>四个级别，在生产环境，我们建议使用<code>notice</code>、<code>warning</code></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># Specify the server verbosity level.
# This can be one of:
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not a mess like the debug level)
# notice (moderately verbose, what you want in production probably)
# warning (only very important / critical messages are logged)
loglevel notice

</code></pre></div><h3>logfile</h3>
<p>设置redis服务器的日志名称</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># Specify the log file name. Also the empty string can be used to force
# Redis to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
logfile ""

</code></pre></div><h3>databases</h3>
<p>redis设置数据库的数量，默认为16</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># Set the number of databases. The default database is DB 0, you can select
# a different one on a per-connection basis using SELECT &lt;dbid&gt; where
# dbid is a number between 0 and 'databases'-1
databases 16

</code></pre></div><p>redis客户端可以用如下命令指定操作的redis数据库</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>SELECT &lt;dbid&gt;
</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; SELECT 1
OK

</code></pre></div><h2>安全</h2>
<h3>requirepass</h3>
<p>解开注释配置这个参数之后，redis客户端连接需要使用密码</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># The requirepass is not compatable with aclfile option and the ACL LOAD
# command, these will cause requirepass to be ignored.
#
# requirepass foobared

</code></pre></div><p>示例</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> requirepass 123
</code></pre></div><p>可以看到设置完requirepass之后，操作redis服务端就需要使用auth进行认证了</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; ping
(error) NOAUTH Authentication required.
127.0.0.1:6379&gt; auth 123
OK
127.0.0.1:6379&gt; ping
PONG
127.0.0.1:6379&gt;

</code></pre></div><h2>限制</h2>
<h3>maxclients</h3>
<p>redis允许接入的最大客户端连接数，默认为1000</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># IMPORTANT: When Redis Cluster is used, the max number of connections is also
# shared with the cluster bus: every node in the cluster will use two
# connections, one incoming and another outgoing. It is important to size the
# limit accordingly in case of very large clusters.
#
# maxclients 10000
</code></pre></div><p>笔者尝试将这个值改为1之后，开始第2个客户端尝试连接报出了<code>ERR max number of clients reached</code>的错误</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>root@iZ8vb7bhe4b8nhhhpavhwpZ ~]# cd /usr/sbin/
root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli
127.0.0.1:6379&gt; ping
Error: Broken pipe
127.0.0.1:6379&gt; auth 123
(error) ERR max number of clients reached
127.0.0.1:6379&gt;

</code></pre></div><h3>maxmemory</h3>
<p>设置内存的使用上限，一旦redis使用上限达到配置值时，就会根据内存<code>maxmemory-policy</code>配置的测卢克进行缓存置换。 当然若未设置该策略或者无法根据规则移除key的话，你只能对redis进行读操作，写操作一律报错。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># In short... if you have replicas attached it is suggested that you set a lower
# limit for maxmemory so that there is some free RAM on the system for replica
# output buffers (but this is not needed if the policy is 'noeviction').
#
# maxmemory &lt;bytes&gt;

</code></pre></div><h3>maxmemory-policy</h3>
<ol>
<li><strong>volatile-lru</strong>：使用LRU算法移除key，只对设置了过期时间的键(最近最少使用的key);</li>
<li><strong>allkeys-lru</strong>：在所有集合key中，使用LRU算法移除key。</li>
<li><strong>volatile-random</strong>：在过期集合中移除随机的key，只对设置了过期时间的键</li>
<li><strong>allkeys-random</strong>：在所有集合key中，移除随机的key</li>
<li><strong>volatile-ttl</strong>：移除那些TTL值最小的key，即那些最近要过期的key</li>
<li><strong>noeviction</strong>：不进行移除。针对写操作，只是返回错误信息(redis的默认配置)</li>
</ol>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># Note: with any of the above policies, when there are no suitable keys for
# eviction, Redis will return an error on write operations that require
# more memory. These are usually commands that create new keys, add data or
# modify existing keys. A few examples are: SET, INCR, HSET, LPUSH, SUNIONSTORE,
# SORT (due to the STORE argument), and EXEC (if the transaction includes any
# command that requires memory).
#
# The default is:
#
# maxmemory-policy noeviction

</code></pre></div><h3>maxmemory-samples</h3>
<p>在使用LRU或者TTL算法进行内存置换时都无法进行精确计算，所以我们可以设置一定量的样本确保估算值的准确性。 此时我们就可以使用<code>maxmemory-samples</code>达到目的，建议设置在3-7范围以内，这个值越大估算的值越准确，但是性能消耗也会随之变高。</p>
<p>配置如下所示，redis默认配置为5</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># The default of 5 produces good enough results. 10 Approximates very closely
# true LRU but costs more CPU. 3 is faster but not very accurate.
#
# maxmemory-samples 5
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220901033637212.png" type="image/png"/>
    </item>
    <item>
      <title>Redis集群</title>
      <link>https://maijunxuan.cn/Redis/Redis%E9%9B%86%E7%BE%A4.html</link>
      <guid>https://maijunxuan.cn/Redis/Redis%E9%9B%86%E7%BE%A4.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Redis集群</source>
      <description>Redis集群 Redis集群的作用 解决因服务器容量不足以容纳用户大量的写请求 高并发写导致单台服务器阻塞，进而导致性能瓶颈问题 redis集群还需要特别注意的问题 3. 由于为了保证高可用，我们的集群可能还采取了主从复制的方案，所以因为主节点宕机导致ip地址发生变化，使得应用程序必须通过修改主机地址等方式连接新主节点，虽然我们可以通过代理的方式解决...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Redis集群的作用</h2>
<ol>
<li>解决因服务器容量不足以容纳用户大量的写请求</li>
<li>高并发写导致单台服务器阻塞，进而导致性能瓶颈问题</li>
</ol>
<p>redis集群还需要特别注意的问题 3. 由于为了保证高可用，我们的集群可能还采取了主从复制的方案，所以因为主节点宕机导致ip地址发生变化，使得应用程序必须通过修改主机地址等方式连接新主节点，虽然我们可以通过代理的方式解决问题，如下图</p>
<p><img src="https://s2.loli.net/2023/06/14/zk3UiEglJZRA2aW.png" alt="在这里插入图片描述"></p>
<p>于是，问题又来了，代理挂了怎么办？我们是不是有需要再去考虑一下代理的高可用呢?所以redis集群采用的无中心化配置解决集群高可用问题，如下三个主从复制，彼此量量相连，客户端可以通过任意一个节点找到目标节点获取数据，而且就尽可能的实现了高可用</p>
<p><img src="https://s2.loli.net/2023/06/14/4YX1IUAliDrshfR.png" alt="在这里插入图片描述"></p>
<h2>Redis集群的概念</h2>
<p>即将Redis进行水平扩容，说的直白一点，就是将写数据按照一定的算法分散不同的Redis服务器中。从而解决高并发写打爆单台Redis服务器，或者因为单点故障导致大量请求无法响应。</p>
<h2>集群配置基础示例</h2>
<h3>架构图</h3>
<p>如下图笔者为了方便演示，就是用不同的端口号模拟不同服务器上的master和slave构成一个集群。</p>
<p><img src="https://s2.loli.net/2023/06/14/UBGXF1oRmxuNPQ6.png" alt="在这里插入图片描述"></p>
<h3>创建多个redis配置文件</h3>
<p>由上图可知我们要创建6个配置文件，就以6379端口的为例，配置如下:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>include /root/redis/redis.conf
port 6379

pidfile "/var/run/redis_6379.pid"
dbfilename "dump6379.rdb"
# 集群相关文件存储文职
dir "/home/bigdata/redis_cluster"
logfile "/home/bigdata/redis_cluster/redis_err_6379.log"
# 开启集群模式
cluster-enabled yes
# 设置节点配置名称
cluster-config-file nodes-6379.conf
# 设定节点失联时间，主节点失联时间超过该配置，则从节点自动进行主从切换。或者本节点在该时间与大多数从节点不可进行通信，则认为主机有问题，则此节点将停止接收任何请求
cluster-node-timeout 15000

</code></pre></div><h3>启动</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 首先创建刚刚配置的集群文件存放位置
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# mkdir -p /home/bigdata/redis_cluster

# 一口气启动6个redis
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-server /root/redis/conf/redis6379.conf;redis-server /root/redis/conf/redis6380.conf;redis-server /root/redis/conf/r edis6381.conf;redis-server /root/redis/conf/redis6389.conf;redis-server /root/redis/conf/redis6390.conf;redis-server /root/redis/conf/redis6391.conf;


# ps命令验证一下是否成功
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# ps -ef |grep redis
root     18678     1  0 00:07 ?        00:00:00 redis-server 127.0.0.1:6379 [cluster]
root     18680     1  0 00:07 ?        00:00:00 redis-server 127.0.0.1:6380 [cluster]
root     18686     1  0 00:07 ?        00:00:00 redis-server 127.0.0.1:6381 [cluster]
root     18692     1  0 00:07 ?        00:00:00 redis-server 127.0.0.1:6389 [cluster]
root     18698     1  0 00:07 ?        00:00:00 redis-server 127.0.0.1:6390 [cluster]
root     18704     1  0 00:07 ?        00:00:00 redis-server 127.0.0.1:6391 [cluster]
</code></pre></div><h3>将6个节点合成一个集群</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 键入以下指令合成一个集群，--cluster-replicas 1表明一个主节点只需要一个从节点
[root@iZ8vb7bhe4b8nhhhpavhwpZ src]# redis-cli --cluster create --cluster-replicas 1 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6389 127.0.0.1:6390  127.0.0.1:6391



# 可以看到79 80 81端口称为master，其余都是slave

&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...
Master[0] -&gt; Slots 0 - 5460
Master[1] -&gt; Slots 5461 - 10922
Master[2] -&gt; Slots 10923 - 16383
Adding replica 127.0.0.1:6390 to 127.0.0.1:6379
Adding replica 127.0.0.1:6391 to 127.0.0.1:6380
Adding replica 127.0.0.1:6389 to 127.0.0.1:6381
&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity
[WARNING] Some slaves are in the same host as their master
M: 7575e0aad00de4762ccc726f7a4e80efec4b9eba 127.0.0.1:6379
   slots:[0-5460] (5461 slots) master
M: b03e017a6049d7c84b8f9383adf7568abeda1a54 127.0.0.1:6380
   slots:[5461-10922] (5462 slots) master
M: 5a8a36c7d85ba26fc762f3f83a1fe2c26e493e74 127.0.0.1:6381
   slots:[10923-16383] (5461 slots) master
S: 9d005710e06d0b35e6d99aa24168945812505eaf 127.0.0.1:6389
   replicates 7575e0aad00de4762ccc726f7a4e80efec4b9eba
S: b28fb8a9cd636cd912d32a216716b6c42c2a8d22 127.0.0.1:6390
   replicates b03e017a6049d7c84b8f9383adf7568abeda1a54
S: 5c62cbadb36edf97e560435cfe1fc4985a79da13 127.0.0.1:6391
   replicates 5a8a36c7d85ba26fc762f3f83a1fe2c26e493e74
Can I set the above configuration? (type 'yes' to accept): yes
&gt;&gt;&gt; Nodes configuration updated
&gt;&gt;&gt; Assign a different config epoch to each node
&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join

&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6379)
M: 7575e0aad00de4762ccc726f7a4e80efec4b9eba 127.0.0.1:6379
   slots:[0-5460] (5461 slots) master
   1 additional replica(s)
S: b28fb8a9cd636cd912d32a216716b6c42c2a8d22 127.0.0.1:6390
   slots: (0 slots) slave
   replicates b03e017a6049d7c84b8f9383adf7568abeda1a54
M: b03e017a6049d7c84b8f9383adf7568abeda1a54 127.0.0.1:6380
   slots:[5461-10922] (5462 slots) master
   1 additional replica(s)
S: 9d005710e06d0b35e6d99aa24168945812505eaf 127.0.0.1:6389
   slots: (0 slots) slave
   replicates 7575e0aad00de4762ccc726f7a4e80efec4b9eba
M: 5a8a36c7d85ba26fc762f3f83a1fe2c26e493e74 127.0.0.1:6381
   slots:[10923-16383] (5461 slots) master
   1 additional replica(s)
S: 5c62cbadb36edf97e560435cfe1fc4985a79da13 127.0.0.1:6391
   slots: (0 slots) slave
   replicates 5a8a36c7d85ba26fc762f3f83a1fe2c26e493e74
[OK] All nodes agree about slots configuration.
&gt;&gt;&gt; Check for open slots...
&gt;&gt;&gt; Check slots coverage...
[OK] All 16384 slots covered.

</code></pre></div><h3>使用集群方式连接6379</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@iZ8vb7bhe4b8nhhhpavhwpZ src]# cd /usr/sbin/
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli -c -p 6379

# 可以看到当前集群中的节点信息
127.0.0.1:6379&gt; CLUSTER NODES
b28fb8a9cd636cd912d32a216716b6c42c2a8d22 127.0.0.1:6390@16390 slave b03e017a6049d7c84b8f9383adf7568abeda1a54 0 1661875974000 2 connected
b03e017a6049d7c84b8f9383adf7568abeda1a54 127.0.0.1:6380@16380 master - 0 1661875975132 2 connected 5461-10922
9d005710e06d0b35e6d99aa24168945812505eaf 127.0.0.1:6389@16389 slave 7575e0aad00de4762ccc726f7a4e80efec4b9eba 0 1661875972000 1 connected
7575e0aad00de4762ccc726f7a4e80efec4b9eba 127.0.0.1:6379@16379 myself,master - 0 1661875974000 1 connected 0-5460
5a8a36c7d85ba26fc762f3f83a1fe2c26e493e74 127.0.0.1:6381@16381 master - 0 1661875974128 3 connected 10923-16383
5c62cbadb36edf97e560435cfe1fc4985a79da13 127.0.0.1:6391@16391 slave 5a8a36c7d85ba26fc762f3f83a1fe2c26e493e74 0 1661875973000 3 connected
</code></pre></div><p>尝试set值，会返回这个值被存放到那台redis上，以及slot值</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; set k1 v1
-&gt; Redirected to slot [12706] located at 127.0.0.1:6381
OK
127.0.0.1:6381&gt;
</code></pre></div><p>注意一次性设置多值时我们需要，指明这几个值所属组，否则会设置失败</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6381&gt; mset a1 v1 a2 v2
(error) CROSSSLOT Keys in request don't hash to the same slot
127.0.0.1:6381&gt; mset a1{cust} v1 a2{cust} v2
-&gt; Redirected to slot [4847] located at 127.0.0.1:6379
OK
127.0.0.1:6379&gt;
</code></pre></div><p>我们也可以根据slot值找到对应count个数据</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; CLUSTER GETKEYSINSLOT 4847 10
1) "a1{cust}"
2) "a2{cust}"
127.0.0.1:6379&gt;
</code></pre></div><h3>测试</h3>
<p>我们尝试让79主节点挂掉，看看集群中会发生什么变化</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 将79节点挂掉
127.0.0.1:6379&gt; SHUTDOWN
not connected&gt;


# 通过80操作集群
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli -c -p 6380


# 15内79还是主节点
127.0.0.1:6380&gt; CLUSTER NODES
b28fb8a9cd636cd912d32a216716b6c42c2a8d22 127.0.0.1:6390@16390 slave b03e017a6049d7c84b8f9383adf7568abeda1a54 0 1661877505187 2 connected
5c62cbadb36edf97e560435cfe1fc4985a79da13 127.0.0.1:6391@16391 slave 5a8a36c7d85ba26fc762f3f83a1fe2c26e493e74 0 1661877503000 3 connected
9d005710e06d0b35e6d99aa24168945812505eaf 127.0.0.1:6389@16389 slave 7575e0aad00de4762ccc726f7a4e80efec4b9eba 0 1661877503000 1 connected
7575e0aad00de4762ccc726f7a4e80efec4b9eba 127.0.0.1:6379@16379 master - 1661877497151 1661877495143 1 disconnected 0-5460
5a8a36c7d85ba26fc762f3f83a1fe2c26e493e74 127.0.0.1:6381@16381 master - 0 1661877504183 3 connected 10923-16383
b03e017a6049d7c84b8f9383adf7568abeda1a54 127.0.0.1:6380@16380 myself,master - 0 1661877504000 2 connected 5461-10922


# 15s后其从节点6389称为master
127.0.0.1:6380&gt; CLUSTER NODES
b28fb8a9cd636cd912d32a216716b6c42c2a8d22 127.0.0.1:6390@16390 slave b03e017a6049d7c84b8f9383adf7568abeda1a54 0 1661877516000 2 connected
5c62cbadb36edf97e560435cfe1fc4985a79da13 127.0.0.1:6391@16391 slave 5a8a36c7d85ba26fc762f3f83a1fe2c26e493e74 0 1661877518250 3 connected
9d005710e06d0b35e6d99aa24168945812505eaf 127.0.0.1:6389@16389 master - 0 1661877517000 7 connected 0-5460
7575e0aad00de4762ccc726f7a4e80efec4b9eba 127.0.0.1:6379@16379 master,fail - 1661877497151 1661877495143 1 disconnected
5a8a36c7d85ba26fc762f3f83a1fe2c26e493e74 127.0.0.1:6381@16381 master - 0 1661877517247 3 connected 10923-16383
b03e017a6049d7c84b8f9383adf7568abeda1a54 127.0.0.1:6380@16380 myself,master - 0 1661877518000 2 connected 5461-10922
127.0.0.1:6380&gt;
</code></pre></div><h2>集群详解</h2>
<h3>什么是slots</h3>
<p>集群有16384个插槽，客户端写入数据时都会通过<code>CRC16(key) % 16384</code>计算该节点最终会落到哪个slot中。以上文为例,集群会根据slot的值将其存放到对应的redis上</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>    1. 节点 A(6379) 负责处理 0 号至 5460 号插槽。
    2. 节点 B(6380)  负责处理 5461 号至 10922 号插槽。
    3. 节点 C(6381)  负责处理 10923 号至 16383 号插槽。
</code></pre></div><h3>集群的优缺点</h3>
<h4>优点</h4>
<ol>
<li>实现扩容，增加可存储数据量</li>
<li>避免高并发写导致单台redis性能瓶颈</li>
<li>无中心化配置实现简单且高可用</li>
</ol>
<h4>缺点</h4>
<ol>
<li>多键操作需要基于组，实现不方便</li>
<li>不支持事务，lua脚本不支持</li>
<li>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</li>
</ol>
<h2>面试题</h2>
<ol>
<li>如何保证Redis高可用?</li>
</ol>
<blockquote>
<ol>
<li>首先使用主从复制，提高读写性能以及确保高可用</li>
<li>配合哨兵提高高可用</li>
<li>使用集群避免高并发写导致性能瓶颈以及扩容进一步提高高可用</li>
</ol>
</blockquote>
<ol>
<li>哨兵有什么作用?</li>
</ol>
<blockquote>
<ol>
<li>监控:监控当前所有redis主从节点</li>
<li>故障转移:一旦redis主节点挂了，哨兵就会选一个leader在众多从节点中出来挑一个新的主节点上位(主从切换)</li>
<li>通知:可通过指令通知其他客户端或者应用程序当前xxx节点挂了</li>
</ol>
</blockquote>
<ol>
<li>哨兵选举leader如何达成公式?</li>
</ol>
<blockquote>
<p>哨兵大于等于quorum 配合Raft算法进行选举(选举的票数大于等于num(sentinels)/2+1时，将成为领导者)</p>
</blockquote>
<ol>
<li>Raft算法有什么作用?</li>
</ol>
<blockquote>
<p>https://www.pdai.tech/md/algorithm/alg-domain-distribute-x-raft.html</p>
</blockquote>
<ol>
<li>Redis缓存的数据量太大怎么办?</li>
</ol>
<blockquote>
<p>Redis切片集群</p>
</blockquote>
<ol>
<li>Redis cluster虚拟槽分区有什么优点?</li>
</ol>
<blockquote>
<p>解耦了数据与节点之间的关联，提升数据横向扩展和容错性。</p>
</blockquote>
<ol>
<li>Gossip协议有什么作用?</li>
</ol>
<blockquote>
<p>该协议使得每个节点都维护了集群中某一部分的节点的信息，在指定时间内大家达成数据一致。大家像病毒一样互相将数据如同"传染"传播出去。例如某个节点挂了，每个节点都会像和自己有联系的节点发送这个小心，当一个节点收到半数以上的消息就判定这个节点挂了，于是再将消息散播出去。</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://s2.loli.net/2023/06/14/zk3UiEglJZRA2aW.png" type="image/png"/>
    </item>
    <item>
      <title>主从复制和哨兵机制</title>
      <link>https://maijunxuan.cn/Redis/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8F%8A%E5%93%A8%E5%85%B5.html</link>
      <guid>https://maijunxuan.cn/Redis/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8F%8A%E5%93%A8%E5%85%B5.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">主从复制和哨兵机制</source>
      <description>主从复制和哨兵机制 主从复制概述 主从复制就是将主节点(master)的数据复制到从节点(slave)，让多个节点承载用户的请求。 主从复制具备以下几个特点: 主从复制配置示例 一主二仆配置 创建3个redis配置文件，以笔者为例，名字分别为redis6379.conf、redis6380.conf、redis6381.conf 主节点为6379，配置...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>主从复制概述</h2>
<p>主从复制就是将主节点(master)的数据复制到从节点(slave)，让多个节点承载用户的请求。</p>
<p>主从复制具备以下几个特点:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>    1. 数据冗余:主节点的数据都会同步到从节点上，所以多个节点都会有相同数据，从而实现数据冗余。
    2. 故障恢复:主节点出现故障后，从节点可以继续承载用户的请求，做到服务上的冗余。
    3. 负载均衡:主从复制机制实现主节点接收用户写请求，从节点承载用户读请求，对于读多写少的场景，这种机制可以大大提高redis的并发量。
    4. 高负载:主从复制+哨兵机制可以实现高负载，这点后文会介绍到。
</code></pre></div><h2>主从复制配置示例</h2>
<h3>一主二仆配置</h3>
<h4>创建3个redis配置文件，以笔者为例，名字分别为<code>redis6379.conf</code>、<code>redis6380.conf</code>、<code>redis6381.conf</code></h4>
<p>主节点为6379，配置内容为:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 引入redis基本配置，注意这个配置只支持RDB
include /root/redis/redis.conf
pidfile /var/run/redis_6379.pid
port 6379
# 设置RDB文件名
dbfilename dump6379.rdb
</code></pre></div><h4>从节点以6380，配置如下</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 引入redis基本配置，注意这个配置只支持RDB
include /root/redis/redis.conf
pidfile /var/run/redis_6380.pid
port 6380
dbfilename dump6380.rdb
# 作为6379的主节点
slaveof 127.0.0.1 6379
</code></pre></div><h4>分别启动这几个redis</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> redis-server /root/redis/conf/redis6379.conf
 redis-server /root/redis/conf/redis6380.conf
 redis-server /root/redis/conf/redis6381.conf
</code></pre></div><h4>完成配置后，我们就可以开始测试了</h4>
<p>首先对清空主节点数据，并设置一些值进去</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; flushdb
OK
127.0.0.1:6379&gt; set master_key value
OK
127.0.0.1:6379&gt;
</code></pre></div><h4>再来看看从节点</h4>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 可以看到主节点的key来了
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli -p 6380
127.0.0.1:6380&gt; keys *
1) "master_key"
127.0.0.1:6380&gt;

# 查看6380服务端的角色，确实是slave
127.0.0.1:6380&gt; info replication
# Replication
role:slave
master_host:127.0.0.1
master_port:6379
master_link_status:up
master_last_io_seconds_ago:8
master_sync_in_progress:0
slave_read_repl_offset:463
slave_repl_offset:463
slave_priority:100
slave_read_only:1
replica_announced:1
connected_slaves:0
master_failover_state:no-failover
master_replid:6b1f1afb6d0c0807d6f3f7b6e4118e892aba4fd2
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:463
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:463
127.0.0.1:6380&gt;
</code></pre></div><h4>主从复制几个特点</h4>
<ol>
<li>从节点挂掉，在启动，数据不会丢失，照样是主节点的从节点</li>
</ol>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 强制挂掉从节点
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli -p 6380
127.0.0.1:6380&gt; SHUTDOWN
not connected&gt;

# 启动 发现数据都在，并且角色也是slave
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-server /root/redis/conf/redis6380.conf
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli -p 6380
127.0.0.1:6380&gt; info replication
# Replication
role:slave
master_host:127.0.0.1
master_port:6379
master_link_status:up
master_last_io_seconds_ago:2
master_sync_in_progress:0
slave_read_repl_offset:1191
slave_repl_offset:1191
slave_priority:100
slave_read_only:1
replica_announced:1
connected_slaves:0
master_failover_state:no-failover
master_replid:6b1f1afb6d0c0807d6f3f7b6e4118e892aba4fd2
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:1191
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1164
repl_backlog_histlen:28
127.0.0.1:6380&gt; keys *
1) "master_key"
127.0.0.1:6380&gt;

</code></pre></div><ol>
<li>主节点挂了，从节点仍然是从节点，主节点恢复后仍然是主节点</li>
</ol>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 强制挂掉主节点
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli
127.0.0.1:6379&gt; SHUTDOWN
not connected&gt;

# 确定主节点下线
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# ps -ef |grep redis
root      5572     1  0 00:16 ?        00:00:01 redis-server 127.0.0.1:6381
root      6273     1  0 00:29 ?        00:00:00 redis-server 127.0.0.1:6380
root      6348  4680  0 00:30 pts/0    00:00:00 grep --color=auto redis

# 再次启动主节点，发现key都在并且角色仍然是master，设置一个k2值
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-server /root/redis/conf/redis6379.conf
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli
127.0.0.1:6379&gt; set key2 v2
OK
127.0.0.1:6379&gt;

# 从节点仍然可以收到，说明主节点仍然是6379
[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli -p 6380
127.0.0.1:6380&gt; keys *
1) "key2"
2) "master_key"
127.0.0.1:6380&gt;

</code></pre></div><h3>薪火相传配置</h3>
<p>如果大量主节点配合大量从节点，会导致主节点为了同步fork大量子进程同步数据，所以我们可以将某些从节点作为某个从节点的从节点</p>
<p>以笔者本次示例为例，我们将81作为80的从节点</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 为了方便，笔者使用命令的形式，读者也可以使用conf文件配置
127.0.0.1:6381&gt; SLAVEOF 127.0.0.1 6380
OK
127.0.0.1:6381&gt;
</code></pre></div><p>再次查看80节点，可以看到<code>slave0:ip=127.0.0.1,port=6381,state=online,offset=810,lag=1</code>，由此可知从节点的从节点配置完成</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[root@iZ8vb7bhe4b8nhhhpavhwpZ sbin]# redis-cli -p 6380
127.0.0.1:6380&gt; info replication
# Replication
role:slave
master_host:127.0.0.1
master_port:6379
master_link_status:up
master_last_io_seconds_ago:8
master_sync_in_progress:0
slave_read_repl_offset:810
slave_repl_offset:810
slave_priority:100
slave_read_only:1
replica_announced:1
connected_slaves:1
slave0:ip=127.0.0.1,port=6381,state=online,offset=810,lag=1
master_failover_state:no-failover
master_replid:a0d1449bc956d9ef57489f7820340c542d0ac066
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:810
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:810
127.0.0.1:6380&gt;
</code></pre></div><h3>反客为主配置</h3>
<p>对着从节点键入如下命令即可实现反客为主，这里由于配置很简单，且生产环境少用，笔者就不做过多演示了</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>slaveof  no one
</code></pre></div><h2>主从复制原理详解</h2>
<h3>全量复制</h3>
<p>如下图,整体步骤为:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>    1. 从节点向主节点发送同步请求，因为不知道主库的runID，并且不知道同步的偏移量是多少，所以参数分别为? -1,同步请求的指令为psync
    2. 主库执行bgsave指令生成rdb指令，将数据发送给从库，从库为了保证数据一致性，会将数据清空，然后加载rdb文件，完成数据同步。在此期间，主库收到的新数据都会被存入replication buffer中。
    3. 主库会将replication buffer发送给从库，完成最新数据的同步。
</code></pre></div><p><img src="https://s2.loli.net/2023/06/14/Zsi4Ljf6Hho8mB7.png" alt="在这里插入图片描述"></p>
<h3>增量复制</h3>
<p>从 Redis 2.8 开始，因为网络断开导致数据同步中断的情况，会采用增量复制的方式完成数据补充。</p>
<p>需要了解的是，当主从同步过程中因为网络等问题发生中断，<code>repl_backlog_buffer</code>会保存两者之间差异的数据，如果从库长时间没有恢复，很可能出现该环形缓冲区数据被覆盖进而出现增量复制失败，只能通过全量复制的方式实现数据同步。</p>
<p>接下来我们再补充一个概念replication buffer，这个缓冲区用于存放用户写入的新指令，完成全量复制之后的数据都是通过这个buffer的数据传输实现数据增量同步。</p>
<h2>主从复制相关面试题</h2>
<ol>
<li>主服务器不进行持久化复制是否会有安全性问题?</li>
</ol>
<blockquote>
<p>有，假如主节点没有使用RDB持久化，数据没有持久化到磁盘，假如主节点挂掉就光速恢复，从节点很可能会因此清空原本数据进而导致数据丢失。</p>
</blockquote>
<ol>
<li>为什么主从复制使用RDB而不是AOF</li>
</ol>
<blockquote>
<p>RDB是二进制且压缩过的文件，传输速度以及加载速度都远远快速AOF。且AOF存的都是指令非常耗费磁盘空间，加载时都是重放每个写命令，非常耗时。需要注意的是RDB是按照时间间隔进行持久化，对于数据不敏感的场景我们还是建议使用RDB。</p>
</blockquote>
<ol>
<li>什么是无磁盘复制模式</li>
</ol>
<blockquote>
<p>数据同步不经过主进程以及硬盘，直接创建一个新进程dump RDB数据到从节点。对于磁盘性能较差的服务器可以使用这种方式。配置参数为: repl-diskless-sync no # 决定是否开启无磁盘复制模式 repl-diskless-sync-delay 5 # 决定同步的时间间隔</p>
</blockquote>
<ol>
<li>为什么会有从库的从库设计</li>
</ol>
<blockquote>
<p>避免为了同步数据给大量从库，fork大量的子进程生成rdb文件进行全量复制导致主进程阻塞。</p>
</blockquote>
<ol>
<li>读写分离及其中的问题</li>
</ol>
<blockquote>
<ol>
<li>延迟与不一致问题:如果对数据一致性容忍度较低，网络延迟导致数据不一致问题只能通过提高网络带宽，或者通知应用不在通过该节点获取数据</li>
<li>数据过期问题:</li>
<li>故障切换问题</li>
</ol>
</blockquote>
<ol>
<li>如果在网络断开期间，repl_backlog_size环形缓冲区写满之后，是进行增量复制还是全量复制？</li>
</ol>
<blockquote>
<ol>
<li>若主库的主库repl_backlog_buffer的slave_repl_offset已经被覆盖，那么同步就需要全量复制了</li>
<li>从库会通过psync命令把自己记录的slave_repl_offset发给主库，主库根据复制进度决定是增量复制还是全量复制。</li>
</ol>
</blockquote>
<h1>哨兵模式</h1>
<h2>哨兵模式简介</h2>
<p>哨兵提供以下几种功能</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>    1. 监控（Monitoring）:哨兵会监控主节点和从节点是否正常运作。
    2. 自动故障转移（Automatic failover）:当主节点因为以外下线了，哨兵就会从从节点中选出新的主节点，并让其他从节点复制新的主节点的数据。
    3. 通知（Notification）：哨兵会将故障转移结果通知给客户端。
    4. 配置提供者（Configuration provider）:客户端连接redis时，会通过哨兵获取服务提供者。
</code></pre></div><h2>哨兵模式配置示例</h2>
<h3>编辑一个哨兵的配置文件</h3>
<p>以笔者的为例，创建一个名为<code>sentinel.conf</code>，内容为如下所示，主从节点仍然以上文的6179作为主，其余作为从</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>sentinel monitor master_redis 127.0.0.1 6379 1
</code></pre></div><p>通过客户端查看6379的服务端信息，可以看到当前6379身份为master，并且有两个从节点6380和6381</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1:6379&gt; info replication
# Replication
role:master
connected_slaves:2
slave0:ip=127.0.0.1,port=6380,state=online,offset=3082,lag=1
slave1:ip=127.0.0.1,port=6381,state=online,offset=3082,lag=0
master_failover_state:no-failover
master_replid:3c8c2a4815e310bcc68b4e25705002a52be66658
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:3233
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:3233
127.0.0.1:6379&gt; SHUTDOWN
not connected&gt;
</code></pre></div><p>最后我们启动哨兵，然后我们将6379强制下线</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>redis-sentinel /root/redis/conf/sentinel.conf
</code></pre></div><p>然后我们就会看到主节点切换的日志信息了</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>8210:X 29 Aug 2022 01:01:59.772 # +failover-end master master_redis 127.0.0.1 6379
8210:X 29 Aug 2022 01:01:59.772 # +switch-master master_redis 127.0.0.1 6379 127.0.0.1 6380
</code></pre></div><h2>哨兵模式工作原理解析</h2>
<h3>哨兵集群的组建</h3>
<p>如下图哨兵1在主库的<code>__sentinel__:hello</code>频道发送消息告知其他哨兵节点，而其他哨兵也是通过订阅该节点从而使得彼此构成一张联系网。 <img src="https://s2.loli.net/2023/06/14/ZRTEuoHWa4gYGO8.png" alt="在这里插入图片描述"></p>
<h3>哨兵监控redis库</h3>
<p>如下图哨兵通过info命令从主库中获取从库的信息，从而实现与其他从库建立连接，其他节点同理。</p>
<p><img src="https://s2.loli.net/2023/06/14/8z1ETMeRfVLh9l6.png" alt="在这里插入图片描述"></p>
<h3>主库下线的判定</h3>
<h4>主观下线</h4>
<p>任意一个哨兵对主节点进行检测判断，主节点是否下线。</p>
<h4>客观下线</h4>
<p>哨兵集群通过投票判定当前主节点是否下线，其工作过程如下:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. 某个哨兵主观判定主节点下线，向其他哨兵发出is-master-down-by-addr，开始对是否下线判定进行投票
2. 每个哨兵发出自己的看法
3. 根据sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;设置quorum，若同意数大于等于quorum则判定主节点下线。
</code></pre></div><p><img src="https://s2.loli.net/2023/06/14/GaXSYFCxBnqQNye.png" alt="在这里插入图片描述"></p>
<h3>哨兵集群的选举</h3>
<p>判定主库下线后我们就必须选出哨兵中的leader找下一个主节点，所以我们必须建立一个哨兵集群，有了集群我们必须从中选举出leader，而哨兵选举出的leader必须符合以下两个条件:</p>
<blockquote>
<ol>
<li>num(total_sentinels)/2+1 //即半数(所有哨兵数的半数，无论哨兵死活)以上的选票即可成为哨兵中的leader，这就是著名的Raft算法</li>
<li>选票数还必须大于等于quorum</li>
</ol>
</blockquote>
<p>举个例子，假如我们当前有5个哨兵，1个主节点，3个从节点，quorum设置为2。假如此时有3个哨兵挂掉，请问我们可以判定主节点下线以及选举新的主节点嘛？</p>
<blockquote>
<p>首先解决第一个问题，由于哨兵挂了3个所以还剩两个，假如主节点挂了，由于quorum等于2，所以我们有一定概率(两个哨兵都认为主节点挂了)判定主节点下线。 再来2个问题，上文已经给出了选举新的哨兵leder的两个条件，本题目明显不符合条件1，因为(5/2)+1=3，而哨兵只剩两个了，所以选不出哨兵的leader，也就没办法指定新的leader了。</p>
</blockquote>
<h3>主节点选出</h3>
<p>完成哨兵leader选举，就开始指定主节点了，主节点的选定规则如下:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1. 过滤掉不健康的即哨兵ping不同的从节点
2. 选择slave-priority从节点优先级高的
3. 如果不存在slave-priority配置，则选择复制偏移量(即永远原来master最多数据的节点)最大，作为主节点
</code></pre></div><p><img src="https://s2.loli.net/2023/06/14/4k7jFqvTzVcKU9x.png" alt="在这里插入图片描述"></p>
<h3>故障的转移</h3>
<ol>
<li>选举出哨兵leader</li>
<li>哨兵leader根据上文规则选出新的master</li>
<li>从节点复制新leader的数据</li>
<li>通知客户端主节点更换</li>
<li>若原来的主节点复活，则作为新主节点的从节点</li>
</ol>
]]></content:encoded>
      <enclosure url="https://s2.loli.net/2023/06/14/Zsi4Ljf6Hho8mB7.png" type="image/png"/>
    </item>
    <item>
      <title>一、背景</title>
      <link>https://maijunxuan.cn/%E4%B8%AD%E9%97%B4%E4%BB%B6/Canal/Canal%E7%9A%84%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://maijunxuan.cn/%E4%B8%AD%E9%97%B4%E4%BB%B6/Canal/Canal%E7%9A%84%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">一、背景</source>
      <description>一、背景 工作中有个需求，当数据库的数据变更时，另外一个系统中的数据要能及时感应到，通过调研知道，监听数据库的binlog可以做到一个准实时的通知，而canal主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费，正好满足需求，此处记录一下canal的简单使用。 二、canal的工作原理 canal的工作原理 步骤： canal模拟m...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<p>工作中有个需求，当数据库的数据变更时，另外一个系统中的数据要能及时感应到，通过调研知道，监听数据库的<code>binlog</code>可以做到一个准实时的通知，而<code>canal</code>主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费，正好满足需求，此处记录一下<code>canal</code>的简单使用。</p>
<h1>二、canal的工作原理</h1>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202208080239150.webp" alt="canal的工作原理"></p>
<p><strong>步骤：</strong></p>
<ol>
<li>canal模拟mysql slave的交互协议，伪装自己为mysql slave，向mysql master发送dump协议</li>
<li>mysql master收到dump请求，开始推送binary log给slave(也就是canal)</li>
<li>canal解析binary log对象(原始为byte流)</li>
</ol>
<h1>三、安装canal</h1>
<h2>1、mysql配置相关</h2>
<h3>1、检测binlog是否开启</h3>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'log_bin'</span><span class="token punctuation">;</span>
<span class="token operator">+</span></code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202208080239150.webp" type="image/webp"/>
    </item>
    <item>
      <title></title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Docker/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Docker/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</guid>
      <source url="https://maijunxuan.cn/rss.xml"></source>
      <description>Docker命令 Docker安装 查看Linux版本 yum安装gcc相关 yum安装所需的工具包 设置镜像源为阿里云 更新yum软件包索引 安装docker ce 启动docker 查看docker版本 卸载docker 获得阿里镜像源加速器 打开阿里云的容器镜像服务-&amp;gt;镜像工具-&amp;gt;镜像加速器，获取加速器地址 在Centos里 在里面创建一个文件，...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Docker命令</h2>
<h3>Docker安装</h3>
<h5>查看Linux版本</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> /etc/redhat-release
</code></pre></div><h5>yum安装gcc相关</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc-c++
</code></pre></div><h5>yum安装所需的工具包</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
</code></pre></div><h5>设置镜像源为阿里云</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
</code></pre></div><h5>更新yum软件包索引</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum makecache fast
</code></pre></div><h5>安装docker ce</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io
</code></pre></div><h5>启动docker</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre></div><h5>查看docker版本</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> version
</code></pre></div><h5>卸载docker</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl stop <span class="token function">docker</span>
yum remove docker-ce docker-ce-cli containerd.io
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/containerd
</code></pre></div><h5>获得阿里镜像源加速器</h5>
<p>打开阿里云的容器镜像服务-&gt;镜像工具-&gt;镜像加速器，获取加速器地址</p>
<p>在Centos里</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker
</code></pre></div><p>在里面创建一个文件，daemon.json</p>
<p>文件内容为，将加速器地址粘在这。</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://xxxx.com"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><h5>重启服务器</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl daemon-reload
systemctl restart <span class="token function">docker</span>
</code></pre></div><h3>启动类命令</h3>
<h5>启动docker：</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre></div><h5>停止docker</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>system stop <span class="token function">docker</span>
</code></pre></div><h5>重启docker</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl restart <span class="token function">docker</span>
</code></pre></div><h5>查看docker状态</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl status <span class="token function">docker</span>
</code></pre></div><h5>开机启动</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
</code></pre></div><h5>查看docker概要信息</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> info
</code></pre></div><h3>Docker镜像命令</h3>
<h5>列出本地主机上的镜像</h5>
<p>参数说明：</p>
<ul>
<li>-a：列出本地所有的镜像（含历史映像层）</li>
<li>-q：只显示镜像ID</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre></div><h5>查找某个镜像</h5>
<p>参数说明：</p>
<ul>
<li>--limit：只列出N个镜像，默认25个</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> search 镜像名字
</code></pre></div><h5>拉取镜像</h5>
<p>如果不确定版本，可以去docker hub上找相对应的镜像</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull 镜像名字<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span>
</code></pre></div><h5>查看镜像/容器/数据卷所占的空间</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> system <span class="token function">df</span>
</code></pre></div><h5>删除镜像</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>删除某个特定镜像，-f代表强制删除，如果已经有容器运行了该镜像，不加上-f是删除不掉的
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像ID
删除多个
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像名1:TAG 镜像名2:TAG
删除全部
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-qa</span><span class="token variable">)</span></span>
</code></pre></div><h3>Docker容器命令</h3>
<h5>新建+启动容器</h5>
<p>参数说明：</p>
<ul>
<li>--name：指定容器新名称</li>
<li>-d：后台运行容器，即启动守护式容器</li>
<li>-i：以交互模式启动运行容器，与-t同时使用</li>
<li>-P：随机端口映射，大写P</li>
<li>-p：指定端口映射，小写p</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> image <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre></div><h5>列出正在运行的容器</h5>
<p>参数说明：</p>
<ul>
<li>-a：列出当前所有正在运行的容器+历史上运行过的</li>
<li>-l：显示最近创建的容器</li>
<li>-n：显示最近n个创建的容器</li>
<li>-q：静默模式，只显示容器编号</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>
</code></pre></div><h5>退出容器</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>如果是run进去的容器，使用exit退出，容器停止
如果是run进去的容器，使用ctrl+p+q，容器不停止
</code></pre></div><h5>启动已停止运行的容器</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> start 容器ID或者容器名
</code></pre></div><h5>重启容器</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart 容器ID或者容器名
</code></pre></div><h5>停止容器</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop 容器ID或者容器名
</code></pre></div><h5>强制停止容器</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">kill</span> 容器ID或者容器名
</code></pre></div><h5>删除已停止的容器</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> 容器ID
一次性删除所有的容器（危险操作）
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span>
</code></pre></div><h5>前台后台启动</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> 容器ID:TAG
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> 容器ID:TAG
</code></pre></div><h5>查看容器日志</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs 容器ID
</code></pre></div><h5>查看容器内运行的进程</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">top</span> 容器ID
</code></pre></div><h5>查看容器内部细节</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect 容器ID
</code></pre></div><h5>进入正在运行的容器并以命令行交互</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器id /bin/bash
<span class="token function">docker</span> attach 容器id

exec进入和attach的区别
attach是直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止。
exec是在容器中打开新的终端，并且可以启动新的进程，用exit退出，会导致容器的停止。
</code></pre></div><h5>从容器内拷贝文件到主机上</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> 容器id:容器内路径 目的主机路径
例:docker <span class="token function">cp</span> f1abwef244aa:/usr/local/mycptest/container.txt /tmp/c.txt
</code></pre></div><h5>导入和导出容器</h5>
<p><strong>导出</strong></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>该命令会在当前目录下将该容器打包，形成一个镜像文件。
<span class="token function">docker</span> <span class="token builtin class-name">export</span> 容器id <span class="token operator">&gt;</span> abcd.tar.gz
</code></pre></div><p><strong>导入</strong></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> abcd.tar.gz <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - 镜像名:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span>
</code></pre></div><h5>Docker镜像commit操作</h5>
<p>commit完后可以在docker images中查看到自己commit的容器</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">"提交的描述信息"</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">"作者"</span> 容器ID 要创建的目标镜像名:<span class="token punctuation">[</span>标签名<span class="token punctuation">]</span>
</code></pre></div><h5>在ubuntu下安装yum</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">apt-get</span> update
<span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>
</code></pre></div><h3>仓库操作</h3>
<h4>阿里云库</h4>
<h5>将自己commit的镜像推送到阿里云</h5>
<p>打开自己的仓库镜像，进入到管理界面获取脚本。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>登录
<span class="token function">docker</span> login <span class="token parameter variable">--username</span><span class="token operator">=</span>xxxxx registry.cn-shenzhen.aliyuncs.com
将镜像推送到Registry
<span class="token function">docker</span> tag 镜像id registry.cn-shenzhen.aliyuncs.com/镜像名:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>
<span class="token function">docker</span> push registry.cn-shenzhen.aliyuncs.com/镜像名:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>
</code></pre></div><h5>将阿里云上的镜像下载到本地</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull registry.cn-shenzhen.aliyuncs.com/镜像名:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>
</code></pre></div><h4>Docker Registry私服</h4>
<h5>先下载Docker Registry镜像</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull registry
</code></pre></div><h5>运行registry</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token parameter variable">-v</span> 宿主机目录:容器目录 <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true registry
</code></pre></div><h5>提交自定义的镜像</h5>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker commit -m="提交的描述信息" -a="作者" 容器ID 要创建的目标镜像名:[标签名]
</code></pre></div><h5>查看私服库上有什么镜像</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> http://本机ip:5000/v2/_catalog
</code></pre></div><h5>将新的镜像修改为符合私服规范的Tag</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag 镜像:Tag 本机ip:5000/镜像名称:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span>
</code></pre></div><h5>修改配置文件daemon.json，加上insecure-registries使其支持http</h5>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://xxxx.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"insecure-registries"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"本机ip:5000"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><h5>使用push目录推送到私服库</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> push 本机ip:5000/镜像名
</code></pre></div><h5>拉取私服镜像到本地</h5>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker pull 本机ip:5000/镜像名:[TAG]
</code></pre></div><h3>Docker容器卷</h3>
<h5>容器卷挂载，宿主机与容器内文件双向绑定</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /宿主机绝对路径目录:/容器内目录 镜像名
</code></pre></div><h5>使用inspect命令查看是否绑定成功</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect 容器id
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022310004.png" alt=""></p>
<h5>容器默认挂载是双向可读可写的</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>容器内对该目录可读可写
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /宿主机绝对路径目录:/容器内目录:rw 镜像名

容器内对该目录只可读
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /宿主机绝对路径目录:/容器内目录:ro 镜像名
</code></pre></div><h5>容器套娃挂载</h5>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>容器1使用挂载命令与本机进行挂载后，容器2与容器1进行挂载
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /宿主机绝对路径目录:/容器内目录 <span class="token parameter variable">--name</span> 容器1名称 容器1镜像
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true --volumes-from 容器1名称 <span class="token parameter variable">--name</span> 容器2名称 容器2镜像
</code></pre></div><h3>Docker安装MySQL</h3>
<h4>第一步：新建MySQL容器实例</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3320</span>:3306 <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /docker_mount/mysql3320/mysql/log:/var/log/mysql <span class="token parameter variable">-v</span> /docker_mount/mysql3320/mysql/data:/var/lib/mysql <span class="token parameter variable">-v</span> /docker_mount/mysql3320/mysql/conf:/etc/mysql/conf.d  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span><span class="token string">"C.UTF-8"</span> <span class="token parameter variable">--name</span> mysql3320 mysql:5.7
</code></pre></div><p>此台mysql部署在3320端口，并挂载数据在宿主机上。</p>
<h4>第二步：在宿主机上配置my.cnf</h4>
<div class="language-ini" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">client</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">default_character_set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">collation_server</span> <span class="token punctuation">=</span> <span class="token value attr-value">utf8_general_ci</span>
<span class="token key attr-name">character_set_server</span> <span class="token punctuation">=</span> <span class="token value attr-value">utf8</span>
</code></pre></div><p>如果连接慢的话，可以在[mysqld]下加上skip-name-resolve</p>
<h4>第三步：重新启动mysql</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart mysql
</code></pre></div><p>注意：如果之前没有配置my.cnf就建了库和表的话，对于以前的库表的字符集配置文件配置的是不生效的。</p>
<h4>总结：</h4>
<p>该种方法配置的mysql容器，就算停止掉了，或者直接将该容器删除了，只要再次新建mysql容器的时候，挂载的数据卷一致，数据全部都能保留的。</p>
<h3>Docker-portainer安装</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">--name</span> portainer <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> /portainer_data:/data portainer/portainer-ce:2.0.1
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022310004.png" type="image/png"/>
    </item>
    <item>
      <title>nginx基础入门</title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Nginx/Nginx%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Nginx/Nginx%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">nginx基础入门</source>
      <description>nginx基础入门 nginx常用命令 nginx配置文件简介 nginx反向代理 简介 网站建立后，用户希望只需通过一个url即可访问网站。但是网站所使的服务器可能远不止一台(考虑到用户的访问量在多台服务器上配置tomcat)，所以如何访问通过一个url且还能保证服务器负载均衡的情况下完成用户访问我们的网站呢？nginx的反向代理就是最好的解决方案。...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>nginx常用命令</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code># 进入nginx目录
cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin
# 查看nginx版本号
<span class="token punctuation">.</span>/nginx <span class="token operator">-</span>v

# 启动nginx
<span class="token punctuation">.</span>/nginx

# 停止nginx
<span class="token punctuation">.</span>/nginx <span class="token operator">-</span>s stop

# 重新加载nginx
<span class="token punctuation">.</span>/nginx <span class="token operator">-</span>s reload
</code></pre></div><h2>nginx配置文件简介</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code># 查看tomcat配置
cat <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf
全局配置

#user nobody；                         #运行用户

<span class="token class-name">Worker_processes</span> <span class="token number">1</span> <span class="token punctuation">;</span>               #工作进程数量

#error_log  log<span class="token operator">/</span>error<span class="token punctuation">.</span>log           #错误日志文件的位置

#pid     log<span class="token operator">/</span>nginx<span class="token punctuation">.</span>pid                 #<span class="token constant">PID</span>文件的位置



<span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span>事件配置

events<span class="token punctuation">{</span>

use  epoll<span class="token punctuation">;</span>                              #使用epoll模型

worker_connections <span class="token number">4096</span>     #每进程处理<span class="token number">4096</span>个连接

<span class="token punctuation">}</span>

<span class="token constant">HTTP</span>配置

http <span class="token punctuation">{</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

include mine<span class="token punctuation">.</span>types<span class="token punctuation">;</span>                                              #nginx支持的媒体类型库文件

#include  benet<span class="token operator">/</span>www<span class="token punctuation">.</span>conf     #配置多个虚拟机主机，把server<span class="token punctuation">{</span><span class="token punctuation">}</span>内的内容复制到外面新建的www<span class="token punctuation">.</span>conf后包含进去     

default_type        application<span class="token operator">/</span>octet<span class="token operator">-</span>stranm<span class="token punctuation">;</span> #默认的媒体类型

access_log   log<span class="token operator">/</span>access<span class="token punctuation">.</span>log     main<span class="token punctuation">;</span>   #访问日志位置

sendfile       on <span class="token punctuation">;</span>    #开启高效传输模式<span class="token punctuation">(</span>支持文件发送下载<span class="token punctuation">)</span>

keepalive_timeout <span class="token number">65</span><span class="token punctuation">;</span>     #连接保持超时



server <span class="token punctuation">{</span>                                                               #可配置对三个基于域名的虚拟主机

listen    <span class="token number">80</span><span class="token punctuation">;</span>       #web服务的监听配置

server_name   www<span class="token punctuation">.</span>benet<span class="token punctuation">.</span>com   #网站名称（<span class="token constant">FQDN</span>），别名就是在后面再添加网址

charset  utf<span class="token operator">-</span><span class="token number">8</span>               #网页的默认字符集

location <span class="token operator">/</span> <span class="token punctuation">{</span>

      root   html<span class="token punctuation">;</span>           #网站根目录的位置

     error_page    <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>    #出现对应的http状态码时，使<span class="token number">50</span>x<span class="token punctuation">.</span>html回应客户

    location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>

            root     html<span class="token punctuation">;</span>        #指定对应的站点目录为html

<span class="token punctuation">}</span>

         index index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>php      #默认首页    

         <span class="token punctuation">}</span>

<span class="token punctuation">}</span> 
</code></pre></div><h2>nginx反向代理</h2>
<h3>简介</h3>
<p>网站建立后，用户希望只需通过一个url即可访问网站。但是网站所使的服务器可能远不止一台(考虑到用户的访问量在多台服务器上配置tomcat)，所以如何访问通过一个url且还能保证服务器负载均衡的情况下完成用户访问我们的网站呢？nginx的反向代理就是最好的解决方案。 如下图所示，用户通过<code>www.xxx.com</code>交由dns解析到而访问到nginx，此时nginx就是一个反向代理的角色，nginx这时候就会工具服务器详情动态的决定访问哪台服务器。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030024451.png" alt="image-20220903002420204"></p>
<h3>反向代理示例1</h3>
<h4>需求描述</h4>
<p>打开浏览器，在浏览器地址栏输入地址 <a href="http://www.test.com/" target="_blank" rel="noopener noreferrer">www.test.com</a> ，跳转到 linux系统 tomcat 主页中</p>
<h4>前置步骤</h4>
<p>安装tomcat服务器</p>
<p>设置域名重定向</p>
<p>由于本次实验需要通过域名访问nginx然后通过nginx请求tomcat主页并返回，所以为避免dns无法解析我们模拟的域名地址，可以在本机Windows下配置域名解析，具体步骤如下</p>
<ol>
<li>进入如下目录编辑hosts文件</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">C</span><span class="token operator">:</span>\<span class="token class-name">Windows</span>\<span class="token class-name">System32</span>\drivers\etc
</code></pre></div><ol>
<li>编辑该配置文件，内容如下，这里的ip地址是和本机桥接的虚拟机ip地址</li>
<li><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030024240.png" alt="image-20220903002442301"></li>
</ol>
<h4>nginx配置步骤</h4>
<p>配置nginx请求转发 如下图所示，编辑<code>/usr/local/nginx/conf/nginx.conf</code>将内容改为如下所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025806.png" alt="image-20220903002502384"></p>
<p>重启nginx</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>#进入sbin目录输入
<span class="token punctuation">.</span>/nginx <span class="token operator">-</span>s reload
</code></pre></div><p>查看结果 <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025517.png" alt="在这里插入图片描述"></p>
<h3>反向代理示例2</h3>
<h4>需求</h4>
<p>使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中，nginx 监听端口为 9001。即访问<code>192.168.1.29:9001/test1/index.html</code>和<code>192.168.1.29:9001/test2/index.html</code>访问结果是不同的</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025867.png" alt="在这里插入图片描述"></p>
<h4>步骤</h4>
<ol>
<li>增加一台tomcat，如之前所示，注意修改相关端口与之区分，修改的端口如下所示：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026552.png" alt="image-20220903002548213"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025267.png" alt="在这里插入图片描述">)<img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026920.png" alt="在这里插入图片描述"></p>
<ol>
<li>启动tomcat</li>
<li>为两个tomcat配置不同的页面,即在分别在两台tomcat服务器下<code>webapp</code>下,第一台tomcat参见test1目录并添加index网页，第二台tomcat服务器参见test2目录添加index网页。</li>
<li>测试两台tomcat</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026407.png" alt="image-20220903002636221"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026433.png" alt="image-20220903002653947"></p>
<ol>
<li>进行反向代理配置 进入nginx.conf进行如下配置</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  server <span class="token punctuation">{</span>
        listen       <span class="token number">9001</span><span class="token punctuation">;</span>
        server_name  <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.29</span><span class="token punctuation">;</span>

        location <span class="token operator">~</span> <span class="token operator">/</span>test1<span class="token operator">/</span> <span class="token punctuation">{</span>
          proxy_pass   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

    location <span class="token operator">~</span> <span class="token operator">/</span>test2<span class="token operator">/</span> <span class="token punctuation">{</span>
          proxy_pass   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8081</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre></div><ol start="2">
<li>开放9001端口</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>zone<span class="token operator">=</span><span class="token keyword">public</span> <span class="token operator">--</span>add<span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">9001</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanent
systemctl stop firewalld<span class="token punctuation">.</span>service
systemctl start firewalld<span class="token punctuation">.</span>service

</code></pre></div><ol start="3">
<li>测试</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030028159.png" alt="image-20220903002810057"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030028558.png" alt="image-20220903002825015"></p>
<h2>负载均衡</h2>
<h3>需求</h3>
<p>浏览器地址栏输入地址 <code>http://192.168.1.29/study/index.html</code> 请求web页面，nginx会将多个http请求分配到8080或者8081服务器中。</p>
<h3>步骤</h3>
<ol>
<li>
<p>准备两台tomcat服务器，并在webapp目录下创建study文件夹，并在文件夹中都创建一个index.html内容随意</p>
</li>
<li>
<p>开启tomcat测试是否可达</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030029388.png" alt="image-20220903002909832"></p>
</li>
<li>
<p>配置nginx负载均衡配置 如下所示，<code>upstream</code> 即负载服务器，下文将<code>upstream</code>起名为myserver，然后在server中配置负载服务器名myserver即可完成负载均衡配置。</p>
</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> upstream myserver<span class="token punctuation">{</span>
        server <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.29</span><span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">;</span>
        server <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.29</span><span class="token operator">:</span><span class="token number">8081</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

    server <span class="token punctuation">{</span>
        listen       <span class="token number">80</span><span class="token punctuation">;</span>
        server_name  <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.29</span><span class="token punctuation">;</span>

        #charset koi8<span class="token operator">-</span>r<span class="token punctuation">;</span>

        #access_log  logs<span class="token operator">/</span>host<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>

        location <span class="token operator">/</span> <span class="token punctuation">{</span>
            root   html<span class="token punctuation">;</span>
            proxy_pass http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>myserver<span class="token punctuation">;</span>
            index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre></div><ol>
<li>
<p>测试</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030029013.png" alt="image-20220903001416365"></p>
<h3>nginx 分配服务器策略</h3>
<h4>第一种 轮询（默认）</h4>
<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉,则自动剔除。</p>
<h4>第二种 weight</h4>
<p>weight 代表权重默认为 1, 权重越高被分配的客户端越多</p>
<h4>第三种 ip_hash</h4>
<p>每个请求按访问 ip 的 的 hash 结果分配，这样每个访客固定访问一个后端服务器</p>
<h4>第四种 fair （第三方）</h4>
<p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>
</li>
</ol>
<h2>动静分离</h2>
<p>我们都知道请求一个web页面过程中，需要加载动态数据或者静态数据。动态数据变化多端，而静态数据基本不变。动静分离以后我们可以对静态文件进行缓存、或者压缩提高网站性能。</p>
<h3>模拟实验</h3>
<p>为了模仿动态文件和静态文件的场景，笔者在/data目录下创建www作为动态文件夹，img为静态文件夹。通过同一个http请求+文件路径模仿动态文件和静态文件的访问过程。</p>
<h3>配置步骤</h3>
<ol>
<li>data文件夹下创建动态文件和静态文件目录并添加文件</li>
<li>nginx添加如下配置</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030029668.png" alt="image-20220903002941796"></p>
<ol start="3">
<li>
<p>测试</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030900.png" alt="image-20220903003003145"></p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030572.png" alt="image-20220903003017327"></p>
<h2>高可用配置</h2>
<h3>介绍</h3>
<p>如下图，若只有一台nginx时，常规情况下发起http请求由nginx代理是正常的。当这台nginx服务器出现故障宕机了怎么办呢？ <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030100.png" alt="在这里插入图片描述"> 面对这种情况，我们预想的最好解决方案就是增加一台nginx服务器作为备用代理服务器，从而做到高可用配置。 如下图所示，用户使用192.168.1.50发起请求，若master主服务器正常则会交由主服务器代理http请求，若主服务器出现故障则由备用服务器进行http代理请求</p>
<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030539.png" alt="在这里插入图片描述"></p>
<h3>配置</h3>
<ol>
<li>增加一台虚拟机安装nginx服务器</li>
<li>两台虚拟机都安装keepalived</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>yum install keepalived –y

</code></pre></div><ol>
<li>配置keepalived</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>配置keepalived检查主机存货状态脚本
vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>src<span class="token operator">/</span>nginx_check<span class="token punctuation">.</span>sh 

# 粘贴下方内容
#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash
<span class="token class-name">A</span><span class="token operator">=</span>`ps <span class="token operator">-</span><span class="token class-name">C</span> nginx –no<span class="token operator">-</span>header <span class="token operator">|</span>wc <span class="token operator">-</span>l`
<span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token class-name">A</span> <span class="token operator">-</span>eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then
    <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx
    sleep <span class="token number">2</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> `ps <span class="token operator">-</span><span class="token class-name">C</span> nginx <span class="token operator">--</span>no<span class="token operator">-</span>header <span class="token operator">|</span>wc <span class="token operator">-</span>l` <span class="token operator">-</span>eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then
        killall keepalived
    fi
fi
vim cd <span class="token operator">/</span>etc<span class="token operator">/</span>keepalived<span class="token operator">/</span>keepalived<span class="token punctuation">.</span>conf #编辑keepalived的配置文件

# 直接将内容覆盖成如下配置 配置详情可见注释
global_defs <span class="token punctuation">{</span>
notification_email <span class="token punctuation">{</span>
acassen<span class="token annotation punctuation">@firewall.loc</span>
failover<span class="token annotation punctuation">@firewall.loc</span>
sysadmin<span class="token annotation punctuation">@firewall.loc</span>
<span class="token punctuation">}</span>
notification_email_from <span class="token class-name">Alexandre<span class="token punctuation">.</span>Cassen</span><span class="token annotation punctuation">@firewall.loc</span>
smtp_server <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.150</span> #本机ip地址
smtp_connect_timeout <span class="token number">30</span>
router_id <span class="token constant">LVS_DEVEL</span> # 本机设备名称，可使用命令 vim <span class="token operator">/</span>etc<span class="token operator">/</span>hosts 添加一行 <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token constant">LVS_DEVEL</span> 完成主机id配置
<span class="token punctuation">}</span>

# 下方为vrrp协议具体内容可参见百度
vrrp_script chk_http_port <span class="token punctuation">{</span>
script <span class="token string">"/usr/local/src/nginx_check.sh"</span> # 检查当前服务器是否存货的脚本路径
interval <span class="token number">2</span> #（检测脚本执行的间隔） 
weight <span class="token number">2</span>
<span class="token punctuation">}</span>
vrrp_instance <span class="token constant">VI_1</span> <span class="token punctuation">{</span>
state <span class="token constant">MASTER</span> # 备份服务器上将 <span class="token constant">MASTER</span> 改为 <span class="token constant">BACKUP</span>
<span class="token keyword">interface</span> ens33 <span class="token comment">//网卡</span>
virtual_router_id <span class="token number">51</span> # 主、备机的 virtual_router_id 必须相同
priority <span class="token number">100</span>
advert_int <span class="token number">1</span>
authentication <span class="token punctuation">{</span>
auth_type <span class="token constant">PASS</span>
auth_pass <span class="token number">1111</span>
<span class="token punctuation">}</span>
virtual_ipaddress <span class="token punctuation">{</span>
<span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.50</span> <span class="token comment">// VRRP H 虚拟地址</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><ol>
<li>开启nginx</li>
<li>开启keepalive</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>systemctl start keepalived<span class="token punctuation">.</span>service
</code></pre></div><ol>
<li>测试 使用192.168.1.50访问，若可以访问将master主机keepalived以及nginx关闭，再进行访问，关闭命令如下</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>systemctl stop keepalived<span class="token punctuation">.</span>service
<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span>s stop

</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030238.png" alt="在这里插入图片描述"></p>
<h2>nginx原理解析</h2>
<p>我们可以使用以下命令可以看到nginx的进程数</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>ps <span class="token operator">-</span>ef <span class="token operator">|</span>grep nginx

</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030031746.png" alt="image-20220903003104104"></p>
<p>可以看出nginx占用了两个进程，一个是master，一个是worker，在我们发起请求到nginx时，nginx的master会收到该请求，并将请求发送给每个worker，所有worker会参与争抢。某个worker得到该请求后，若该请求是个代理请求，worker则会转发该请求到目标服务器。如下图所示： <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030031942.png" alt="在这里插入图片描述"> 那么问题来了，一个master搭配多个worker的好处有哪些呢？</p>
<ol>
<li>热部署时，刷新配置不影响正在工作的worker。比如，我们当前这台nginx正在工作。某个worker正在担任某个服务器代理。此时，我们在nginx配置中添加一个新的代理工作。使用 <code>./nginx -s reload</code>完成nginx重新加载，这时候就会又新的worker争抢这份工作。而之前已有工作的worker却不会收到影响。</li>
<li>每个worker是独立的进程。当某个worker出现问题时，其他worker不会收到影响。</li>
</ol>
<p>由此我们又会问，那么设置几个worker数为宜呢？ 与cpu数相等即可。比如八核就设置八个。</p>
<h2>杀死nginx所有进程</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>kill -9 $(ps aux | grep 'nginx' | grep -v grep | tr -s ' '| cut -d ' ' -f 2)
</code></pre></div><h2>nginx其他问题</h2>
<p>(1) 发送一个请求时，master会占用worker几个连接数。</p>
<p>当只是请求静态资源时，只有<code>请求结果，返回结果</code>这样一趟也就是两个请求。若作为代理，则是<code>master-&gt;worker-&gt;目标服务器</code>+<code>目标服务器-&gt;worker-&gt;master</code>计算箭头数则是4个请求。</p>
<p>(2)假设nginx有一个master，和四个worker ，每个worker支持最大连接数为1024，支持的最大并发数为多少？ 普通静态访问为：<code>4*1024/2</code>(除2原因是因为一个静态请求有一趟往返，有一半的连接数处理返回结果了) 反向代理则是 <code>4*1024/4</code>(与上同理)</p>
<h2>常见问题</h2>
<h3>nginx配置不生效</h3>
<h4>问题简述</h4>
<p>笔者在这段时间进行nginx配置时，进行正确的配置却发现配置没有生效，不断查看配置和reload没有发现问题所在。</p>
<h4>解决方案</h4>
<p>经过大佬排查很可能是nginx配置没有生效，将nginx所有进程杀死并重启nginx后配置就生效了，所以面对这类这类问题，在一切配置和部署方式都是正确的情况下，我们排查方向要从是否正确运行的方向进行思考。</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030024451.png" type="image/png"/>
    </item>
    <item>
      <title>Nginx的安装</title>
      <link>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Nginx/Nginx%E7%9A%84%E5%AE%89%E8%A3%85.html</link>
      <guid>https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Nginx/Nginx%E7%9A%84%E5%AE%89%E8%A3%85.html</guid>
      <source url="https://maijunxuan.cn/rss.xml">Nginx的安装</source>
      <description>Nginx的安装 1. gcc -v查看是否已经安装，若无则安装gcc编译器 2. PCRE(Perl Compatible Regular Expressions)是一个 Perl 库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库。 注：笔者在某次安装...</description>
      <pubDate>Sun, 04 Sep 2022 18:30:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. gcc -v查看是否已经安装，若无则安装gcc编译器</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> gcc
</code></pre></div><h2>2. PCRE(Perl Compatible Regular Expressions)是一个 Perl 库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库。</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>  yum <span class="token function">install</span> pcre-devel
</code></pre></div><p><strong>注</strong>：笔者在某次安装时遇到了下面的问题，排查是repo配错了，所以后续配置需要留心自己仓库配置是否与自己centos版本一致</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> ./configure: error: the HTTP rewrite module requires the PCRE library. You can either disable the module by using --without-http_rewrite_module option, or install the PCRE library into the system, or build the PCRE library statically from the source with nginx by using --with-pcre=&lt;path&gt; option
</code></pre></div><h2>3.zlib 库提供了很多种压缩和解压缩的方式，nginx 使用 zlib 对 http 包的内容进行 gzip，所以需要在 linux 上安装 zlib 库。</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> zlib zlib-devel
</code></pre></div><h2>4. OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。nginx 不仅支持 http 协议，还支持 https（即在 ssl 协议上传输 http），所以需要在 linux安装 openssl 库。</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> yum <span class="token function">install</span> openssl openssl-devel
</code></pre></div><h2>5.获取nginx资源</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> <span class="token function">wget</span> http://learning.happymmall.com/nginx/linux-nginx-1.10.2.tar.gz
</code></pre></div><h2>5.解压缩nginx资源</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  tar <span class="token operator">-</span>zxvf linux<span class="token operator">-</span>nginx<span class="token operator">-</span><span class="token number">1.10</span><span class="token number">.2</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz
</code></pre></div><h2>6. 使用 configure 命令创建一 makeFile 文件。</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>  <span class="token builtin class-name">cd</span> nginx-1.10.2/
  ./configure
</code></pre></div><h2>7. 编译</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>  <span class="token function">make</span>
</code></pre></div><h2>8. 安装</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> <span class="token function">make</span> <span class="token function">install</span>
</code></pre></div><h2>9. 开启服务并测试</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code> <span class="token builtin class-name">cd</span> /usr/local/nginx/
  <span class="token builtin class-name">cd</span> sbin/
 ./nginx
</code></pre></div><h2>测试</h2>
<p>因为nginx默认为80端口，所以在浏览器上输入对应ip地址即可访问</p>
<p>注意，若虚拟机里可以访问nginx的界面，而主机无法访问的话，有可能是80端口未开放的原因。若读者使用的系统是centos7可以使用如下命令开启80端口。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>zone<span class="token operator">=</span><span class="token keyword">public</span> <span class="token operator">--</span>add<span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanent  

# 命令含义：

<span class="token operator">--</span>zone #作用域

<span class="token operator">--</span>add<span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token operator">/</span>tcp  #添加端口，格式为：端口<span class="token operator">/</span>通讯协议

<span class="token operator">--</span>permanent   #永久生效，没有此参数重启后失效

# 重启防火墙

    systemctl stop firewalld<span class="token punctuation">.</span>service  
    systemctl start firewalld<span class="token punctuation">.</span>service  

# 查看端口是否开放
firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>list<span class="token operator">-</span>ports

</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220920053519138.png" alt="image-20220920053519138"></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/image-20220920053519138.png" type="image/png"/>
    </item>
  </channel>
</rss>