import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as t}from"./app-9KrR2QYT.js";const e={};function r(o,s){return t(),a("div",null,[...s[0]||(s[0]=[i('<h1 id="mvcc实现原理" tabindex="-1"><a class="header-anchor" href="#mvcc实现原理"><span>MVCC实现原理</span></a></h1><h2 id="一、什么是多版本并发控制" tabindex="-1"><a class="header-anchor" href="#一、什么是多版本并发控制"><span>一、什么是多版本并发控制</span></a></h2><p><strong>多版本并发控制</strong>技术的英文全称是 <strong>Multiversion Concurrency Control</strong>，简称 <strong>MVCC</strong>。</p><p><strong>多版本并发控制（MVCC）</strong> 是通过保存数据在某个时间点的快照来实现并发控制的。也就是说，不管事务执行多长时间，事务内部看到的数据是不受其它事务影响的，根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。</p><p>简单来说，<strong>多版本并发控制</strong> 的思想就是保存数据的历史版本，通过对数据行的多个版本管理来实现数据库的并发控制。这样我们就可以通过比较版本号决定数据是否显示出来，读取数据的时候不需要加锁也可以保证事务的隔离效果。</p><p>可以认为 <strong>多版本并发控制（MVCC）</strong> 是行级锁的一个变种，但是它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。</p><p>MySQL的大多数事务型存储引擎实现的都不是简单的行级锁。基于提升并发性能的考虑，它们一般都同时实现了多版本并发控制（MVCC）。不仅是MySQL，包括Oracle、PostgreSQL等其他数据库系统也都实现了MVCC，但各自的实现机制不尽相同，因为MVCC没有一个统一的实现标准，典型的有<strong>乐观（optimistic）并发控制</strong>和<strong>悲观（pessimistic）并发控制</strong>。</p><h2 id="二、多版本并发控制解决了哪些问题" tabindex="-1"><a class="header-anchor" href="#二、多版本并发控制解决了哪些问题"><span>二、多版本并发控制解决了哪些问题</span></a></h2><h3 id="_1-读写之间阻塞的问题" tabindex="-1"><a class="header-anchor" href="#_1-读写之间阻塞的问题"><span>1. 读写之间阻塞的问题</span></a></h3><p>通过 MVCC 可以让读写互相不阻塞，即读不阻塞写，写不阻塞读，这样就可以提升事务并发处理能力。</p><blockquote><p>提高并发的演进思路：</p><ul><li>普通锁，只能串行执行；</li><li>读写锁，可以实现读读并发；</li><li>数据多版本并发控制，可以实现读写并发。</li></ul></blockquote><h3 id="_2-降低了死锁的概率" tabindex="-1"><a class="header-anchor" href="#_2-降低了死锁的概率"><span>2. 降低了死锁的概率</span></a></h3><p>因为 InnoDB 的 MVCC 采用了乐观锁的方式，读取数据时并不需要加锁，对于写操作，也只锁定必要的行。</p><h3 id="_3-解决一致性读的问题" tabindex="-1"><a class="header-anchor" href="#_3-解决一致性读的问题"><span>3. 解决一致性读的问题</span></a></h3><p>一致性读也被称为<strong>快照读</strong>，当我们查询数据库在某个时间点的快照时，只能看到这个时间点之前事务提交更新的结果，而不能看到这个时间点之后事务提交的更新结果。</p><h2 id="三、快照读与当前读" tabindex="-1"><a class="header-anchor" href="#三、快照读与当前读"><span>三、快照读与当前读</span></a></h2><p><strong>快照读（SnapShot Read）</strong> 是一种<strong>一致性不加锁的读</strong>，是<strong>InnoDB并发如此之高的核心原因之一</strong>。</p><blockquote><p>这里的<strong>一致性</strong>是指，事务读取到的数据，要么是<strong>事务开始前就已经存在的数据</strong>，要么是<strong>事务自身插入或者修改过的数据</strong>。</p></blockquote><p>不加锁的简单的 SELECT 都属于<strong>快照读</strong>，例如：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`SELECT * FROM t WHERE id=1`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>与 <strong>快照读</strong> 相对应的则是 <strong>当前读</strong>，<strong>当前读</strong>就是读取最新数据，而不是历史版本的数据。加锁的 SELECT 就属于当前读，例如：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> LOCK </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SHARE MODE;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FOR</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、innodb-的-mvcc-是如何工作的" tabindex="-1"><a class="header-anchor" href="#四、innodb-的-mvcc-是如何工作的"><span>四、InnoDB 的 MVCC 是如何工作的</span></a></h2><h3 id="_1-innodb-是如何存储记录的多个版本的" tabindex="-1"><a class="header-anchor" href="#_1-innodb-是如何存储记录的多个版本的"><span>1. InnoDB 是如何存储记录的多个版本的</span></a></h3><h4 id="事务版本号" tabindex="-1"><a class="header-anchor" href="#事务版本号"><span>事务版本号</span></a></h4><p>每开启一个事务，我们都会从数据库中获得一个事务 ID（也就是事务版本号），这个事务 ID 是自增长的，通过 ID 大小，我们就可以判断事务的时间顺序。</p><h4 id="行记录的隐藏列" tabindex="-1"><a class="header-anchor" href="#行记录的隐藏列"><span>行记录的隐藏列</span></a></h4><p>InnoDB 的叶子段存储了数据页，数据页中保存了行记录，而在行记录中有一些重要的隐藏字段：</p><ul><li><code>DB_ROW_ID</code>：6-byte，隐藏的行 ID，用来生成默认聚簇索引。如果我们创建数据表的时候没有指定聚簇索引，这时 InnoDB 就会用这个隐藏 ID 来创建聚集索引。采用聚簇索引的方式可以提升数据的查找效率。</li><li><code>DB_TRX_ID</code>：6-byte，操作这个数据的事务 ID，也就是最后一个对该数据进行插入或更新的事务 ID。</li><li><code>DB_ROLL_PTR</code>：7-byte，回滚指针，也就是指向这个记录的 Undo Log 信息。</li></ul><p><img src="http://segmentfault.com/img/bVbyzVU" alt="InnoDB数据记录隐藏列"></p><h4 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log"><span>Undo Log</span></a></h4><p>InnoDB 将行记录快照保存在了 Undo Log 里，我们可以在回滚段中找到它们，如下图所示：</p><p><img src="http://segmentfault.com/img/bVbyzV9" alt="Undo Log回滚历史记录"></p><p>从图中能看到回滚指针将数据行的所有快照记录都通过链表的结构串联了起来，每个快照的记录都保存了当时的 db_trx_id，也是那个时间点操作这个数据的事务 ID。这样如果我们想要找历史快照，就可以通过遍历回滚指针的方式进行查找。</p><h3 id="_2-在-可重复读-repeatable-read-隔离级别下-innodb-的-mvcc-是如何工作的" tabindex="-1"><a class="header-anchor" href="#_2-在-可重复读-repeatable-read-隔离级别下-innodb-的-mvcc-是如何工作的"><span>2. 在 <strong>可重复读（REPEATABLE READ）</strong> 隔离级别下， InnoDB 的 MVCC 是如何工作的</span></a></h3><h4 id="查询-select" tabindex="-1"><a class="header-anchor" href="#查询-select"><span>查询（SELECT）</span></a></h4><p>InnoDB 会根据以下两个条件检查每行记录：</p><ol><li>InnoDB只查找版本早于当前事务版本的数据行（也就是，行的系统版本号小于或等于事务的系统版本号），这样可以<strong>确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的</strong>。</li><li>行的删除版本要么未定义，要么大于当前事务版本号。这可以确保<strong>事务读取到的行，在事务开始之前未被删除</strong>。</li></ol><p>只有符合上述两个条件的记录，才能返回作为查询结果。</p><h4 id="插入-insert" tabindex="-1"><a class="header-anchor" href="#插入-insert"><span>插入（INSERT）</span></a></h4><p>InnoDB为新插入的每一行保存当前系统版本号作为行版本号。</p><h4 id="删除-delete" tabindex="-1"><a class="header-anchor" href="#删除-delete"><span>删除（DELETE）</span></a></h4><p>InnoDB为删除的每一行保存当前系统版本号作为行删除标识。 删除在内部被视为更新，行中的一个特殊位会被设置为已删除。</p><h4 id="更新-update" tabindex="-1"><a class="header-anchor" href="#更新-update"><span>更新（UPDATE）</span></a></h4><p>InnoDB为插入一行新记录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识。</p><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结"><span>五、总结</span></a></h2><p><strong>多版本并发控制（MVCC）</strong> 在一定程度上实现了<strong>读写并发</strong>，它只在 <strong>可重复读（REPEATABLE READ）</strong> 和 <strong>提交读（READ COMMITTED）</strong> 两个隔离级别下工作。其他两个隔离级别都和 MVCC 不兼容，因为 <strong>未提交读（READ UNCOMMITTED）</strong>，总是读取最新的数据行，而不是符合当前事务版本的数据行。而 <strong>可串行化（SERIALIZABLE）</strong> 则会对所有读取的行都加锁。</p><p><strong>行锁，并发，事务回滚</strong>等多种特性都和MVCC相关。</p>',48)])])}const l=n(e,[["render",r]]),d=JSON.parse('{"path":"/MySQL/MVCC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","title":"MVCC实现原理","lang":"zh-CN","frontmatter":{"description":"MVCC实现原理 一、什么是多版本并发控制 多版本并发控制技术的英文全称是 Multiversion Concurrency Control，简称 MVCC。 多版本并发控制（MVCC） 是通过保存数据在某个时间点的快照来实现并发控制的。也就是说，不管事务执行多长时间，事务内部看到的数据是不受其它事务影响的，根据事务开始的时间不同，每个事务对同一张表，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVCC实现原理\\",\\"image\\":[\\"http://segmentfault.com/img/bVbyzVU\\",\\"http://segmentfault.com/img/bVbyzV9\\"],\\"dateModified\\":\\"2023-03-21T08:17:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"maijunxuan\\",\\"email\\":\\"maijunxuan0309@gmail.com\\"}]}"],["meta",{"property":"og:url","content":"https://maijunxuan.cn/MySQL/MVCC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"麦俊轩的博客"}],["meta",{"property":"og:title","content":"MVCC实现原理"}],["meta",{"property":"og:description","content":"MVCC实现原理 一、什么是多版本并发控制 多版本并发控制技术的英文全称是 Multiversion Concurrency Control，简称 MVCC。 多版本并发控制（MVCC） 是通过保存数据在某个时间点的快照来实现并发控制的。也就是说，不管事务执行多长时间，事务内部看到的数据是不受其它事务影响的，根据事务开始的时间不同，每个事务对同一张表，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://segmentfault.com/img/bVbyzVU"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-21T08:17:12.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-21T08:17:12.000Z"}]]},"git":{"createdTime":1663601526000,"updatedTime":1679386632000,"contributors":[{"name":"MJX","username":"MJX","email":"1585225345@qq.com","commits":3,"url":"https://github.com/MJX"}]},"readingTime":{"minutes":5.72,"words":1716},"filePathRelative":"MySQL/MVCC实现原理.md","excerpt":"\\n<h2>一、什么是多版本并发控制</h2>\\n<p><strong>多版本并发控制</strong>技术的英文全称是 <strong>Multiversion Concurrency Control</strong>，简称 <strong>MVCC</strong>。</p>\\n<p><strong>多版本并发控制（MVCC）</strong> 是通过保存数据在某个时间点的快照来实现并发控制的。也就是说，不管事务执行多长时间，事务内部看到的数据是不受其它事务影响的，根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。</p>\\n<p>简单来说，<strong>多版本并发控制</strong> 的思想就是保存数据的历史版本，通过对数据行的多个版本管理来实现数据库的并发控制。这样我们就可以通过比较版本号决定数据是否显示出来，读取数据的时候不需要加锁也可以保证事务的隔离效果。</p>","autoDesc":true}');export{l as comp,d as data};
