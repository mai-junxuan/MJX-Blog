import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-2Nmlc3aW.js";const p={},e=t(`<h3 id="jdk动态代理和cglib代理" tabindex="-1"><a class="header-anchor" href="#jdk动态代理和cglib代理"><span>JDK动态代理和CGlib代理</span></a></h3><p>**JDK动态代理: **利用拦截器(拦截器必须实现InvocationHanlder)加上反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。</p><p><strong>CGLiB动态代理:</strong> 利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p><h4 id="何时使用jdk还是cglib" tabindex="-1"><a class="header-anchor" href="#何时使用jdk还是cglib"><span><strong>何时使用JDK还是CGLIB？</strong></span></a></h4><p>1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP。</p><p>2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP。</p><p>3、如果目标对象没有实现了接口，必须采用CGLIB库，Spring会自动在JDK动态代理和CGLIB之间转换。</p><h4 id="如何强制使用cglib实现aop" tabindex="-1"><a class="header-anchor" href="#如何强制使用cglib实现aop"><span><strong>如何强制使用CGLIB实现AOP？</strong></span></a></h4><p>1、添加CGLIB库(aspectjrt-xxx.jar、aspectjweaver-xxx.jar、cglib-nodep-xxx.jar) 2、在Spring配置文件中加入&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;</p><h4 id="jdk动态代理和cglib字节码生成的区别" tabindex="-1"><a class="header-anchor" href="#jdk动态代理和cglib字节码生成的区别"><span><strong>JDK动态代理和CGLIB字节码生成的区别？</strong></span></a></h4><p>1、JDK动态代理只能对实现了接口的类生成代理，而不能针对类。</p><p>2、CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，并覆盖其中方法实现增强，但是因为采用的是继承，所以该类或方法最好不要声明成final，对于final类或方法，是无法继承的。</p><h4 id="cglib比jdk快" tabindex="-1"><a class="header-anchor" href="#cglib比jdk快"><span><strong>CGlib比JDK快？</strong></span></a></h4><p>1、使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类， 在jdk6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理， 因为CGLib原理是动态生成被代理类的子类。</p><p>2、在jdk6、jdk7、jdk8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLIB代理效率，只有当进行大量调用的时候，jdk6和jdk7比CGLIB代理效率低一点，但是到jdk8的时候，jdk代理效率高于CGLIB代理，总之，每一次jdk版本升级，jdk代理效率都得到提升，而CGLIB代理消息确有点跟不上步伐。</p><h4 id="spring如何选择用jdk还是cglib" tabindex="-1"><a class="header-anchor" href="#spring如何选择用jdk还是cglib"><span><strong>Spring如何选择用JDK还是CGLiB？</strong></span></a></h4><p>1、当Bean实现接口时，Spring就会用JDK的动态代理。 2、当Bean没有实现接口时，Spring使用CGlib是实现。 3、可以强制使用CGlib（在spring配置中加入&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;）。</p><h4 id="jdk动态代理实现" tabindex="-1"><a class="header-anchor" href="#jdk动态代理实现"><span><strong>JDK动态代理实现</strong></span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserManager</span> <span class="token punctuation">{</span>
    <span class="token comment">//新增用户抽象方法</span>
    <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//删除用户抽象方法</span>
    <span class="token keyword">void</span> <span class="token function">delUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserManagerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserManager</span> <span class="token punctuation">{</span>
    <span class="token comment">//重写新增用户方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用了新增的方法！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;传入参数为 userName: &quot;</span><span class="token operator">+</span>userName<span class="token operator">+</span><span class="token string">&quot; password: &quot;</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//重写删除用户方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用了删除的方法！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;传入参数为 userName: &quot;</span><span class="token operator">+</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span><span class="token comment">//需要代理的目标对象</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;JDK动态代理，监听开始！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;JDK动态代理，监听结束！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//定义获取代理对象方法</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getJDKProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> targetObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//为目标对象target赋值</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> targetObject<span class="token punctuation">;</span>
        <span class="token comment">//JDK动态代理只能针对实现了接口的类进行代理，newProxyInstance 函数所需参数就可看出</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>targetObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JdkProxy</span> jdkProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdkProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化JDKProxy对象</span>
        <span class="token class-name">UserManager</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserManager</span><span class="token punctuation">)</span> jdkProxy<span class="token punctuation">.</span><span class="token function">getJDKProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserManagerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取代理对象</span>
        user<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行新增方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cglib实现" tabindex="-1"><a class="header-anchor" href="#cglib实现"><span><strong>CGlib实现</strong></span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span><span class="token comment">//需要代理的目标对象</span>

    <span class="token comment">//重写拦截方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cglib动态代理，监听开始！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法执行，参数：target 目标对象 arr参数数组</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cglib动态代理，监听结束！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//定义获取代理对象方法</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getCglibProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> objectTarget<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//为目标对象target赋值</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> objectTarget<span class="token punctuation">;</span>
        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置父类,因为Cglib是针对指定的类生成一个子类，所以需要指定父类</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>objectTarget<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置回调</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建并返回代理对象</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CglibProxy</span> cglib <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化CglibProxy对象</span>
        <span class="token class-name">UserManager</span> user <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token class-name">UserManager</span><span class="token punctuation">)</span> cglib<span class="token punctuation">.</span><span class="token function">getCglibProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserManagerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取代理对象</span>
        user<span class="token punctuation">.</span><span class="token function">delUser</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行删除方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","JDK动态代理和CGlib代理.html.vue"]]),d=JSON.parse('{"path":"/%E6%A1%86%E6%9E%B6/Spring/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8CCGlib%E4%BB%A3%E7%90%86.html","title":"","lang":"zh-CN","frontmatter":{"description":"JDK动态代理和CGlib代理 **JDK动态代理: **利用拦截器(拦截器必须实现InvocationHanlder)加上反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。 CGLiB动态代理: 利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。 何时使用JDK还是CGL...","head":[["meta",{"property":"og:url","content":"https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8CCGlib%E4%BB%A3%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"麦俊轩的博客"}],["meta",{"property":"og:description","content":"JDK动态代理和CGlib代理 **JDK动态代理: **利用拦截器(拦截器必须实现InvocationHanlder)加上反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。 CGLiB动态代理: 利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。 何时使用JDK还是CGL..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-09-19T15:32:06.000Z"}],["meta",{"property":"article:author","content":"maijunxuan"}],["meta",{"property":"article:modified_time","content":"2022-09-19T15:32:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-09-19T15:32:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"maijunxuan\\",\\"email\\":\\"maijunxuan0309@gmail.com\\"}]}"]]},"headers":[{"level":3,"title":"JDK动态代理和CGlib代理","slug":"jdk动态代理和cglib代理","link":"#jdk动态代理和cglib代理","children":[]}],"git":{"createdTime":1663601526000,"updatedTime":1663601526000,"contributors":[{"name":"MJX","email":"1585225345@qq.com","commits":1}]},"readingTime":{"minutes":3.73,"words":1119},"filePathRelative":"框架/Spring/JDK动态代理和CGlib代理.md","localizedDate":"2022年9月19日","excerpt":"<h3>JDK动态代理和CGlib代理</h3>\\n<p>**JDK动态代理: **利用拦截器(拦截器必须实现InvocationHanlder)加上反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。</p>\\n<p><strong>CGLiB动态代理:</strong> 利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p>\\n<h4><strong>何时使用JDK还是CGLIB？</strong></h4>\\n<p>1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP。</p>\\n<p>2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP。</p>","autoDesc":true}');export{r as comp,d as data};
