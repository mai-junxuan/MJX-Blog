import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as p,o as n}from"./app-DygdxmPh.js";const r={};function o(s,e){return n(),t("div",null,[...e[0]||(e[0]=[p('<h4 id="一条sql的执行过程" tabindex="-1"><a class="header-anchor" href="#一条sql的执行过程"><span>一条SQL的执行过程</span></a></h4><h4 id="_1-连接器" tabindex="-1"><a class="header-anchor" href="#_1-连接器"><span>1) 连接器</span></a></h4><p>连接器主要和身份认证和权限相关的功能相关，就好比一个级别很高的门卫一样。</p><p>主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即使管理员修改了该用户的权限，该用户也是不受影响的。</p><h4 id="查询缓存-mysql-8-0-版本后移除" tabindex="-1"><a class="header-anchor" href="#查询缓存-mysql-8-0-版本后移除"><span>查询缓存(MySQL 8.0 版本后移除)</span></a></h4><p>查询缓存主要用来缓存我们所执行的 SELECT 语句以及该语句的结果集。</p><p>连接建立后，执行查询语句的时候，会先查询缓存，MySQL 会先校验这个 SQL 是否执行过，以 Key-Value 的形式缓存在内存中，Key 是查询预计，Value 是结果集。如果缓存 key 被命中，就会直接返回给客户端，如果没有命中，就会执行后续的操作，完成后也会把结果缓存起来，方便下一次调用。当然在真正执行缓存查询的时候还是会校验用户的权限，是否有该表的查询条件。</p><p>MySQL 查询不建议使用缓存，因为查询缓存失效在实际业务场景中可能会非常频繁，假如你对一个表更新的话，这个表上的所有的查询缓存都会被清空。对于不经常更新的数据来说，使用缓存还是可以的。</p><p>所以，一般在大多数情况下我们都是不推荐去使用查询缓存的。</p><p>MySQL 8.0 版本后删除了缓存的功能，官方也是认为该功能在实际的应用场景比较少，所以干脆直接删掉了。</p><h4 id="_3-分析器" tabindex="-1"><a class="header-anchor" href="#_3-分析器"><span>3) 分析器</span></a></h4><p>MySQL 没有命中缓存，那么就会进入分析器，分析器主要是用来分析 SQL 语句是来干嘛的，分析器也会分为几步：</p><p><strong>第一步，词法分析</strong>，一条 SQL 语句有多个字符串组成，首先要提取关键字，比如 select，提出查询的表，提出字段名，提出查询条件等等。做完这些操作后，就会进入第二步。</p><p><strong>第二步，语法分析</strong>，主要就是判断你输入的 SQL 是否正确，是否符合 MySQL 的语法。</p><p>完成这 2 步之后，MySQL 就准备开始执行了，但是如何执行，怎么执行是最好的结果呢？这个时候就需要优化器上场了。</p><h4 id="_4-优化器" tabindex="-1"><a class="header-anchor" href="#_4-优化器"><span>4) 优化器</span></a></h4><p>优化器的作用就是它认为的最优的执行方案去执行（有时候可能也不是最优，这篇文章涉及对这部分知识的深入讲解），比如多个索引的时候该如何选择索引，多表查询的时候如何选择关联顺序等。</p><p>可以说，经过了优化器之后可以说这个语句具体该如何执行就已经定下来。</p><h4 id="_5-执行器" tabindex="-1"><a class="header-anchor" href="#_5-执行器"><span>5) 执行器</span></a></h4><p>当选择了执行方案后，MySQL 就准备开始执行了，首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息，如果有权限，就会去调用引擎的接口，返回接口执行的结果。</p>',20)])])}const h=a(r,[["render",o]]),m=JSON.parse('{"path":"/MySQL/%E4%B8%80%E6%9D%A1SQL%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.html","title":"","lang":"zh-CN","frontmatter":{"description":"一条SQL的执行过程 1) 连接器 连接器主要和身份认证和权限相关的功能相关，就好比一个级别很高的门卫一样。 主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即使管理员...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-09-19T15:32:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"maijunxuan\\",\\"email\\":\\"maijunxuan0309@gmail.com\\"}]}"],["meta",{"property":"og:url","content":"https://maijunxuan.cn/MySQL/%E4%B8%80%E6%9D%A1SQL%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"麦俊轩的博客"}],["meta",{"property":"og:description","content":"一条SQL的执行过程 1) 连接器 连接器主要和身份认证和权限相关的功能相关，就好比一个级别很高的门卫一样。 主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即使管理员..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-09-19T15:32:06.000Z"}],["meta",{"property":"article:modified_time","content":"2022-09-19T15:32:06.000Z"}]]},"git":{"createdTime":1663601526000,"updatedTime":1663601526000,"contributors":[{"name":"MJX","username":"MJX","email":"1585225345@qq.com","commits":1,"url":"https://github.com/MJX"}]},"readingTime":{"minutes":2.96,"words":888},"filePathRelative":"MySQL/一条SQL的执行过程.md","excerpt":"<h4>一条SQL的执行过程</h4>\\n<h4>1) 连接器</h4>\\n<p>连接器主要和身份认证和权限相关的功能相关，就好比一个级别很高的门卫一样。</p>\\n<p>主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即使管理员修改了该用户的权限，该用户也是不受影响的。</p>\\n<h4>查询缓存(MySQL 8.0 版本后移除)</h4>\\n<p>查询缓存主要用来缓存我们所执行的 SELECT 语句以及该语句的结果集。</p>","autoDesc":true}');export{h as comp,m as data};
