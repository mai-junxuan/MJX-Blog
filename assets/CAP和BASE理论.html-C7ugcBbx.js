import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as n,o as p}from"./app-BBKkSbHx.js";const i={};function r(o,a){return p(),t("div",null,[...a[0]||(a[0]=[n('<h1 id="分布式基础之cap和base理论" tabindex="-1"><a class="header-anchor" href="#分布式基础之cap和base理论"><span>分布式基础之CAP和BASE理论</span></a></h1><h2 id="cap理论" tabindex="-1"><a class="header-anchor" href="#cap理论"><span>CAP理论</span></a></h2><p>CAP是一个已经经过证实的理论：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项，其中P是网络的特性，所以只能选择AP或者CP。</p><h3 id="一致性" tabindex="-1"><a class="header-anchor" href="#一致性"><span>一致性</span></a></h3><p>我们知道ACID中事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行前后，数据库都必须处于一致性状态。也就是说，事务的执行结果必须是使数据库从一个一致性状态转变到另一个一致性状态。</p><p>和ACID中的一致性不同，分布式环境中的一致性是指数据在多个副本之间是否能够保持一致的特性。</p><p>分布式系统中，数据一般会存在不同节点的副本中，如果对第一个节点的数据成功进行了更新操作，而第二个节点上的数据却没有得到相应更新，这时候读取第二个节点的数据依然是更新前的数据，即脏数据，这就是分布式系统数据不一致的情况。 在分布式系统中，如果能够做到针对一个数据项的更新操作执行成功后，所有的用户都能读取到最新的值，那么这样的系统就被认为具有强一致性（或严格的一致性）。</p><h3 id="可用性" tabindex="-1"><a class="header-anchor" href="#可用性"><span>可用性</span></a></h3><p>可用性是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果，如果超过了这个时间范围，那么系统就被认为是不可用的。</p><p>“有限的时间内”是在系统的运行指标，不同系统会有差别。例如搜索引擎通常在0.5秒内需要给出用户检索结果。</p><p>“返回结果”是可用性的另一个重要指标，它要求系统完成对用户请求的处理后，返回一个正常的响应结果，要明确的反映出对请求处理的成功或失败。如果返回的结果是系统错误，比如&quot;OutOfMemory&quot;等报错信息，则认为此时系统是不可用的。</p><h3 id="分区容错性" tabindex="-1"><a class="header-anchor" href="#分区容错性"><span>分区容错性</span></a></h3><p>一个分布式系统中，节点组成的网络本来应该是连通的。然而可能因为某些故障，使得有些节点之间不连通了，整个网络就分成了几块区域，而数据就散布在了这些不连通的区域中，这就叫分区。</p><p>当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。</p><p>提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项仍然能在其他区中读取，容忍性就提高了。然而，把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。</p><p>总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。</p><h3 id="面临的问题" tabindex="-1"><a class="header-anchor" href="#面临的问题"><span>面临的问题</span></a></h3><p>对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到N个9，即保证P和A，舍弃C。</p><h2 id="base理论" tabindex="-1"><a class="header-anchor" href="#base理论"><span>BASE理论</span></a></h2><p>BASE理论是对CAP理论的延伸，思想是即使无法做到强一致性（CAP的一致性就是强一致性），但可以采用适当的采取弱一致性，即最终一致性。</p><p>BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。</p><h3 id="基本可用" tabindex="-1"><a class="header-anchor" href="#基本可用"><span>基本可用</span></a></h3><p>基本可用是指分布式系统在出现故障的时候，允许损失部分可用性（例如响应时间、功能上的可用性），允许损失部分可用性。需要注意的是，基本可用绝不等价于系统不可用。</p><p>响应时间上的损失：正常情况下搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了1~2秒。</p><p>功能上的损失：购物网站在购物高峰（如双十一）时，为了保护系统的稳定性，部分消费者可能会被引导到一个降级页面。</p><h3 id="软状态" tabindex="-1"><a class="header-anchor" href="#软状态"><span>软状态</span></a></h3><p>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据会有多个副本，允许不同副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现。</p><h3 id="最终一致性" tabindex="-1"><a class="header-anchor" href="#最终一致性"><span>最终一致性</span></a></h3><p>最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</p>',29)])])}const h=e(i,[["render",r]]),l=JSON.parse('{"path":"/%E5%88%86%E5%B8%83%E5%BC%8F/CAP%E5%92%8CBASE%E7%90%86%E8%AE%BA.html","title":"分布式基础之CAP和BASE理论","lang":"zh-CN","frontmatter":{"description":"分布式基础之CAP和BASE理论 CAP理论 CAP是一个已经经过证实的理论：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项，其中P是网络的特性，所以只能选择AP或者CP。 一致性 我们知道ACID中事务的一致性是指事务的执行不能破坏...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式基础之CAP和BASE理论\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-09-05T16:38:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"maijunxuan\\",\\"email\\":\\"maijunxuan0309@gmail.com\\"}]}"],["meta",{"property":"og:url","content":"https://maijunxuan.cn/%E5%88%86%E5%B8%83%E5%BC%8F/CAP%E5%92%8CBASE%E7%90%86%E8%AE%BA.html"}],["meta",{"property":"og:site_name","content":"麦俊轩的博客"}],["meta",{"property":"og:title","content":"分布式基础之CAP和BASE理论"}],["meta",{"property":"og:description","content":"分布式基础之CAP和BASE理论 CAP理论 CAP是一个已经经过证实的理论：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项，其中P是网络的特性，所以只能选择AP或者CP。 一致性 我们知道ACID中事务的一致性是指事务的执行不能破坏..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-09-05T16:38:25.000Z"}],["meta",{"property":"article:modified_time","content":"2022-09-05T16:38:25.000Z"}]]},"git":{"createdTime":1662395905000,"updatedTime":1662395905000,"contributors":[{"name":"MJX","username":"MJX","email":"1585225345@qq.com","commits":1,"url":"https://github.com/MJX"}]},"readingTime":{"minutes":4.86,"words":1458},"filePathRelative":"分布式/CAP和BASE理论.md","excerpt":"\\n<h2>CAP理论</h2>\\n<p>CAP是一个已经经过证实的理论：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项，其中P是网络的特性，所以只能选择AP或者CP。</p>\\n<h3>一致性</h3>\\n<p>我们知道ACID中事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行前后，数据库都必须处于一致性状态。也就是说，事务的执行结果必须是使数据库从一个一致性状态转变到另一个一致性状态。</p>\\n<p>和ACID中的一致性不同，分布式环境中的一致性是指数据在多个副本之间是否能够保持一致的特性。</p>","autoDesc":true}');export{h as comp,l as data};
