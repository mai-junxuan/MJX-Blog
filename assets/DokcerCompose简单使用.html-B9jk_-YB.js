import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as i,b as a,d as n,e as c,a as s}from"./app-2Nmlc3aW.js";const o={},u=s(`<h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h1><p>我们的使用docker部署微服务时，如果每个微服务都要手动启停，效率是非常低的，所以我们需要一个工具来一键管理这庞大的微服务，Docker Compose就是最好的帮手。</p><h1 id="安装docker-compose" tabindex="-1"><a class="header-anchor" href="#安装docker-compose"><span>安装Docker Compose</span></a></h1><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h2><h3 id="安装docker-compose-1" tabindex="-1"><a class="header-anchor" href="#安装docker-compose-1"><span>安装Docker Compose</span></a></h3><p>如下命令所示，这条命令会自动安装适应系统版本的compose</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/download/1.10.0/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="为命令添加可执行权限" tabindex="-1"><a class="header-anchor" href="#为命令添加可执行权限"><span>为命令添加可执行权限</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看是否安装成功" tabindex="-1"><a class="header-anchor" href="#查看是否安装成功"><span>查看是否安装成功</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如下图所示，显示版本号即说明安装成功了</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010152067.png" alt="在这里插入图片描述"></p><h3 id="安装命令补全工具" tabindex="-1"><a class="header-anchor" href="#安装命令补全工具"><span>安装命令补全工具</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://raw.githubusercontent.com/docker/compose/<span class="token variable"><span class="token variable">$(</span><span class="token function">docker-compose</span> version--short<span class="token variable">)</span></span>/contrib/completion/bash/docker-compose <span class="token parameter variable">-o</span> /etc/bash_completion.d/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="一个快速入门的例子" tabindex="-1"><a class="header-anchor" href="#一个快速入门的例子"><span>一个快速入门的例子</span></a></h1><h2 id="步骤-1" tabindex="-1"><a class="header-anchor" href="#步骤-1"><span>步骤</span></a></h2><h3 id="打个jar包扔到服务器上" tabindex="-1"><a class="header-anchor" href="#打个jar包扔到服务器上"><span>打个jar包扔到服务器上</span></a></h3>`,18),r={href:"http://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker.git",target:"_blank",rel:"noopener noreferrer"},d=s(`<p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010153309.png" alt="image-20221001015252436"></p><h3 id="编写一个dockerfile" tabindex="-1"><a class="header-anchor" href="#编写一个dockerfile"><span>编写一个Dockerfile</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>FROM java:8
VOLUME /tmp
ADD microservice-discovery-eureka-0.0.1.jar app.jar
RUN <span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;touch /app.jar&#39;</span>
EXPOSE <span class="token number">8761</span>
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>,<span class="token string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="token string">&quot;-jar&quot;</span>,<span class="token string">&quot;/app.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写一个docker-compose-yml" tabindex="-1"><a class="header-anchor" href="#编写一个docker-compose-yml"><span>编写一个docker-compose.yml</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>version: <span class="token string">&#39;2&#39;</span>
services:
  eureka: <span class="token comment"># 指定服务名称</span>
    build: <span class="token builtin class-name">.</span> <span class="token comment"># 使用当前路径的Dockerfile</span>
    ports:
      - <span class="token string">&quot;8761:8761&quot;</span> <span class="token comment"># 类似与docker run -p 的端口映射</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用docker-compose-up-启动" tabindex="-1"><a class="header-anchor" href="#使用docker-compose-up-启动"><span>使用docker-compose up 启动</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>如下图所示，使用ip:8761即可进入eureka界面，说明配置完成了</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010153027.png" alt="image-20221001015321845"></p><h1 id="来聊聊docker-compose-yml常用指令" tabindex="-1"><a class="header-anchor" href="#来聊聊docker-compose-yml常用指令"><span>来聊聊Docker-compose.yml常用指令</span></a></h1><h2 id="image" tabindex="-1"><a class="header-anchor" href="#image"><span>image</span></a></h2><p>指定镜像名称或者镜像id，如果该镜像在本地不存在，Compose会尝试pull下来。</p><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>image: <span class="token function">java</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="build" tabindex="-1"><a class="header-anchor" href="#build"><span>build</span></a></h2><p>指定Dockerfile的路径，如下所示，这就说明Dockerfile文件在当前目录的dir目录下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>build: ./dir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="command" tabindex="-1"><a class="header-anchor" href="#command"><span>command</span></a></h2><p>覆盖之前的容器启动后默认执行的指令 示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>command: bundle <span class="token builtin class-name">exec</span> thin <span class="token parameter variable">-p</span> <span class="token number">3000</span>
<span class="token comment"># 也可以是一个list，类似于Dockerfile总的CMD指令，格式如下：</span>

command: <span class="token punctuation">[</span>bundle, exec, thin, -p, <span class="token number">3000</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links"><span>links</span></a></h2><p>链接到其他服务中的容器。可以指定服务名称然后给他起一个别名来使用，就有点mysql语法中的as的意思，如下所示连接到db，我们给他起了哥别名database，后续需要使用这个链接的时候一律使用database：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>web:
  links:
   - db
   - db:database
   - redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="external-links" tabindex="-1"><a class="header-anchor" href="#external-links"><span>external_links</span></a></h2><p>表示链接到docker-compose.yml外部的容器，甚至并非Compose管理的容器，特别是对于那些提供共享容器或共同服务。格式跟links类似，示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>external_links:
 - redis_1
 - project_db_1:mysql
 - project_db_1:postgresql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ports" tabindex="-1"><a class="header-anchor" href="#ports"><span>ports</span></a></h2><p>暴露端口信息。使用宿主端口:容器端口的格式，或者仅仅指定容器的端口（此时宿主机将会随机指定端口），类似于docker run -p ，示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ports:
 - <span class="token string">&quot;3000&quot;</span>
 - <span class="token string">&quot;3000-3005&quot;</span>
 - <span class="token string">&quot;8000:8000&quot;</span>
 - <span class="token string">&quot;9090-9091:8080-8081&quot;</span>
 - <span class="token string">&quot;49100:22&quot;</span>
 - <span class="token string">&quot;127.0.0.1:8001:8001&quot;</span>
 - <span class="token string">&quot;127.0.0.1:5000-5010:5000-5010&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="expose" tabindex="-1"><a class="header-anchor" href="#expose"><span>expose</span></a></h2><p>暴露端口，只将端口暴露给连接的服务，而不暴露给宿主机，示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>expose:
 - <span class="token string">&quot;3000&quot;</span>
 - <span class="token string">&quot;8000&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="volumes" tabindex="-1"><a class="header-anchor" href="#volumes"><span>volumes</span></a></h2><p>卷挂载路径设置。可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST<img src="http://github.githubassets.com/images/icons/emoji/CONTAINER.png" alt="CONTAINER">ro）。示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>volumes:
  <span class="token comment"># Just specify a path and let the Engine create a volume</span>
  - /var/lib/mysql

  <span class="token comment"># Specify an absolute path mapping</span>
  - /opt/data:/var/lib/mysql

  <span class="token comment"># Path on the host, relative to the Compose file</span>
  - ./cache:/tmp/cache

  <span class="token comment"># User-relative path</span>
  - ~/configs:/etc/configs/:ro

  <span class="token comment"># Named volume</span>
  - datavolume:/var/lib/mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="volumes-from" tabindex="-1"><a class="header-anchor" href="#volumes-from"><span>volumes_from</span></a></h2><p>从另一个服务或者容器挂载卷。可以指定只读或者可读写，如果访问模式没有指定，则默认是可读写。示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>volumes_from:
 - service_name
 - service_name:ro
 - container:container_name
 - container:container_name:rw
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="environment" tabindex="-1"><a class="header-anchor" href="#environment"><span>environment</span></a></h2><p>设置环境变量。可以使用数组或者字典两种方式。只有一个key的环境变量可以在运行Compose的机器上找到对应的值，这有助于加密的或者特殊主机的值。示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>environment:
  RACK_ENV: development
  SHOW: <span class="token string">&#39;true&#39;</span>
  SESSION_SECRET:

environment:
  - <span class="token assign-left variable">RACK_ENV</span><span class="token operator">=</span>development
  - <span class="token assign-left variable">SHOW</span><span class="token operator">=</span>true
  - SESSION_SECRET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="env-file" tabindex="-1"><a class="header-anchor" href="#env-file"><span>env_file</span></a></h2><p>从文件中获取环境变量，可以为单独的文件路径或列表。如果通过 docker-compose -f FILE 指定了模板文件，则 env_file 中路径会基于模板文件路径。如果有变量名称与 environment 指令冲突，则以envirment 为准。示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>env_file: .env

env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/secrets.env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="extends" tabindex="-1"><a class="header-anchor" href="#extends"><span>extends</span></a></h2><p>继承另一个服务，基于已有的服务进行扩展。</p><h2 id="net" tabindex="-1"><a class="header-anchor" href="#net"><span>net</span></a></h2><p>设置网络模式。示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>net: <span class="token string">&quot;bridge&quot;</span>
net: <span class="token string">&quot;host&quot;</span>
net: <span class="token string">&quot;none&quot;</span>
net: <span class="token string">&quot;container:[service name or container name/id]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dns" tabindex="-1"><a class="header-anchor" href="#dns"><span>dns</span></a></h2><p>配置dns服务器。可以是一个值，也可以是一个列表。示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>dns: <span class="token number">8.8</span>.8.8
dns:
  - <span class="token number">8.8</span>.8.8
  - <span class="token number">9.9</span>.9.9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dns-search" tabindex="-1"><a class="header-anchor" href="#dns-search"><span>dns_search</span></a></h2><p>配置DNS的搜索域，可以是一个值，也可以是一个列表，示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>dns_search: example.com
dns_search:
  - dc1.example.com
  - dc2.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="更进一步-使用docker编排微服务" tabindex="-1"><a class="header-anchor" href="#更进一步-使用docker编排微服务"><span>更进一步，使用Docker编排微服务</span></a></h1><h2 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析"><span>需求分析</span></a></h2><p>根据笔者了解的资料，为了专注于了解Docker编排微服务，笔者这个实验只用两个服务进行演示，即源码中的eureka模块和user模块，如下图所示两个</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010154468.png" alt="image-20221001015418328"></p><h2 id="步骤-2" tabindex="-1"><a class="header-anchor" href="#步骤-2"><span>步骤</span></a></h2><h3 id="两个模块的pom文件都添加构建docker镜像的配置" tabindex="-1"><a class="header-anchor" href="#两个模块的pom文件都添加构建docker镜像的配置"><span>两个模块的pom文件都添加构建docker镜像的配置</span></a></h3><h4 id="eureka模块" tabindex="-1"><a class="header-anchor" href="#eureka模块"><span>eureka模块</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 添加spring-boot的maven插件 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>

      <span class="token comment">&lt;!-- 添加docker-maven插件 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forceTags</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>forceTags</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">&gt;</span></span>zhangshiyu3007/microservice-discovery-eureka:0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>baseImage</span><span class="token punctuation">&gt;</span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>baseImage</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entryPoint</span><span class="token punctuation">&gt;</span></span>[&quot;java&quot;, &quot;-jar&quot;, &quot;/\${project.build.finalName}.jar&quot;]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entryPoint</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>\${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>\${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="user模块" tabindex="-1"><a class="header-anchor" href="#user模块"><span>user模块</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 添加spring-boot的maven插件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>

      <span class="token comment">&lt;!-- 添加docker-maven插件 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forceTags</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>forceTags</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">&gt;</span></span>zhangshiyu3007/microservice-provider-user:0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>baseImage</span><span class="token punctuation">&gt;</span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>baseImage</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entryPoint</span><span class="token punctuation">&gt;</span></span>[&quot;java&quot;, &quot;-jar&quot;, &quot;/\${project.build.finalName}.jar&quot;]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entryPoint</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>\${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>\${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写docker-compose-yml" tabindex="-1"><a class="header-anchor" href="#编写docker-compose-yml"><span>编写docker-compose.yml</span></a></h3><p>由于docker中网络模式默认未bridge，而各个容器的ip又不同，因此使用localhost访问是不行的，所以笔者在配置user模块的link时，使用<code>microservice-discovery-eureka</code>并起了个别名<code>discovery</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>version: <span class="token string">&#39;2&#39;</span>        <span class="token comment"># 表示该docker-compose.yml文件使用的是Version 2 file format</span>
services:           <span class="token comment"># Version 2 file format的固定写法，为project定义服务。</span>
  microservice-discovery-eureka:                                  <span class="token comment"># 指定服务名称</span>
    image: zhangshiyu3007/microservice-discovery-eureka:0.0.1    <span class="token comment"># 指定服务所使用的镜像</span>
    ports:                                                        <span class="token comment"># 暴露端口信息</span>
      - <span class="token string">&quot;8761:8761&quot;</span>
  microservice-provider-user:
    image: zhangshiyu3007/microservice-provider-user:0.0.1
    ports:                                                        <span class="token comment"># 暴露端口信息</span>
    - <span class="token string">&quot;8000:8000&quot;</span>
    links:          <span class="token comment"># 链接到microservice-discovery-eureka，这边使用的是SERVICE:ALIAS的形式</span>
      - microservice-discovery-eureka:discovery
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改两者的application-yml文件" tabindex="-1"><a class="header-anchor" href="#修改两者的application-yml文件"><span>修改两者的application.yml文件</span></a></h3><p>由于docker中网络模式默认未bridge，而各个容器的ip又不同，因此使用localhost访问是不行的，所以我们可以在user中注册的eureka网络ip使用eureka对应的hostname，由于笔者上文指定eureka链接的别名为discovery，所以下述配置直接使用该名字了，两者的application.yml配置如下所示</p><h4 id="eureka" tabindex="-1"><a class="header-anchor" href="#eureka"><span>eureka</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>server:
  port: <span class="token number">8761</span>                    <span class="token comment"># 指定该Eureka实例的端口</span>
eureka:
  client:
    registerWithEureka: <span class="token boolean">false</span>
    fetchRegistry: <span class="token boolean">false</span>
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

<span class="token comment"># 参考文档：http://projects.spring.io/spring-cloud/docs/1.0.3/spring-cloud.html#_standalone_mode</span>
<span class="token comment"># 参考文档：http://my.oschina.net/buwei/blog/618756</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="user" tabindex="-1"><a class="header-anchor" href="#user"><span>user</span></a></h4><p>可以看到user指定的eureka的defaultZone为<code>http://discovery:8761/eureka/</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>server:
  port: <span class="token number">8000</span>
spring:
  application:
    name: microservice-provider-user
  jpa:
    generate-ddl: <span class="token boolean">false</span>
    show-sql: <span class="token boolean">true</span>
    hibernate:
      ddl-auto: none
  datasource:                           <span class="token comment"># 指定数据源</span>
    platform: h2                        <span class="token comment"># 指定数据源类型</span>
    schema: classpath:schema.sql        <span class="token comment"># 指定h2数据库的建表脚本</span>
    data: classpath:data.sql            <span class="token comment"># 指定h2数据库的insert脚本</span>
logging:                                <span class="token comment"># 配置日志级别，让hibernate打印出执行的SQL</span>
  level:
    root: INFO
    org.hibernate: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE
eureka:
  client:
    serviceUrl:
      defaultZone: http://discovery:8761/eureka/
  instance:
    prefer-ip-address: <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扔到服务器中使用命令mvn-clean-package-docker-build" tabindex="-1"><a class="header-anchor" href="#扔到服务器中使用命令mvn-clean-package-docker-build"><span>扔到服务器中使用命令<code>mvn clean package docker:build</code></span></a></h3><h3 id="到达docker-compose-yml的文件夹执行命令docker-compose-up" tabindex="-1"><a class="header-anchor" href="#到达docker-compose-yml的文件夹执行命令docker-compose-up"><span>到达docker-compose.yml的文件夹执行命令<code>docker-compose up</code></span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="测试-1" tabindex="-1"><a class="header-anchor" href="#测试-1"><span>测试</span></a></h3><p>最终通过8761和8000都能访问到对应的页面</p><h4 id="_8761访问eureka界面成功并且可以看到user服务" tabindex="-1"><a class="header-anchor" href="#_8761访问eureka界面成功并且可以看到user服务"><span>8761访问eureka界面成功并且可以看到user服务</span></a></h4><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010155442.png" alt="image-20221001015544306"> 键入8000端口的网址可以得到如下结果，说明部署成功了</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>http://ip:8000/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010155122.png" alt="image-20221001015557123"></p><h1 id="更进一步-使用docker编排高可用eureka" tabindex="-1"><a class="header-anchor" href="#更进一步-使用docker编排高可用eureka"><span>更进一步，使用Docker编排高可用eureka</span></a></h1><h2 id="步骤-3" tabindex="-1"><a class="header-anchor" href="#步骤-3"><span>步骤</span></a></h2><h3 id="找到项目中的eureka模块" tabindex="-1"><a class="header-anchor" href="#找到项目中的eureka模块"><span>找到项目中的eureka模块</span></a></h3><h3 id="配置application-yml" tabindex="-1"><a class="header-anchor" href="#配置application-yml"><span>配置application.yml</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> microservice<span class="token punctuation">-</span>discovery<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>ha
<span class="token punctuation">---</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> peer1                                 <span class="token comment"># 指定profile=peer1</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer1                               <span class="token comment"># 指定当profile=peer1时，主机名是peer1</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>8762/eureka/      <span class="token comment"># 将自己注册到peer2这个Eureka上面去</span>

<span class="token punctuation">---</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> peer2
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8762</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer2
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>8761/eureka/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置docker-compose-yml" tabindex="-1"><a class="header-anchor" href="#配置docker-compose-yml"><span>配置docker-compose.yml</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;2&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">peer1</span><span class="token punctuation">:</span>      <span class="token comment"># 默认情况下，其他服务可使用服务名称连接到该服务。对于peer2节点，它需连接http://peer1:8761/eureka/，因此，我们可配置该服务的名称为peer1。</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> itmuch/microservice<span class="token punctuation">-</span>discovery<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>ha<span class="token punctuation">:</span>0.0.1<span class="token punctuation">-</span>SNAPSHOT
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer1
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8761:8761&quot;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> spring.profiles.active=peer1
  <span class="token key atrule">peer2</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> itmuch/microservice<span class="token punctuation">-</span>discovery<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>ha<span class="token punctuation">:</span>0.0.1<span class="token punctuation">-</span>SNAPSHOT
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer2
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8762:8762&quot;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> spring.profiles.active=peer2

<span class="token comment"># docker默认为桥接模式这个命令可以不写</span>
<span class="token comment">#networks:</span>
<span class="token comment">#  eureka-net:</span>
<span class="token comment">#    driver: bridge</span>

<span class="token comment">## 使用Compose编排高可用的Eureka Server。</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="项目扔到服务器中并构建镜像" tabindex="-1"><a class="header-anchor" href="#项目扔到服务器中并构建镜像"><span>项目扔到服务器中并构建镜像</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mvn clean package docker:build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用docker-compose-up启动" tabindex="-1"><a class="header-anchor" href="#使用docker-compose-up启动"><span>使用docker-compose up启动</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用8761-8762端口访问查看结果" tabindex="-1"><a class="header-anchor" href="#使用8761-8762端口访问查看结果"><span>使用8761 8762端口访问查看结果</span></a></h3><p>如下图所示，可以看到彼此都注册到彼此中心了 <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010156974.png" alt="image-20221001015642614"><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010157381.png" alt="image-20221001015713309"></p><h1 id="编排高可用spring-cloud集群动态伸缩" tabindex="-1"><a class="header-anchor" href="#编排高可用spring-cloud集群动态伸缩"><span>编排高可用spring cloud集群动态伸缩</span></a></h1><h2 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1"><span>简介</span></a></h2><p>在很多场景下，例如双十一等高并发场景，某些服务需要分流，对此我们可以就可以通过docker-compose实现动态扩容微服务</p><h2 id="步骤-4" tabindex="-1"><a class="header-anchor" href="#步骤-4"><span>步骤</span></a></h2><h3 id="pom配置构建镜像相关和启动后执行的指令" tabindex="-1"><a class="header-anchor" href="#pom配置构建镜像相关和启动后执行的指令"><span>pom配置构建镜像相关和启动后执行的指令</span></a></h3><p>eureka</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code> <span class="token comment">&lt;!-- 添加spring-boot的maven插件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>

      <span class="token comment">&lt;!-- 添加docker-maven插件 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">&gt;</span></span>itmuch/\${project.artifactId}:\${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forceTags</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>forceTags</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>baseImage</span><span class="token punctuation">&gt;</span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>baseImage</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entryPoint</span><span class="token punctuation">&gt;</span></span>[&quot;java&quot;, &quot;-jar&quot;, &quot;/\${project.build.finalName}.jar&quot;]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entryPoint</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>\${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>\${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>user</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code> <span class="token comment">&lt;!-- 添加spring-boot的maven插件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>

      <span class="token comment">&lt;!-- 添加docker-maven插件 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">&gt;</span></span>itmuch/\${project.artifactId}:\${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forceTags</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>forceTags</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>baseImage</span><span class="token punctuation">&gt;</span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>baseImage</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entryPoint</span><span class="token punctuation">&gt;</span></span>[&quot;java&quot;, &quot;-jar&quot;, &quot;/\${project.build.finalName}.jar&quot;]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entryPoint</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>\${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>\${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="user服务的application-yml配置两个注册中心" tabindex="-1"><a class="header-anchor" href="#user服务的application-yml配置两个注册中心"><span>user服务的application.yml配置两个注册中心</span></a></h3><p>从上文配置中我们已经实现了两个服务注册中心，所以我们这里需要为user模块配置两个注册中心保证高可用</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010157507.png" alt="image-20221001015750531"></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> microservice<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>user
  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>
    <span class="token key atrule">generate-ddl</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>
      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> none
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token comment"># 指定数据源</span>
    <span class="token key atrule">platform</span><span class="token punctuation">:</span> h2                        <span class="token comment"># 指定数据源类型</span>
    <span class="token key atrule">schema</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>schema.sql        <span class="token comment"># 指定h2数据库的建表脚本</span>
    <span class="token key atrule">data</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>data.sql            <span class="token comment"># 指定h2数据库的insert脚本</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>                                <span class="token comment"># 配置日志级别，让hibernate打印出执行的SQL</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">root</span><span class="token punctuation">:</span> INFO
    <span class="token key atrule">org.hibernate</span><span class="token punctuation">:</span> INFO
    <span class="token key atrule">org.hibernate.type.descriptor.sql.BasicBinder</span><span class="token punctuation">:</span> TRACE
    <span class="token key atrule">org.hibernate.type.descriptor.sql.BasicExtractor</span><span class="token punctuation">:</span> TRACE
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>8761/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>8762/eureka/
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-compose-yml-将所有服务注册到注册中心" tabindex="-1"><a class="header-anchor" href="#docker-compose-yml-将所有服务注册到注册中心"><span>docker-compose.yml 将所有服务注册到注册中心</span></a></h3><p>可以看到笔者本次的多服务配置，相较于上个例子的来说简便一些，由于所有服务共享一个隔离网络，所以这里服务使用名称<code>peer1</code> <code>peer2</code>提供给其他服务使用注册</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;2&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">peer1</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> itmuch/microservice<span class="token punctuation">-</span>discovery<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>ha<span class="token punctuation">:</span>0.0.1<span class="token punctuation">-</span>SNAPSHOT
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer2
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8761:8761&quot;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> spring.profiles.active=peer1
  <span class="token key atrule">peer2</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> itmuch/microservice<span class="token punctuation">-</span>discovery<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>ha<span class="token punctuation">:</span>0.0.1<span class="token punctuation">-</span>SNAPSHOT
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer2
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8762:8762&quot;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> spring.profiles.active=peer2
  <span class="token key atrule">microservice-provider-user</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> itmuch/microservice<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>user<span class="token punctuation">:</span>0.0.1<span class="token punctuation">-</span>SNAPSHOT

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将这些模块的文件扔到服务器上" tabindex="-1"><a class="header-anchor" href="#将这些模块的文件扔到服务器上"><span>将这些模块的文件扔到服务器上</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010158793.png" alt="image-20221001015814769"></p><h3 id="打包" tabindex="-1"><a class="header-anchor" href="#打包"><span>打包</span></a></h3><p>到达每个项目的目录下执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mvn clean package docker:build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="到docker-compose-yml所在目录运行如下命令" tabindex="-1"><a class="header-anchor" href="#到docker-compose-yml所在目录运行如下命令"><span>到docker-compose.yml所在目录运行如下命令</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker-compose up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看服务是否都起来" tabindex="-1"><a class="header-anchor" href="#查看服务是否都起来"><span>查看服务是否都起来</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010158061.png" alt="image-20221001015836118"></p><h3 id="动态扩容" tabindex="-1"><a class="header-anchor" href="#动态扩容"><span>动态扩容</span></a></h3><p>到达docker-compose.yml目录下键入如下指令可以看到，注册中心都进来了，且user也被扩容成了3个</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> scale microservice-provider-user<span class="token operator">=</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010159431.png" alt="image-20221001015911008"></p>`,127);function k(m,v){const e=p("ExternalLinkIcon");return l(),i("div",null,[u,a("p",null,[n("这里使用书本中参考的源码，具体可以去这里下载 "),a("a",r,[n("https://github.com/itmuch/spring-cloud-docker-microservice-book-code-docker.git"),c(e)]),n(" 如下图所示，将这个eureka的项目打成jar扔到自己的服务器上")]),d])}const b=t(o,[["render",k],["__file","DokcerCompose简单使用.html.vue"]]),y=JSON.parse('{"path":"/%E5%B7%A5%E5%85%B7/Docker/DokcerCompose%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html","title":"简介","lang":"zh-CN","frontmatter":{"description":"简介 我们的使用docker部署微服务时，如果每个微服务都要手动启停，效率是非常低的，所以我们需要一个工具来一键管理这庞大的微服务，Docker Compose就是最好的帮手。 安装Docker Compose 步骤 安装Docker Compose 如下命令所示，这条命令会自动安装适应系统版本的compose 为命令添加可执行权限 查看是否安装成功 ...","head":[["meta",{"property":"og:url","content":"https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Docker/DokcerCompose%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"麦俊轩的博客"}],["meta",{"property":"og:title","content":"简介"}],["meta",{"property":"og:description","content":"简介 我们的使用docker部署微服务时，如果每个微服务都要手动启停，效率是非常低的，所以我们需要一个工具来一键管理这庞大的微服务，Docker Compose就是最好的帮手。 安装Docker Compose 步骤 安装Docker Compose 如下命令所示，这条命令会自动安装适应系统版本的compose 为命令添加可执行权限 查看是否安装成功 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010152067.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-13T21:01:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"简介"}],["meta",{"property":"article:author","content":"maijunxuan"}],["meta",{"property":"article:modified_time","content":"2023-06-13T21:01:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简介\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010152067.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010153309.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010153027.png\\",\\"http://github.githubassets.com/images/icons/emoji/CONTAINER.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010154468.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010155442.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010155122.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010156974.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010157381.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010157507.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010158793.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010158061.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202210010159431.png\\"],\\"dateModified\\":\\"2023-06-13T21:01:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"maijunxuan\\",\\"email\\":\\"maijunxuan0309@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"步骤","slug":"步骤","link":"#步骤","children":[{"level":3,"title":"安装Docker Compose","slug":"安装docker-compose-1","link":"#安装docker-compose-1","children":[]},{"level":3,"title":"为命令添加可执行权限","slug":"为命令添加可执行权限","link":"#为命令添加可执行权限","children":[]},{"level":3,"title":"查看是否安装成功","slug":"查看是否安装成功","link":"#查看是否安装成功","children":[]},{"level":3,"title":"安装命令补全工具","slug":"安装命令补全工具","link":"#安装命令补全工具","children":[]}]},{"level":2,"title":"步骤","slug":"步骤-1","link":"#步骤-1","children":[{"level":3,"title":"打个jar包扔到服务器上","slug":"打个jar包扔到服务器上","link":"#打个jar包扔到服务器上","children":[]},{"level":3,"title":"编写一个Dockerfile","slug":"编写一个dockerfile","link":"#编写一个dockerfile","children":[]},{"level":3,"title":"编写一个docker-compose.yml","slug":"编写一个docker-compose-yml","link":"#编写一个docker-compose-yml","children":[]},{"level":3,"title":"使用docker-compose up 启动","slug":"使用docker-compose-up-启动","link":"#使用docker-compose-up-启动","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]},{"level":2,"title":"image","slug":"image","link":"#image","children":[]},{"level":2,"title":"build","slug":"build","link":"#build","children":[]},{"level":2,"title":"command","slug":"command","link":"#command","children":[]},{"level":2,"title":"links","slug":"links","link":"#links","children":[]},{"level":2,"title":"external_links","slug":"external-links","link":"#external-links","children":[]},{"level":2,"title":"ports","slug":"ports","link":"#ports","children":[]},{"level":2,"title":"expose","slug":"expose","link":"#expose","children":[]},{"level":2,"title":"volumes","slug":"volumes","link":"#volumes","children":[]},{"level":2,"title":"volumes_from","slug":"volumes-from","link":"#volumes-from","children":[]},{"level":2,"title":"environment","slug":"environment","link":"#environment","children":[]},{"level":2,"title":"env_file","slug":"env-file","link":"#env-file","children":[]},{"level":2,"title":"extends","slug":"extends","link":"#extends","children":[]},{"level":2,"title":"net","slug":"net","link":"#net","children":[]},{"level":2,"title":"dns","slug":"dns","link":"#dns","children":[]},{"level":2,"title":"dns_search","slug":"dns-search","link":"#dns-search","children":[]},{"level":2,"title":"需求分析","slug":"需求分析","link":"#需求分析","children":[]},{"level":2,"title":"步骤","slug":"步骤-2","link":"#步骤-2","children":[{"level":3,"title":"两个模块的pom文件都添加构建docker镜像的配置","slug":"两个模块的pom文件都添加构建docker镜像的配置","link":"#两个模块的pom文件都添加构建docker镜像的配置","children":[]},{"level":3,"title":"编写docker-compose.yml","slug":"编写docker-compose-yml","link":"#编写docker-compose-yml","children":[]},{"level":3,"title":"修改两者的application.yml文件","slug":"修改两者的application-yml文件","link":"#修改两者的application-yml文件","children":[]},{"level":3,"title":"扔到服务器中使用命令mvn clean package docker:build","slug":"扔到服务器中使用命令mvn-clean-package-docker-build","link":"#扔到服务器中使用命令mvn-clean-package-docker-build","children":[]},{"level":3,"title":"到达docker-compose.yml的文件夹执行命令docker-compose up","slug":"到达docker-compose-yml的文件夹执行命令docker-compose-up","link":"#到达docker-compose-yml的文件夹执行命令docker-compose-up","children":[]},{"level":3,"title":"测试","slug":"测试-1","link":"#测试-1","children":[]}]},{"level":2,"title":"步骤","slug":"步骤-3","link":"#步骤-3","children":[{"level":3,"title":"找到项目中的eureka模块","slug":"找到项目中的eureka模块","link":"#找到项目中的eureka模块","children":[]},{"level":3,"title":"配置application.yml","slug":"配置application-yml","link":"#配置application-yml","children":[]},{"level":3,"title":"配置docker-compose.yml","slug":"配置docker-compose-yml","link":"#配置docker-compose-yml","children":[]},{"level":3,"title":"项目扔到服务器中并构建镜像","slug":"项目扔到服务器中并构建镜像","link":"#项目扔到服务器中并构建镜像","children":[]},{"level":3,"title":"使用docker-compose up启动","slug":"使用docker-compose-up启动","link":"#使用docker-compose-up启动","children":[]},{"level":3,"title":"使用8761 8762端口访问查看结果","slug":"使用8761-8762端口访问查看结果","link":"#使用8761-8762端口访问查看结果","children":[]}]},{"level":2,"title":"简介","slug":"简介-1","link":"#简介-1","children":[]},{"level":2,"title":"步骤","slug":"步骤-4","link":"#步骤-4","children":[{"level":3,"title":"pom配置构建镜像相关和启动后执行的指令","slug":"pom配置构建镜像相关和启动后执行的指令","link":"#pom配置构建镜像相关和启动后执行的指令","children":[]},{"level":3,"title":"user服务的application.yml配置两个注册中心","slug":"user服务的application-yml配置两个注册中心","link":"#user服务的application-yml配置两个注册中心","children":[]},{"level":3,"title":"docker-compose.yml 将所有服务注册到注册中心","slug":"docker-compose-yml-将所有服务注册到注册中心","link":"#docker-compose-yml-将所有服务注册到注册中心","children":[]},{"level":3,"title":"将这些模块的文件扔到服务器上","slug":"将这些模块的文件扔到服务器上","link":"#将这些模块的文件扔到服务器上","children":[]},{"level":3,"title":"打包","slug":"打包","link":"#打包","children":[]},{"level":3,"title":"到docker-compose.yml所在目录运行如下命令","slug":"到docker-compose-yml所在目录运行如下命令","link":"#到docker-compose-yml所在目录运行如下命令","children":[]},{"level":3,"title":"查看服务是否都起来","slug":"查看服务是否都起来","link":"#查看服务是否都起来","children":[]},{"level":3,"title":"动态扩容","slug":"动态扩容","link":"#动态扩容","children":[]}]}],"git":{"createdTime":1665339673000,"updatedTime":1686690095000,"contributors":[{"name":"MJX","email":"1585225345@qq.com","commits":3}]},"readingTime":{"minutes":9.67,"words":2900},"filePathRelative":"工具/Docker/DokcerCompose简单使用.md","localizedDate":"2022年10月9日","excerpt":"\\n<p>我们的使用docker部署微服务时，如果每个微服务都要手动启停，效率是非常低的，所以我们需要一个工具来一键管理这庞大的微服务，Docker Compose就是最好的帮手。</p>\\n<h1>安装Docker Compose</h1>\\n<h2>步骤</h2>\\n<h3>安装Docker Compose</h3>\\n<p>如下命令所示，这条命令会自动安装适应系统版本的compose</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">curl</span> <span class=\\"token parameter variable\\">-L</span> <span class=\\"token string\\">\\"https://github.com/docker/compose/releases/download/1.10.0/docker-compose-<span class=\\"token variable\\"><span class=\\"token variable\\">$(</span><span class=\\"token function\\">uname</span> <span class=\\"token parameter variable\\">-s</span><span class=\\"token variable\\">)</span></span>-<span class=\\"token variable\\"><span class=\\"token variable\\">$(</span><span class=\\"token function\\">uname</span> <span class=\\"token parameter variable\\">-m</span><span class=\\"token variable\\">)</span></span>\\"</span> <span class=\\"token parameter variable\\">-o</span> /usr/local/bin/docker-compose\\n</code></pre></div>","autoDesc":true}');export{b as comp,y as data};
