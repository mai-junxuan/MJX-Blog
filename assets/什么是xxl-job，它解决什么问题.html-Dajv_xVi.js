import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,b as n,d as t,e as p,a as s}from"./app-2Nmlc3aW.js";const l={},u=s('<h2 id="什么是xxl-job-它解决什么问题" tabindex="-1"><a class="header-anchor" href="#什么是xxl-job-它解决什么问题"><span>什么是xxl-job，它解决什么问题</span></a></h2><p>我们在日常项目开发中，可能会用到分布式调度，在这期间我们可能会遇到这些问题:</p><ol><li>同一个服务中可能存在多个互斥的任务，需要统一调度和协调。</li><li>定时任务运行期间，为了确保任务能够稳定运行，我们希望能够做到高可用、监控运维、故障告警。</li><li>需要统一管理和追踪个个服务节点定时任务的情况，以及任务属性信息，比如:任务所属服务、所属责任人等信息。</li></ol><p>所以我们这里就需要用到xxl-job这个轻量级框架。</p><h2 id="xxl-job功能特性" tabindex="-1"><a class="header-anchor" href="#xxl-job功能特性"><span>XXL-JOB功能特性</span></a></h2><p>XXL-JOB主要有以下几个功能特性:</p><ol><li>简单易用:提供web页面对任务进行管理，管理系统支持用户管理、权限控制；支持容器部署，还支持通过HTTP提供跨平台任务调度。</li><li>丰富的任务管理功能:XXL-JOB支持页面对任务的增删改查操作，同时还支持页面编写脚本、Java代码任务并行。甚至还支持任务级联编排、父任务执行结束后触发子任务。支持任务设置优先级、支持设置指定任务的路由策略，包括:轮询、随机、广播、故障转移、忙碌转移等等。配置定时任务时，它还支持使用cron表达式。</li><li>高性能:调度中心是基于线程池多线程触发调度任务的，通过对快任务和慢任务的隔离调度，提高系统的性能和稳定性。任务调度流程完全是异步化设计和实现，如异步调度、异步运行、异步回调等，这些特性都可以实现密集流量的削峰。</li><li>高可用:任务调度中心、任务执行节点都可以集群部署，支持动态扩展、故障转移，同时还支持路由故障转移策略，执行器节点不可用时还能故障转移到其他节点。支持任务超时控制、失败重试配置，也支持任务处理阻塞策略，例如当任务执行节点忙碌的来不及执行新任务时会执行串行、抛弃、覆盖等策略。</li><li>易于监控和维护:支持设置任务失败告警，，同时还支持实时查看任务执行数据统计图表、任务进度监控、任务完整执行任务等数据。</li></ol><h2 id="xxl-job相比其他分布式调度框架的优势" tabindex="-1"><a class="header-anchor" href="#xxl-job相比其他分布式调度框架的优势"><span>XXL-JOB相比其他分布式调度框架的优势</span></a></h2><p>从下面这张表中我们可以看出xxl-job相比于其他框架，不仅支持高可用，功能也更多、更灵活，而且版本也一直在维护，是一个非常受欢迎的分布式任务调度平台。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256032.png" alt="在这里插入图片描述"></p><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h2><h3 id="基于xxl-job完成用户注册" tabindex="-1"><a class="header-anchor" href="#基于xxl-job完成用户注册"><span>基于xxl-job完成用户注册</span></a></h3><p>因为xxl-job官网对快速上手教程写的非常清楚了，笔者这里就不多做介绍了，感兴趣的读者可以自行到xxl-job官网完成一下基础入门工作:</p>',13),r={href:"https://www.xuxueli.com/xxl-job/",target:"_blank",rel:"noopener noreferrer"},d=s('<h4 id="需求介绍" tabindex="-1"><a class="header-anchor" href="#需求介绍"><span>需求介绍</span></a></h4><p>我们现在有这么一个需求，我们希望用户通过我们的接口完成用户信息注册之后，完成后台一些工作之后对用户输出一句问候。注意，由于问候这个操作和我们的核心业务没有关系，所以我们希望将这个问候的操作提交到xxl-job中执行。 当然如果在后台任务执行错误时，我们希望能够通过邮件的方式告知管理员。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256867.png" alt="在这里插入图片描述"></p><h4 id="部署xxl-job-admin" tabindex="-1"><a class="header-anchor" href="#部署xxl-job-admin"><span>部署xxl-job-admin</span></a></h4><p>我们首先需要完成一下xxl-job的基础部署，首先到gitee上把xxl-job拉下来，源码地址</p>',5),k={href:"https://gitee.com/xuxueli0323/xxl-job.git",target:"_blank",rel:"noopener noreferrer"},v=s(`<p>完成后我们找到文件夹里的找到tables_xxl_job.sql这个文件，将其刷到我们的数据库中。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256596.png" alt="在这里插入图片描述"></p><p>将上述脚本刷完之后，数据就如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256302.png" alt="在这里插入图片描述"></p><p>然后我们还需要对xxl-job-admin的配置文件的数据库配置进行一些简单的修改。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256972.png" alt="在这里插入图片描述"></p><p>如下所示，笔者将数据库的url、账户、密码改为自己数据库对应的值。</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment">### xxl-job, datasource</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:xxxxxx:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">xxxx</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">xxxxx</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后我们尝试将xxl-job启动，默认情况下用户名和密码分别时admin和123456，如果我们输入用户密码后可以进入到这个页面，就说明我们的xxl-job-admin部署成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256974.png" alt="在这里插入图片描述"></p><h4 id="创建自定义项目并完成基础配置" tabindex="-1"><a class="header-anchor" href="#创建自定义项目并完成基础配置"><span>创建自定义项目并完成基础配置</span></a></h4><p>完成xxl-job-admin的部署之后，我们就可以开始开发我们的功能了，我们首先需要创建一个spring-boot项目。然后到配置文件中添加如下几个部分的信息。</p><p>首先自然是端口号和xxl-job-admin信息，具体内容参见下方注释:</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span>

<span class="token comment"># xxl-job</span>
<span class="token key atrule">xxl</span><span class="token punctuation">:</span>
  <span class="token key atrule">job</span><span class="token punctuation">:</span>
    <span class="token key atrule">admin</span><span class="token punctuation">:</span>
      <span class="token key atrule">addresses</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8080/xxl<span class="token punctuation">-</span>job<span class="token punctuation">-</span>admin <span class="token comment"># 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；为空则关闭自动注册；</span>
    <span class="token key atrule">executor</span><span class="token punctuation">:</span>
      <span class="token key atrule">appname</span><span class="token punctuation">:</span> hresh<span class="token punctuation">-</span>job<span class="token punctuation">-</span>executor <span class="token comment"># 执行器 AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span>
      <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token comment"># 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和 &quot;调度中心请求并触发任务&quot;；</span>
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6666</span> <span class="token comment"># ### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span>
      <span class="token key atrule">logpath</span><span class="token punctuation">:</span> F<span class="token punctuation">:</span>\\log\\xxl<span class="token punctuation">-</span>job\\ <span class="token comment"># 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span>
      <span class="token key atrule">logretentiondays</span><span class="token punctuation">:</span> <span class="token number">30</span> <span class="token comment"># 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span>
    <span class="token key atrule">accessToken</span><span class="token punctuation">:</span> default_token  <span class="token comment"># 执行器通讯TOKEN [选填]：非空时启用；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于笔者的用户注册涉及user表，所以这里还需要配置user表所对应的数据库信息:</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring</span><span class="token punctuation">:</span>
<span class="token key attr-name">  application</span><span class="token punctuation">:</span>
<span class="token key attr-name">    name</span><span class="token punctuation">:</span> <span class="token value attr-value">xxl-job-practice</span>
<span class="token key attr-name">  datasource</span><span class="token punctuation">:</span>
<span class="token key attr-name">    type</span><span class="token punctuation">:</span> <span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">    driver-class-name</span><span class="token punctuation">:</span> <span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">    url</span><span class="token punctuation">:</span> <span class="token value attr-value">jdbc:mysql://xxxxxxxx:3306/test_db?serverTimezone=Hongkong&amp;characterEncoding=utf-8&amp;useSSL=false</span>
<span class="token key attr-name">    username</span><span class="token punctuation">:</span> <span class="token value attr-value">xxxx</span>
<span class="token key attr-name">    password</span><span class="token punctuation">:</span> <span class="token value attr-value">xxxxxx</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成基本项目配置之后，我们就可以开始编码工作了。我们首先需要创建一个执行器，代码如下，逻辑很简单，从配置文件中读取xxl-job-admin的配置信息完成执行器初始化使其加载到spring容器中。</p><div class="language-clike line-numbers-mode" data-ext="clike" data-title="clike"><pre class="language-clike"><code>@Configuration
public class <span class="token class-name">XxlJobConfig</span> <span class="token punctuation">{</span>

  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.admin.addresses}&quot;</span><span class="token punctuation">)</span>
  private String adminAddresses<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.appname}&quot;</span><span class="token punctuation">)</span>
  private String appName<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.ip}&quot;</span><span class="token punctuation">)</span>
  private String ip<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.port}&quot;</span><span class="token punctuation">)</span>
  private int port<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.accessToken}&quot;</span><span class="token punctuation">)</span>
  private String accessToken<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.logpath}&quot;</span><span class="token punctuation">)</span>
  private String logPath<span class="token punctuation">;</span>
  @<span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.logretentiondays}&quot;</span><span class="token punctuation">)</span>
  private int logRetentionDays<span class="token punctuation">;</span>

  <span class="token comment">/**
   * 执行器
   * @return
   */</span>
  @Bean
  public XxlJobSpringExecutor <span class="token function">xxlJobExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建 XxlJobSpringExecutor 执行器</span>
    XxlJobSpringExecutor xxlJobSpringExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobSpringExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置调度中心地址</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAdminAddresses</span><span class="token punctuation">(</span>adminAddresses<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置执行器名称</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAppname</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置ip地址</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置端口号</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//执行器通讯token</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置日志的路径</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogPath</span><span class="token punctuation">(</span>logPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置执行器保存天数</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogRetentionDays</span><span class="token punctuation">(</span>logRetentionDays<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> xxlJobSpringExecutor<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="魔改xxl-job" tabindex="-1"><a class="header-anchor" href="#魔改xxl-job"><span>魔改xxl-job</span></a></h4><p>我们希望我们的任务能够在用户完成注册之后像xxl-job提交一个随后向用户问好的定时任务。所以我们必须对xxl-job进行一些扩展，以实现:</p><ol><li>让xxl-job提供一个能够添加任务的restful api。</li><li>让xxl-job提供一个能够删除任务的restful api。</li><li>让xxl-job提供一个能够根据具体执行器名称查询执行器具体信息的restful api。</li></ol><p>为了实现这一点，我们不妨到xxl-job-admin的web页面进行点击了解一下有没有相似的api。首先自然是第一点，完成任务添加，我们不妨到web页面中点击新增按钮完成任意一个任务的添加。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256024.png" alt="在这里插入图片描述"></p><p>此时我们就会在network中看到这么一个接口</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256965.png" alt="在这里插入图片描述"></p><p>对应参数如下，可以看到是表单的形式传参。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256953.png" alt="在这里插入图片描述"></p><p>然后我们就从xxl-job中定位到了源码，逻辑很简单就是简单的调用一下xxlJobService。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256062.png" alt="在这里插入图片描述"></p><p>对此我们照抄这个逻辑，在JobInfoController中添加我们自定义的方法addJob，注意我们为了绕过xxl-job的权限校验加了PermissionLimit注解。</p><div class="language-clike line-numbers-mode" data-ext="clike" data-title="clike"><pre class="language-clike"><code>@<span class="token function">RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/addJob&quot;</span><span class="token punctuation">)</span>
	@ResponseBody
	@<span class="token function">PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	public ReturnT<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token function">addJob</span><span class="token punctuation">(</span>@RequestBody XxlJobInfo jobInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> xxlJobService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理我们观察删除任务的api，也实现一个移除任务的方法。</p><div class="language-clike line-numbers-mode" data-ext="clike" data-title="clike"><pre class="language-clike"><code>@<span class="token function">RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/removeJob&quot;</span><span class="token punctuation">)</span>
	@ResponseBody
	@<span class="token function">PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	public ReturnT<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token function">removeJob</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> xxlJobService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还一个根据根据应用名称精确获取执行器的信息的api，我们可以到执行器管理点击搜索。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256983.png" alt="在这里插入图片描述"></p><p>同理我们会得出这样一个接口。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256961.png" alt="在这里插入图片描述"></p><p>表单参数如下</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256167.png" alt="在这里插入图片描述"></p><p>我们从接口定位到代码，发现是一个分页查询，不符合我们的需求，所以我们通过源码定位到持久层sql，添加一个自定的查询sql。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256343.png" alt="在这里插入图片描述"></p><p>我们可以到XxlJobGroupDao添加一个loadByAppName</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256366.png" alt="在这里插入图片描述"></p><p>xml的代码如下所示：</p><div class="language-clike line-numbers-mode" data-ext="clike" data-title="clike"><pre class="language-clike"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;loadByAppName&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;java.util.HashMap&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;XxlJobGroup&quot;</span><span class="token operator">&gt;</span>
		SELECT
		<span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">&quot;Base_Column_List&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
		FROM xxl_job_group AS t
		WHERE t<span class="token punctuation">.</span>app_name <span class="token operator">=</span> #<span class="token punctuation">{</span>appName<span class="token punctuation">}</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们在JobGroupController添加如下代码，自此我们对xxl-job的拓展工作就完成了。当然在此提醒一下，正常开发流程时，我们建议在这个阶段自测一下接口的可用性，因为笔者在这里都测试过了，所以不展开了。</p><div class="language-clike line-numbers-mode" data-ext="clike" data-title="clike"><pre class="language-clike"><code>@<span class="token function">RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/loadByAppName&quot;</span><span class="token punctuation">)</span>
	@ResponseBody
	@<span class="token function">PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	public ReturnT<span class="token operator">&lt;</span>XxlJobGroup<span class="token operator">&gt;</span> <span class="token function">loadByAppName</span><span class="token punctuation">(</span>@RequestBody Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">&gt;</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		XxlJobGroup jobGroup <span class="token operator">=</span> xxlJobGroupDao<span class="token punctuation">.</span><span class="token function">loadByAppName</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> jobGroup <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ReturnT</span><span class="token operator">&lt;</span>XxlJobGroup<span class="token operator">&gt;</span><span class="token punctuation">(</span>jobGroup<span class="token punctuation">)</span>
				<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ReturnT</span><span class="token operator">&lt;</span>XxlJobGroup<span class="token operator">&gt;</span><span class="token punctuation">(</span>ReturnT<span class="token punctuation">.</span>FAIL_CODE<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现自定义应用调用xxl-job-admin" tabindex="-1"><a class="header-anchor" href="#实现自定义应用调用xxl-job-admin"><span>实现自定义应用调用xxl-job-admin</span></a></h4><p>接下来我们就回到自己开发的web应用，完成对xxl-job-admin的远程调用。首先我们需要将xxl-job-admin的XxlJobInfo复制到我们的项目中。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256565.png" alt="在这里插入图片描述"></p><p>如下图所示，笔者将这个类复制到自己项目中的model路径中。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256750.png" alt="在这里插入图片描述"></p><p>完成相关类的复制之后，就可以编写一个调用xxl-job-admin相关api的工具类XxlUtil</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@Component
@RequiredArgsConstructor
public class XxlUtil <span class="token punctuation">{</span>

  @Value<span class="token punctuation">(</span><span class="token string">&quot;<span class="token variable">\${xxl.job.admin.addresses}</span>&quot;</span><span class="token punctuation">)</span>
  private String xxlJobAdminAddress<span class="token punctuation">;</span>

  private final RestTemplate restTemplate<span class="token punctuation">;</span>

  // xxl-job各种请求地址
  private static final String ADD_INFO_URL <span class="token operator">=</span> <span class="token string">&quot;/jobinfo/addJob&quot;</span><span class="token punctuation">;</span>
  private static final String REMOVE_INFO_URL <span class="token operator">=</span> <span class="token string">&quot;/jobinfo/removeJob&quot;</span><span class="token punctuation">;</span>
  private static final String GET_GROUP_ID <span class="token operator">=</span> <span class="token string">&quot;/jobgroup/loadByAppName&quot;</span><span class="token punctuation">;</span>

  /**
   * 添加任务
   *
   * @param xxlJobInfo
   * @param appName
   * @return
   */
  public String addJob<span class="token punctuation">(</span>XxlJobInfo xxlJobInfo, String appName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    //组装参数
    Map<span class="token operator">&lt;</span>String, Object<span class="token operator">&gt;</span> params <span class="token operator">=</span> new HashMap<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params.put<span class="token punctuation">(</span><span class="token string">&quot;appName&quot;</span>, appName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    String json <span class="token operator">=</span> JSONUtil.toJsonStr<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    //调用xxl-job接口添加任务
    String result <span class="token operator">=</span> doPost<span class="token punctuation">(</span>xxlJobAdminAddress + GET_GROUP_ID, json<span class="token punctuation">)</span><span class="token punctuation">;</span>

    //获取执行器的id
    JSONObject jsonObject <span class="token operator">=</span> JSON.parseObject<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Map<span class="token operator">&lt;</span>String, Object<span class="token operator">&gt;</span> map <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String, Object<span class="token operator">&gt;</span><span class="token punctuation">)</span> jsonObject.get<span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Integer groupId <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> map.get<span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



    xxlJobInfo.setJobGroup<span class="token punctuation">(</span>groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    String xxlJobInfoJson <span class="token operator">=</span> JSONUtil.toJsonStr<span class="token punctuation">(</span>xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    //添加这个job
    <span class="token builtin class-name">return</span> doPost<span class="token punctuation">(</span>xxlJobAdminAddress + ADD_INFO_URL, xxlJobInfoJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  // 删除job
  public String removeJob<span class="token punctuation">(</span>long jobId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MultiValueMap<span class="token operator">&lt;</span>String, String<span class="token operator">&gt;</span> map <span class="token operator">=</span> new LinkedMultiValueMap<span class="token operator">&lt;</span>String, String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map.add<span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span>, String.valueOf<span class="token punctuation">(</span>jobId<span class="token punctuation">))</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> doPostWithFormData<span class="token punctuation">(</span>xxlJobAdminAddress + REMOVE_INFO_URL, map<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  /**
   * 远程调用
   *
   * @param url
   * @param json
   */
  private String doPost<span class="token punctuation">(</span>String url, String json<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    HttpHeaders headers <span class="token operator">=</span> new HttpHeaders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers.setContentType<span class="token punctuation">(</span>MediaType.APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>
    HttpEntity<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> entity <span class="token operator">=</span> new HttpEntity<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span>json, headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> responseEntity <span class="token operator">=</span> restTemplate.postForEntity<span class="token punctuation">(</span>url, entity, String.class<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> responseEntity.getBody<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  private String doPostWithFormData<span class="token punctuation">(</span>String url, MultiValueMap<span class="token operator">&lt;</span>String, String<span class="token operator">&gt;</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    HttpHeaders headers <span class="token operator">=</span> new HttpHeaders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers.setContentType<span class="token punctuation">(</span>MediaType.APPLICATION_FORM_URLENCODED<span class="token punctuation">)</span><span class="token punctuation">;</span>
    HttpEntity<span class="token operator">&lt;</span>MultiValueMap<span class="token operator">&lt;</span>String, String<span class="token operator">&gt;&gt;</span> entity <span class="token operator">=</span> new HttpEntity<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span>map, headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> responseEntity <span class="token operator">=</span> restTemplate.postForEntity<span class="token punctuation">(</span>url, entity, String.class<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> responseEntity.getBody<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成工具类的编写之后，我们通过XxlService 将工具类集成进来。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@Service
@Slf4j
@RequiredArgsConstructor
public class XxlService <span class="token punctuation">{</span>

  private final XxlUtil xxlUtil<span class="token punctuation">;</span>

  @Value<span class="token punctuation">(</span><span class="token string">&quot;<span class="token variable">\${xxl.job.executor.appname}</span>&quot;</span><span class="token punctuation">)</span>
  private String appName<span class="token punctuation">;</span>

  public void addJob<span class="token punctuation">(</span>XxlJobInfo xxlJobInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xxlUtil.addJob<span class="token punctuation">(</span>xxlJobInfo, appName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    long triggerNextTime <span class="token operator">=</span> xxlJobInfo.getTriggerNextTime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log.info<span class="token punctuation">(</span><span class="token string">&quot;任务已添加，将在{}开始执行任务&quot;</span>, DateUtils.formatDate<span class="token punctuation">(</span>triggerNextTime<span class="token punctuation">))</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="完成业务功能开发" tabindex="-1"><a class="header-anchor" href="#完成业务功能开发"><span>完成业务功能开发</span></a></h4><p>完成xxl-job集成工作之后，我们就可以编写业务代码了，我们代码逻辑如下整体步骤为:</p><ol><li>校验入参。</li><li>存储信息到user表。</li><li>创建定时任务，以sayHelloHandler作为执行器，userName为参数。</li><li>调用封装的api调用xxl-job-admin的api。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@Service
@RequiredArgsConstructor
@Slf4j
public class UserService <span class="token punctuation">{</span>

    private final UserMapper userMapper<span class="token punctuation">;</span>
    private final UserStruct userStruct<span class="token punctuation">;</span>
    private final XxlService xxlService<span class="token punctuation">;</span>

    /**
     * 假设有这样一个业务需求，每当有新用户注册，则1分钟后会给用户发送欢迎通知.
     *
     * @param userRequest 用户请求体
     */
    @Transactional
    public void register<span class="token punctuation">(</span>UserRequest userRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        //参数校验
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects.isNull<span class="token punctuation">(</span>userRequest<span class="token punctuation">)</span> <span class="token operator">||</span>
                isBlank<span class="token punctuation">(</span>userRequest.getUsername<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token operator">||</span>
                isBlank<span class="token punctuation">(</span>userRequest.getPassword<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            BusinessException.fail<span class="token punctuation">(</span><span class="token string">&quot;账号或密码为空！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        //插入用户信息
        User user <span class="token operator">=</span> userStruct.toUser<span class="token punctuation">(</span>userRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMapper.insert<span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        //创建一个1分钟后向用户问好的任务
        LocalDateTime scheduleTime <span class="token operator">=</span> LocalDateTime.now<span class="token punctuation">(</span><span class="token punctuation">)</span>.plusMinutes<span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        XxlJobInfo xxlJobInfo <span class="token operator">=</span> XxlJobInfo.builder<span class="token punctuation">(</span><span class="token punctuation">)</span>.jobDesc<span class="token punctuation">(</span><span class="token string">&quot;定时给用户发送通知&quot;</span><span class="token punctuation">)</span>.author<span class="token punctuation">(</span><span class="token string">&quot;mjx&quot;</span><span class="token punctuation">)</span>
                .scheduleType<span class="token punctuation">(</span><span class="token string">&quot;CRON&quot;</span><span class="token punctuation">)</span>.scheduleConf<span class="token punctuation">(</span>DateUtils.getCron<span class="token punctuation">(</span>scheduleTime<span class="token punctuation">))</span>.glueType<span class="token punctuation">(</span><span class="token string">&quot;BEAN&quot;</span><span class="token punctuation">)</span>
                .glueType<span class="token punctuation">(</span><span class="token string">&quot;BEAN&quot;</span><span class="token punctuation">)</span>
                .executorHandler<span class="token punctuation">(</span><span class="token string">&quot;sayHelloHandler&quot;</span><span class="token punctuation">)</span>
                .executorParam<span class="token punctuation">(</span>user.getUsername<span class="token punctuation">(</span><span class="token punctuation">))</span>
                .misfireStrategy<span class="token punctuation">(</span><span class="token string">&quot;DO_NOTHING&quot;</span><span class="token punctuation">)</span>
                .executorRouteStrategy<span class="token punctuation">(</span><span class="token string">&quot;FIRST&quot;</span><span class="token punctuation">)</span>
                .triggerNextTime<span class="token punctuation">(</span>DateUtils.toEpochMilli<span class="token punctuation">(</span>scheduleTime<span class="token punctuation">))</span>
                .executorBlockStrategy<span class="token punctuation">(</span><span class="token string">&quot;SERIAL_EXECUTION&quot;</span><span class="token punctuation">)</span>.triggerStatus<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        //将任务提交到xxl-job-admin
        xxlService.addJob<span class="token punctuation">(</span>xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充一下上文提到的SayHelloHandler 源码，注意笔者的操作，因为注册量比较大，所以我们提交的定时任务需要删除，所以sayHelloHandler执行完任务后会将任务删除。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@Component
@RequiredArgsConstructor
public class SayHelloHandler <span class="token punctuation">{</span>

    private final UserService userService<span class="token punctuation">;</span>
    private final XxlUtil xxlUtil<span class="token punctuation">;</span>

    private static Logger logger <span class="token operator">=</span> LoggerFactory.getLogger<span class="token punctuation">(</span>SayHelloHandler.class<span class="token punctuation">)</span><span class="token punctuation">;</span>


    @XxlJob<span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;sayHelloHandler&quot;</span><span class="token punctuation">)</span>
    public void <span class="token function-name function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String userName <span class="token operator">=</span> XxlJobHelper.getJobParam<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        logger.info<span class="token punctuation">(</span><span class="token string">&quot;welcome {}&quot;</span>, userName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        //未避免一次性任务，留在界面，这里手动删除处理掉
        long jobId <span class="token operator">=</span> XxlJobHelper.getJobId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlUtil.removeJob<span class="token punctuation">(</span>jobId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h4><p>我们使用api工具调用这个接口。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256696.png" alt="在这里插入图片描述"></p><p>从控制台可以看到任务提交了，我们不妨到web页面去看看。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256357.png" alt="在这里插入图片描述"></p><p>可以看到页面确实出现了这个任务。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256735.png" alt="在这里插入图片描述"></p><p>不久后，我们的执行器(即我们自己的web应用)会输出问候语</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256844.png" alt="在这里插入图片描述"></p><p>再次回到web页面可以看到刚刚完成的任务被删除了，自此我们的功能开发初步完成了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256973.png" alt="在这里插入图片描述"></p><h4 id="集成邮件告警" tabindex="-1"><a class="header-anchor" href="#集成邮件告警"><span>集成邮件告警</span></a></h4><p>我们上文提到了这样一个需求，用户注册成功后我们会将xxl-job提交一个向用户问候的定时任务，假如这个任务执行失败，我们希望可以做到告警。现在我们不妨完善一下这个需求。 我们到xxl-job-admin中配置邮件相关参数，配置如下，读者可以按需修改邮箱号和授权码即可。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### xxl-job, email</span>
<span class="token assign-left variable">spring.mail.host</span><span class="token operator">=</span>smtp.qq.com
<span class="token assign-left variable">spring.mail.port</span><span class="token operator">=</span><span class="token number">25</span>
<span class="token comment"># 邮箱号</span>
<span class="token assign-left variable">spring.mail.username</span><span class="token operator">=</span>xxxx@qq.com
<span class="token assign-left variable">spring.mail.from</span><span class="token operator">=</span>xxxx@qq.com
<span class="token comment"># 授权码</span>
<span class="token assign-left variable">spring.mail.password</span><span class="token operator">=</span>xxxxx


<span class="token assign-left variable">spring.mail.properties.mail.smtp.auth</span><span class="token operator">=</span>true
<span class="token assign-left variable">spring.mail.properties.mail.smtp.starttls.enable</span><span class="token operator">=</span>true
<span class="token assign-left variable">spring.mail.properties.mail.smtp.starttls.required</span><span class="token operator">=</span>true
<span class="token assign-left variable">spring.mail.properties.mail.smtp.socketFactory.class</span><span class="token operator">=</span>javax.net.ssl.SSLSocketFactory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里补充一下授权码是怎么来的，以笔者为例，笔者用的是qq邮箱，所以到qq邮箱页面点击设置。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256229.png" alt="在这里插入图片描述"></p><p>到下方找到关于pop3等一栏，选择服务将其开启，然后我们就可以拿到授权码了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256341.png" alt="在这里插入图片描述"></p><p>然后到我们的userSerivce上，添加一下关于告警邮箱号的配置。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256644.png" alt="在这里插入图片描述"></p><p>完成xxl-job-admin配置之后，我们不妨来测试一下，回到我们的web项目。在SayHelloHandler中编写一个算术异常。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256142.png" alt="在这里插入图片描述"></p><p>将项目启动，调用一下用户注册的接口。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256318.png" alt="在这里插入图片描述"></p><p>1分钟之后，代码执行报错，打开我们的邮箱即可发现这个问题邮件。自此，该需求完成了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256382.png" alt="在这里插入图片描述"></p><h3 id="魔改xxl-job-封装自定义starter" tabindex="-1"><a class="header-anchor" href="#魔改xxl-job-封装自定义starter"><span>魔改xxl-job，封装自定义starter</span></a></h3><h4 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h4><p>我们在使用xxl-job时发现这么一件事情，每次需要配置新任务都需要在页面疯狂点击配置，对于几个简单的配置来说还好，但是对于需要经常新增任务的web项目来说，这种配置步骤十分繁琐。 此时，我们希望有没有这样一个工具，可以让我们只需一个注解即可将执行器和任务直接注册道xxl-job-admin上，这样我们只需在编码阶段写好任务将项目启动，就可以将任务注册道xxl-job-admin中。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256304.png" alt="在这里插入图片描述"></p><h4 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路"><span>实现思路</span></a></h4><p>做到这一点其实很简单，我们可以借由spring-boot自动装配机制，并定义一个注解，扫描容器中所有执行器和带有这个注解的任务，然后调用xxl-job的api将这些任务注册到xxl-job-admin中。</p><h4 id="编写组件" tabindex="-1"><a class="header-anchor" href="#编写组件"><span>编写组件</span></a></h4><p>我们首先创建一个spring-boot项目，引入下面这几个依赖</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- xxl-job-core --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xuxueli<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxl-job-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${xxl-job.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${hutool.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们从xxl-job-admin中将这两个类拷过来。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256957.png" alt="在这里插入图片描述"></p><p>我们在web界面操作xxl-job-admin时发现所有操作都需要基于一个cookie，而这个cookie是需要登录才能得到的。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256261.png" alt="在这里插入图片描述"></p><p>所以我们定义一个接口，后续将登录和获取cookie保存到内存的操作补充上。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobLoginService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 登录xxl-job-admin
     */</span>
    <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取登录后的cookie
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理然后编写一个接口，定义所有关于执行器的bean的操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobGroupService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 查询执行器
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> <span class="token function">getJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 自动注册执行器
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">autoRegisterGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 精确查询执行器
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">preciselyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上文提到我们也需要将任务注册到xxl-job上，所以在这里我们也把这个接口定义上。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobInfoService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 查询xxl-job-admin上是否有这个任务
     * <span class="token keyword">@param</span> <span class="token parameter">jobGroupId</span>
     * <span class="token keyword">@param</span> <span class="token parameter">executorHandler</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getJobInfo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> jobGroupId<span class="token punctuation">,</span> <span class="token class-name">String</span> executorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 添加任务到xxl-job-admin上
     * <span class="token keyword">@param</span> <span class="token parameter">xxlJobInfo</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">Integer</span> <span class="token function">addJobInfo</span><span class="token punctuation">(</span><span class="token class-name">XxlJobInfo</span> xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自此所有我们需要的行为都有了，我们就需要开始将逻辑补充上了。首先是登录和获取cookie的方法。代码含义都详细注释了，读者可以自行查阅，这里简单说明一下登录进行的操作就是:</p><ol><li>调用xxl-job登录接口</li><li>成功后获取cookie</li><li>将cookie缓存到map中</li></ol><p>而获取cookie的方式也很简单，从map中取出来返回出去就好了。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JobLoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">JobLoginService</span> <span class="token punctuation">{</span>


    <span class="token doc-comment comment">/**
     * 从配置文件获取的xxl-job地址
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.admin.addresses}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> adminAddresses<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 从配置文件获取的登录用户名
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.admin.username}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 从xxl-job获取的登录密码
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.admin.password}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 缓存cookie的密码
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> loginCookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 调用登录接口将XXL_JOB_LOGIN_IDENTITY缓存下来后续使用
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//调用登录接口</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> adminAddresses <span class="token operator">+</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//获取登录后的cookie</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpCookie</span><span class="token punctuation">&gt;</span></span> cookies <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//尝试获得XXL_JOB_LOGIN_IDENTITY</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpCookie</span><span class="token punctuation">&gt;</span></span> cookieOpt <span class="token operator">=</span> cookies<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>cookie <span class="token operator">-&gt;</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;XXL_JOB_LOGIN_IDENTITY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cookieOpt<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;get xxl-job cookie error!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//如果存在这个cookie则将其缓存起来</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> cookieOpt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        loginCookie<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;XXL_JOB_LOGIN_IDENTITY&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 尝试从内存中获取cookie，如果没有则尝试3次登录即可
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> cookieStr <span class="token operator">=</span> loginCookie<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;XXL_JOB_LOGIN_IDENTITY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cookieStr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">&quot;XXL_JOB_LOGIN_IDENTITY=&quot;</span> <span class="token operator">+</span> cookieStr<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;get xxl-job cookie error!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是执行器注册的逻辑了，整体来说有两个方法，分别是精确查询执行器和注册执行器的方法，含义都详尽注释在代码上，读者可自行参阅。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JobGroupServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">JobGroupService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.admin.addresses}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> adminAddresses<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.appname}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> appName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.title}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

    <span class="token comment">/*
     * 执行器地址类型：0=自动注册、1=手动录入
     * */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.addressType:0}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> addressType<span class="token punctuation">;</span>

    <span class="token comment">/*
     * 执行器地址列表，多地址逗号分隔(手动录入)
     * */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.executor.addressList:}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> addressList<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JobLoginService</span> jobLoginService<span class="token punctuation">;</span>



    <span class="token doc-comment comment">/**
     * 精确查询执行器
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preciselyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//调用xxl-job模糊查询job的api</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> jobGroup <span class="token operator">=</span> <span class="token function">getJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//精确匹配执行器名称</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> has <span class="token operator">=</span> jobGroup<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>xxlJobGroup <span class="token operator">-&gt;</span> xxlJobGroup<span class="token punctuation">.</span><span class="token function">getAppname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span>
                        <span class="token operator">&amp;&amp;</span> xxlJobGroup<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//返回该执行器是否存在</span>
        <span class="token keyword">return</span> has<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 查询执行器列表
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> <span class="token function">getJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> adminAddresses <span class="token operator">+</span> <span class="token string">&quot;/jobgroup/pageList&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&quot;appname&quot;</span><span class="token punctuation">,</span> appName<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span>jobLoginService<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSONArray</span> array <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getByPath</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> o<span class="token punctuation">,</span> <span class="token class-name">XxlJobGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 调用xxl-job保存执行器的api，将执行器保存到xxl-job上
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">autoRegisterGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//组装请求地址</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> adminAddresses <span class="token operator">+</span> <span class="token string">&quot;/jobgroup/save&quot;</span><span class="token punctuation">;</span>
        
        <span class="token comment">//组装表单参数</span>
        <span class="token class-name">HttpRequest</span> httpRequest <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&quot;appname&quot;</span><span class="token punctuation">,</span> appName<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//组装地址类型和注册地址</span>
        httpRequest<span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&quot;addressType&quot;</span><span class="token punctuation">,</span> addressType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>addressType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Strings</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>addressList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;手动录入模式下,执行器地址列表不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            httpRequest<span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&quot;addressList&quot;</span><span class="token punctuation">,</span> addressList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//执行请求，带上我们之前缓存的cookie</span>
        <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span>jobLoginService<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> code <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getByPath</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//返回200就说明注册成功</span>
        <span class="token keyword">return</span> code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

   

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后就是任务注册的接口实现了，核心方法也是模糊查询任务列表和注册任务两个方法，读者参阅注释即可理解，这里不多赘述。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JobInfoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">JobInfoService</span> <span class="token punctuation">{</span>

    <span class="token comment">//xxl-job地址</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${xxl.job.admin.addresses}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> adminAddresses<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JobLoginService</span> jobLoginService<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 模糊查询任务列表
     *
     * <span class="token keyword">@param</span> <span class="token parameter">jobGroupId</span>
     * <span class="token keyword">@param</span> <span class="token parameter">executorHandler</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getJobInfo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> jobGroupId<span class="token punctuation">,</span> <span class="token class-name">String</span> executorHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//组装查询url</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> adminAddresses <span class="token operator">+</span> <span class="token string">&quot;/jobinfo/pageList&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//调用查询接口</span>
        <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&quot;jobGroup&quot;</span><span class="token punctuation">,</span> jobGroupId<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&quot;executorHandler&quot;</span><span class="token punctuation">,</span> executorHandler<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">&quot;triggerStatus&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span>jobLoginService<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSONArray</span> array <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getByPath</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobInfo</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> o<span class="token punctuation">,</span> <span class="token class-name">XxlJobInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//返回任务列表</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 添加一个任务到任务列表
     *
     * <span class="token keyword">@param</span> <span class="token parameter">xxlJobInfo</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">addJobInfo</span><span class="token punctuation">(</span><span class="token class-name">XxlJobInfo</span> xxlJobInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//组装查询url</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> adminAddresses <span class="token operator">+</span> <span class="token string">&quot;/jobinfo/add&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//执行添加逻辑</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> paramMap <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">beanToMap</span><span class="token punctuation">(</span>xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span>paramMap<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span>jobLoginService<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//处理并返回结果</span>
        <span class="token class-name">JSON</span> json <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> code <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">getByPath</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">getByPath</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;add jobInfo error!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自此所有核心工作方法都完成了。我们就可以基于spring-boot的自动装配自动调用这些方法完成执行器和任务的注册。</p><p>首先我们定义一个注解，用于要注册到xxl-job的任务的信息。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 用于实现任务自动注册
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">XxlRegister</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 任务执行的cron表达式
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 任务描述
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">jobDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;default jobDesc&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 任务作者
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;default Author&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     * 默认为 ROUND 轮询方式
     * 可选： FIRST 第一个
     * */</span>
    <span class="token class-name">String</span> <span class="token function">executorRouteStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;ROUND&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 如果是1则自动注册
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">int</span> <span class="token function">triggerStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点来了,现在我们要编写一个XxlJobAutoRegister扫描容器中带有XxlJob、XxlRegister的方法，并通过xxl-job-admin的api将其注册上去。</p><p>代码逻辑很简单，通过ApplicationContextAware获取容器中的bean，然后基于ApplicationListener监听容器加载情况，在容器准备好提供服务时，做下面这几件事:</p><ol><li>通过ApplicationContextAware找到所有的bean</li><li>遍历bean，找到带有XxlJob的方法。</li><li>查看带有XxlJob的方法是否有XxlRegister，如果有则将其注册到xxl-job-admin</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxlJobAutoRegister</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationReadyEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
        <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JobGroupService</span> jobGroupService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JobInfoService</span> jobInfoService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationReadyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//注册执行器</span>
        <span class="token function">addJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//注册任务</span>
        <span class="token function">addJobInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//自动注册执行器</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果存在执行器，则直接返回，说明已经注册过了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jobGroupService<span class="token punctuation">.</span><span class="token function">preciselyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token comment">//否则手动注册一下执行器</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jobGroupService<span class="token punctuation">.</span><span class="token function">autoRegisterGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;auto register xxl-job group success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 将带有XxlRegister的注解的方法提交到xxl-job-admin中
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addJobInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobGroup</span><span class="token punctuation">&gt;</span></span> jobGroups <span class="token operator">=</span> jobGroupService<span class="token punctuation">.</span><span class="token function">getJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">XxlJobGroup</span> xxlJobGroup <span class="token operator">=</span> jobGroups<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//拿到所有的bean名称</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanDefinitionNames <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanDefinitionName <span class="token operator">:</span> beanDefinitionNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//找到这个bean中带有XxlJob的方法</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">XxlJob</span><span class="token punctuation">&gt;</span></span> methodWithXxlJob <span class="token operator">=</span> <span class="token class-name">MethodIntrospector</span><span class="token punctuation">.</span><span class="token function">selectMethods</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token class-name">MethodIntrospector<span class="token punctuation">.</span>MetadataLookup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJob</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> method <span class="token operator">-&gt;</span> <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">findMergedAnnotation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">XxlJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">XxlJob</span><span class="token punctuation">&gt;</span></span> methodXxlJobEntry <span class="token operator">:</span> methodWithXxlJob<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//带有XxlJob的方法名</span>
                <span class="token class-name">Method</span> executeMethod <span class="token operator">=</span> methodXxlJobEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//XxlJob注解配置的值</span>
                <span class="token class-name">XxlJob</span> xxlJob <span class="token operator">=</span> methodXxlJobEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//如果executeMethod带有XxlRegister注解</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>executeMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">XxlRegister</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>


                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobInfo</span><span class="token punctuation">&gt;</span></span> jobInfo <span class="token operator">=</span> jobInfoService<span class="token punctuation">.</span><span class="token function">getJobInfo</span><span class="token punctuation">(</span>xxlJobGroup<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xxlJob<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jobInfo<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">//因为是模糊查询，需要再判断一次</span>
                        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJobInfo</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> jobInfo<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>xxlJobInfo <span class="token operator">-&gt;</span> xxlJobInfo<span class="token punctuation">.</span><span class="token function">getExecutorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>xxlJob<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">//如果任务已经存在则不管了</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">//创建任务并注册</span>
                    <span class="token class-name">XxlRegister</span> xxlRegister <span class="token operator">=</span> executeMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">XxlRegister</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">XxlJobInfo</span> xxlJobInfo <span class="token operator">=</span> <span class="token function">createXxlJobInfo</span><span class="token punctuation">(</span>xxlJobGroup<span class="token punctuation">,</span> xxlJob<span class="token punctuation">,</span> xxlRegister<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Integer</span> jobInfoId <span class="token operator">=</span> jobInfoService<span class="token punctuation">.</span><span class="token function">addJobInfo</span><span class="token punctuation">(</span>xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 基于XxlRegister封装成一个xxlJobInfo对象提交到xxl-job-admin中
     * <span class="token keyword">@param</span> <span class="token parameter">xxlJobGroup</span>
     * <span class="token keyword">@param</span> <span class="token parameter">xxlJob</span>
     * <span class="token keyword">@param</span> <span class="token parameter">xxlRegister</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">XxlJobInfo</span> <span class="token function">createXxlJobInfo</span><span class="token punctuation">(</span><span class="token class-name">XxlJobGroup</span> xxlJobGroup<span class="token punctuation">,</span> <span class="token class-name">XxlJob</span> xxlJob<span class="token punctuation">,</span> <span class="token class-name">XxlRegister</span> xxlRegister<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">XxlJobInfo</span> xxlJobInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setJobGroup</span><span class="token punctuation">(</span>xxlJobGroup<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setJobDesc</span><span class="token punctuation">(</span>xxlRegister<span class="token punctuation">.</span><span class="token function">jobDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>xxlRegister<span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setScheduleType</span><span class="token punctuation">(</span><span class="token string">&quot;CRON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setScheduleConf</span><span class="token punctuation">(</span>xxlRegister<span class="token punctuation">.</span><span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setGlueType</span><span class="token punctuation">(</span><span class="token string">&quot;BEAN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setExecutorHandler</span><span class="token punctuation">(</span>xxlJob<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setExecutorRouteStrategy</span><span class="token punctuation">(</span>xxlRegister<span class="token punctuation">.</span><span class="token function">executorRouteStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setMisfireStrategy</span><span class="token punctuation">(</span><span class="token string">&quot;DO_NOTHING&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setExecutorBlockStrategy</span><span class="token punctuation">(</span><span class="token string">&quot;SERIAL_EXECUTION&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setExecutorTimeout</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setExecutorFailRetryCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setGlueRemark</span><span class="token punctuation">(</span><span class="token string">&quot;GLUE代码初始化&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxlJobInfo<span class="token punctuation">.</span><span class="token function">setTriggerStatus</span><span class="token punctuation">(</span>xxlRegister<span class="token punctuation">.</span><span class="token function">triggerStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> xxlJobInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自此我们的组件开发完成了，为了让上面的XxlJobAutoRegister，我们需要编写一个配置类XxlJobPlusConfig，他会扫描XxlJobAutoRegister的包。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.xxl.job.plus.executor&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxlJobPlusConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后编写一个spring.factories，将XxlJobPlusConfig路径写入，确保其他引入该组件时会自动装配XxlJobAutoRegister将指定的xxl-job注册上去。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token operator">=</span><span class="token punctuation">\\</span>
  com.xxl.job.plus.executor.config.XxlJobPlusConfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="引入组件并进行测试" tabindex="-1"><a class="header-anchor" href="#引入组件并进行测试"><span>引入组件并进行测试</span></a></h4><p>首先将上述组件打包，然后在需要使用这个组件的应用中引入</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.cn.hydra<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxljob-autoregister-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以笔者为例，这里直接使用xxl源码自带的spring-boot项目。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256822.png" alt="在这里插入图片描述"></p><p>编写一个自定义的bean</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>
    
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TestService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;testJob&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@XxlRegister</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0 0 0 * * ? *&quot;</span><span class="token punctuation">,</span>
            author <span class="token operator">=</span> <span class="token string">&quot;mjx&quot;</span><span class="token punctuation">,</span>
            jobDesc <span class="token operator">=</span> <span class="token string">&quot;测试job&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;testJob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@XxlRegister</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0 0 0 * * ? *&quot;</span><span class="token punctuation">,</span>
            triggerStatus <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;hello this is mjx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后新增如下配置</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># 新增配置项，必须项</span>
<span class="token comment"># admin用户名</span>
<span class="token key attr-name">xxl.job.admin.username</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>
<span class="token comment"># admin 密码</span>
<span class="token key attr-name">xxl.job.admin.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token comment"># 执行器名称</span>
<span class="token key attr-name">xxl.job.executor.title</span><span class="token punctuation">=</span><span class="token value attr-value">mjx</span>

<span class="token comment"># 新增配置项，可选项</span>
<span class="token comment"># 执行器地址类型：0=自动注册、1=手动录入，默认为0</span>
<span class="token key attr-name">xxl.job.executor.addressType</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token comment"># 在上面为1的情况下，手动录入执行器地址列表，多地址逗号分隔</span>
<span class="token key attr-name">xxl.job.executor.addressList</span><span class="token punctuation">=</span><span class="token value attr-value">http://127.0.0.1:9999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后将xxl-job-admin和xxl-job启动，打开xxl-job的管理页面，可以看到我们的任务都注册进来了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256178.png" alt="在这里插入图片描述"></p><p>执行该任务一次</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256241.png" alt="在这里插入图片描述"></p><p>可以看到，控制台成功，自此我们的实践都完成了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256121.png" alt="在这里插入图片描述"></p><h4 id="关于源码" tabindex="-1"><a class="header-anchor" href="#关于源码"><span>关于源码</span></a></h4><p>笔者本次功能都是参考这个仓库的项目，感兴趣的读者可以自行调试一下。</p><p>https://github.com/trunks2008/xxl-job-auto-register</p>`,144);function m(b,g){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[t("分布式任务调度平台XXL-JOB(opens new window)"),p(a)])]),d,n("p",null,[n("a",k,[t("https://gitee.com/xuxueli0323/xxl-job.git(opens new window)"),p(a)])]),v])}const j=e(l,[["render",m],["__file","什么是xxl-job，它解决什么问题.html.vue"]]),h=JSON.parse('{"path":"/%E5%88%86%E5%B8%83%E5%BC%8F/%E4%BB%80%E4%B9%88%E6%98%AFxxl-job%EF%BC%8C%E5%AE%83%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98.html","title":"","lang":"zh-CN","frontmatter":{"description":"什么是xxl-job，它解决什么问题 我们在日常项目开发中，可能会用到分布式调度，在这期间我们可能会遇到这些问题: 同一个服务中可能存在多个互斥的任务，需要统一调度和协调。 定时任务运行期间，为了确保任务能够稳定运行，我们希望能够做到高可用、监控运维、故障告警。 需要统一管理和追踪个个服务节点定时任务的情况，以及任务属性信息，比如:任务所属服务、所属责...","head":[["meta",{"property":"og:url","content":"https://maijunxuan.cn/%E5%88%86%E5%B8%83%E5%BC%8F/%E4%BB%80%E4%B9%88%E6%98%AFxxl-job%EF%BC%8C%E5%AE%83%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"麦俊轩的博客"}],["meta",{"property":"og:description","content":"什么是xxl-job，它解决什么问题 我们在日常项目开发中，可能会用到分布式调度，在这期间我们可能会遇到这些问题: 同一个服务中可能存在多个互斥的任务，需要统一调度和协调。 定时任务运行期间，为了确保任务能够稳定运行，我们希望能够做到高可用、监控运维、故障告警。 需要统一管理和追踪个个服务节点定时任务的情况，以及任务属性信息，比如:任务所属服务、所属责..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256032.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-28T00:49:57.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"property":"article:author","content":"maijunxuan"}],["meta",{"property":"article:modified_time","content":"2023-08-28T00:49:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256032.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256867.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256596.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256302.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256972.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256974.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256024.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256965.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256953.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256062.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256983.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256961.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256167.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256343.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256366.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256565.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256750.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256696.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256357.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256735.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256844.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256973.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256229.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256341.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256644.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256142.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256318.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256382.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256304.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256957.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256261.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256822.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256178.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256241.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202304211256121.png\\"],\\"dateModified\\":\\"2023-08-28T00:49:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"maijunxuan\\",\\"email\\":\\"maijunxuan0309@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是xxl-job，它解决什么问题","slug":"什么是xxl-job-它解决什么问题","link":"#什么是xxl-job-它解决什么问题","children":[]},{"level":2,"title":"XXL-JOB功能特性","slug":"xxl-job功能特性","link":"#xxl-job功能特性","children":[]},{"level":2,"title":"XXL-JOB相比其他分布式调度框架的优势","slug":"xxl-job相比其他分布式调度框架的优势","link":"#xxl-job相比其他分布式调度框架的优势","children":[]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[{"level":3,"title":"基于xxl-job完成用户注册","slug":"基于xxl-job完成用户注册","link":"#基于xxl-job完成用户注册","children":[]},{"level":3,"title":"魔改xxl-job，封装自定义starter","slug":"魔改xxl-job-封装自定义starter","link":"#魔改xxl-job-封装自定义starter","children":[]}]}],"git":{"createdTime":1693183797000,"updatedTime":1693183797000,"contributors":[{"name":"MJX","email":"1585225345@qq.com","commits":1}]},"readingTime":{"minutes":22.92,"words":6876},"filePathRelative":"分布式/什么是xxl-job，它解决什么问题.md","localizedDate":"2023年8月28日","excerpt":"<h2>什么是xxl-job，它解决什么问题</h2>\\n<p>我们在日常项目开发中，可能会用到分布式调度，在这期间我们可能会遇到这些问题:</p>\\n<ol>\\n<li>同一个服务中可能存在多个互斥的任务，需要统一调度和协调。</li>\\n<li>定时任务运行期间，为了确保任务能够稳定运行，我们希望能够做到高可用、监控运维、故障告警。</li>\\n<li>需要统一管理和追踪个个服务节点定时任务的情况，以及任务属性信息，比如:任务所属服务、所属责任人等信息。</li>\\n</ol>\\n<p>所以我们这里就需要用到xxl-job这个轻量级框架。</p>\\n<h2>XXL-JOB功能特性</h2>\\n<p>XXL-JOB主要有以下几个功能特性:</p>","autoDesc":true}');export{j as comp,h as data};
