import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as o,b as a,d as n,e as r,a as e}from"./app-Digg1ELS.js";const l={},c=e('<h1 id="spring的常用注解" tabindex="-1"><a class="header-anchor" href="#spring的常用注解"><span>Spring的常用注解</span></a></h1><p>注解本身没有功能的，就和 xml 一样。注解和 xml 都是一种元数据，元数据即解释数据的数据，这就是所谓配置。</p><p>本文主要罗列 Spring|Spring MVC相关注解的简介。</p><p>Spring部分</p><h2 id="_1、声明bean的注解" tabindex="-1"><a class="header-anchor" href="#_1、声明bean的注解"><span><strong>1、声明bean的注解</strong></span></a></h2><p>@Component 组件，没有明确的角色</p><p>@Service 在业务逻辑层使用（service层）</p><p>@Repository 在数据访问层使用（dao层）</p><p>@Controller 在展现层使用，控制器的声明（C）</p><h2 id="_2、注入bean的注解" tabindex="-1"><a class="header-anchor" href="#_2、注入bean的注解"><span><strong>2、注入bean的注解</strong></span></a></h2><p>@Autowired：由Spring提供</p><p>@Inject：由JSR-330提供</p><p>@Resource：由JSR-250提供</p><p>都可以注解在set方法和属性上，推荐注解在属性上（一目了然，少写代码）。</p><h2 id="_3、java配置类相关注解" tabindex="-1"><a class="header-anchor" href="#_3、java配置类相关注解"><span><strong>3、Java配置类相关注解</strong></span></a></h2><p>@Configuration 声明当前类为配置类，相当于xml形式的Spring配置（类上）</p><p>@Bean 注解在方法上，声明当前方法的返回值为一个bean，替代xml中的方式（方法上）</p><p>@Configuration 声明当前类为配置类，其中内部组合了@Component注解，表明这个类是一个bean（类上）</p><p>@ComponentScan 用于对Component进行扫描，相当于xml中的（类上）</p><p>@WishlyConfiguration 为@Configuration与@ComponentScan的组合注解，可以替代这两个注解</p><h2 id="_4、切面-aop-相关注解" tabindex="-1"><a class="header-anchor" href="#_4、切面-aop-相关注解"><span><strong>4、切面（AOP）相关注解</strong></span></a></h2><p>Spring支持AspectJ的注解式切面编程。</p><p>@Aspect 声明一个切面（类上） 使用@After、@Before、@Around定义建言（advice），可直接将拦截规则（切点）作为参数。</p><p>@After 在方法执行之后执行（方法上） @Before 在方法执行之前执行（方法上） @Around 在方法执行之前与之后执行（方法上）</p><p>@PointCut 声明切点 在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持（类上）</p><h2 id="_5、-bean的属性支持" tabindex="-1"><a class="header-anchor" href="#_5、-bean的属性支持"><span><strong>5、@Bean的属性支持</strong></span></a></h2>',26),d={href:"https://cloud.tencent.com/product/tke?from=10680",target:"_blank",rel:"noopener noreferrer"},u=e(`<p>Singleton （单例,一个Spring容器中只有一个bean实例，默认模式）, Protetype （每次调用新建一个bean）, Request （web项目中，给每个http request新建一个bean）, Session （web项目中，给每个http session新建一个bean）, GlobalSession（给每一个 global http session新建一个Bean实例）</p><p>@StepScope 在Spring Batch中还有涉及</p><p>@PostConstruct 由JSR-250提供，在构造函数执行完之后执行，等价于xml配置文件中bean的initMethod</p><p>@PreDestory 由JSR-250提供，在Bean销毁之前执行，等价于xml配置文件中bean的destroyMethod</p><h2 id="_6、-value注解" tabindex="-1"><a class="header-anchor" href="#_6、-value注解"><span><strong>6、@Value注解</strong></span></a></h2><p>@Value 为属性注入值（属性上） 支持如下方式的注入：</p><p>注入普通字符</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注入操作系统属性</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{systemProperties[&#39;os.name&#39;]}&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> osName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注入表达式结果</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{T(java.lang.Math).random()}&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> randomNumber<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注入其它bean属性</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;domeClass.name&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注入文件资源</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:com/mjx/hello/test.txt&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> file<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注入网站资源</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> url<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注入配置文件</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${book.name}&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、环境切换" tabindex="-1"><a class="header-anchor" href="#_7、环境切换"><span><strong>7、环境切换</strong></span></a></h2><p>@Profile 通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境。（类或方法上）</p><p>@Conditional Spring4中可以使用此注解定义条件话的bean，通过实现Condition接口，并重写matches方法，从而决定该bean是否被实例化。（方法上）</p><h2 id="_8、异步相关" tabindex="-1"><a class="header-anchor" href="#_8、异步相关"><span><strong>8、异步相关</strong></span></a></h2><p>@EnableAsync 配置类中，通过此注解开启对异步任务的支持，叙事性AsyncConfigurer接口（类上）</p><p>@Async 在实际执行的bean方法使用该注解来申明其是一个异步任务（方法上或类上所有的方法都将异步，需要@EnableAsync开启异步任务）</p><h2 id="_9、定时任务相关" tabindex="-1"><a class="header-anchor" href="#_9、定时任务相关"><span><strong>9、定时任务相关</strong></span></a></h2><p>@EnableScheduling 在配置类上使用，开启计划任务的支持（类上）</p><p>@Scheduled 来申明这是一个任务，包括cron,fixDelay,fixRate等类型（方法上，需先开启计划任务的支持）</p><h2 id="_10、-enable-注解说明" tabindex="-1"><a class="header-anchor" href="#_10、-enable-注解说明"><span><strong>10、@Enable*注解说明</strong></span></a></h2><p>这些注解主要用来开启对xxx的支持。 @EnableAspectJAutoProxy 开启对AspectJ自动代理的支持</p><p>@EnableAsync 开启异步方法的支持</p><p>@EnableScheduling 开启计划任务的支持</p><p>@EnableWebMvc 开启Web MVC的配置支持</p><p>@EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持</p><p>@EnableJpaRepositories 开启对SpringData JPA Repository的支持</p><p>@EnableTransactionManagement 开启注解式事务的支持</p><p>@EnableTransactionManagement 开启注解式事务的支持</p><p>@EnableCaching 开启注解式的缓存支持</p><h2 id="_11、测试相关注解" tabindex="-1"><a class="header-anchor" href="#_11、测试相关注解"><span><strong>11、测试相关注解</strong></span></a></h2><p>@RunWith 运行器，Spring中通常用于对JUnit的支持</p><p>@ContextConfiguration 用来加载配置ApplicationContext，其中classes属性用来加载配置类</p><h2 id="_12、springmvc部分" tabindex="-1"><a class="header-anchor" href="#_12、springmvc部分"><span>12、SpringMVC部分</span></a></h2><p>@EnableWebMvc 在配置类中开启Web MVC的配置支持，如一些ViewResolver或者MessageConverter等，若无此句，重写WebMvcConfigurerAdapter方法（用于对SpringMVC的配置）。</p><p>@Controller 声明该类为SpringMVC中的Controller</p><p>@RequestMapping 用于映射Web请求，包括访问路径和参数（类或方法上）</p><p>@ResponseBody 支持将返回值放在response内，而不是一个页面，通常用户返回json数据（返回值旁或方法上）</p><p>@RequestBody 允许request的参数在request体中，而不是在直接连接在地址后面。（放在参数前）</p><p>@PathVariable 用于接收路径参数，比如@RequestMapping(“/hello/{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。</p><p>@RestController 该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。</p><p>@ControllerAdvice 通过该注解，我们可以将对于控制器的全局配置放置在同一个位置，注解了@Controller的类的方法可使用@ExceptionHandler、@InitBinder、@ModelAttribute注解到方法上， 这对所有注解了 @RequestMapping的控制器内的方法有效。</p><p>@ExceptionHandler 用于全局处理控制器里的异常</p><p>@InitBinder 用来设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中。</p><p>@ModelAttribute 本来的作用是绑定键值对到Model里，在@ControllerAdvice中是让全局的@RequestMapping都能获得在此处设置的键值对。</p>`,54);function g(v,m){const t=p("ExternalLinkIcon");return i(),o("div",null,[c,a("p",null,[n("@Scope 设置Spring"),a("a",d,[n("容器"),r(t)]),n("如何新建Bean实例（方法上，得有@Bean） 其设置类型包括：")]),u])}const _=s(l,[["render",g],["__file","Spring的常用注解.html.vue"]]),S=JSON.parse('{"path":"/%E6%A1%86%E6%9E%B6/Spring/Spring%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html","title":"Spring的常用注解","lang":"zh-CN","frontmatter":{"description":"Spring的常用注解 注解本身没有功能的，就和 xml 一样。注解和 xml 都是一种元数据，元数据即解释数据的数据，这就是所谓配置。 本文主要罗列 Spring|Spring MVC相关注解的简介。 Spring部分 1、声明bean的注解 @Component 组件，没有明确的角色 @Service 在业务逻辑层使用（service层） @Rep...","head":[["meta",{"property":"og:url","content":"https://maijunxuan.cn/%E6%A1%86%E6%9E%B6/Spring/Spring%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"麦俊轩的博客"}],["meta",{"property":"og:title","content":"Spring的常用注解"}],["meta",{"property":"og:description","content":"Spring的常用注解 注解本身没有功能的，就和 xml 一样。注解和 xml 都是一种元数据，元数据即解释数据的数据，这就是所谓配置。 本文主要罗列 Spring|Spring MVC相关注解的简介。 Spring部分 1、声明bean的注解 @Component 组件，没有明确的角色 @Service 在业务逻辑层使用（service层） @Rep..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-09-19T15:32:06.000Z"}],["meta",{"property":"article:author","content":"maijunxuan"}],["meta",{"property":"article:modified_time","content":"2022-09-19T15:32:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring的常用注解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-09-19T15:32:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"maijunxuan\\"}]}"]]},"headers":[{"level":2,"title":"1、声明bean的注解","slug":"_1、声明bean的注解","link":"#_1、声明bean的注解","children":[]},{"level":2,"title":"2、注入bean的注解","slug":"_2、注入bean的注解","link":"#_2、注入bean的注解","children":[]},{"level":2,"title":"3、Java配置类相关注解","slug":"_3、java配置类相关注解","link":"#_3、java配置类相关注解","children":[]},{"level":2,"title":"4、切面（AOP）相关注解","slug":"_4、切面-aop-相关注解","link":"#_4、切面-aop-相关注解","children":[]},{"level":2,"title":"5、@Bean的属性支持","slug":"_5、-bean的属性支持","link":"#_5、-bean的属性支持","children":[]},{"level":2,"title":"6、@Value注解","slug":"_6、-value注解","link":"#_6、-value注解","children":[]},{"level":2,"title":"7、环境切换","slug":"_7、环境切换","link":"#_7、环境切换","children":[]},{"level":2,"title":"8、异步相关","slug":"_8、异步相关","link":"#_8、异步相关","children":[]},{"level":2,"title":"9、定时任务相关","slug":"_9、定时任务相关","link":"#_9、定时任务相关","children":[]},{"level":2,"title":"10、@Enable*注解说明","slug":"_10、-enable-注解说明","link":"#_10、-enable-注解说明","children":[]},{"level":2,"title":"11、测试相关注解","slug":"_11、测试相关注解","link":"#_11、测试相关注解","children":[]},{"level":2,"title":"12、SpringMVC部分","slug":"_12、springmvc部分","link":"#_12、springmvc部分","children":[]}],"git":{"createdTime":1663601526000,"updatedTime":1663601526000,"contributors":[{"name":"MJX","email":"1585225345@qq.com","commits":1}]},"readingTime":{"minutes":4.87,"words":1460},"filePathRelative":"框架/Spring/Spring的常用注解.md","localizedDate":"2022年9月19日","excerpt":"\\n<p>注解本身没有功能的，就和 xml 一样。注解和 xml 都是一种元数据，元数据即解释数据的数据，这就是所谓配置。</p>\\n<p>本文主要罗列 Spring|Spring MVC相关注解的简介。</p>\\n<p>Spring部分</p>\\n<h2><strong>1、声明bean的注解</strong></h2>\\n<p>@Component 组件，没有明确的角色</p>\\n<p>@Service 在业务逻辑层使用（service层）</p>\\n<p>@Repository 在数据访问层使用（dao层）</p>\\n<p>@Controller 在展现层使用，控制器的声明（C）</p>\\n<h2><strong>2、注入bean的注解</strong></h2>","autoDesc":true}');export{_ as comp,S as data};
