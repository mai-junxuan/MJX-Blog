import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-BRkwd1m1.js";const t={};function p(l,i){return e(),a("div",null,[...i[0]||(i[0]=[n(`<h1 id="基于gitee实现jenkins自动化部署springboot项目" tabindex="-1"><a class="header-anchor" href="#基于gitee实现jenkins自动化部署springboot项目"><span>基于Gitee实现Jenkins自动化部署SpringBoot项目</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>近期项目组需要对老项目做一些持续集成和持续部署的要求，所以再次部署了一边Jenkins，将整个配置过程记录到博客中。 在部署的过程中笔者尝试通过阿里云的方式部署了一遍，而本文为了更直观的介绍整个过程会给予虚拟机再次进行部署。</p><p>注:本篇教程部署过程是基于外网部署的，关于内网的部署过程后续笔者会将文章整理出来。</p><h2 id="预期效果" tabindex="-1"><a class="header-anchor" href="#预期效果"><span>预期效果</span></a></h2><p>如下图我们本次配置的Jenkins可以做到下图所示的效果:</p><ol><li>我们本地开发项目提交到gitee上。</li><li>gitee根据我们的配置通知Jenkins更新。</li><li>Jenkins收到更新通知完成最新分支拉取并更新服务器项目。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719479.png" alt="在这里插入图片描述"></p><p>所以我们现在在gitee上准备了这样一个spring boot项目。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719266.png" alt="在这里插入图片描述"></p><p>可以看到如果我们键入</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>curl 127.0.0.1:9500/hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么就会输出</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>Hello mjx!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这一点，我们也可以在服务器上得以印证。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719933.png" alt="在这里插入图片描述"></p><p>现在我们不妨做个修改，将输出结果改为hello java</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719098.png" alt="在这里插入图片描述"></p><p>然后将项目提交</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719552.png" alt="在这里插入图片描述"></p><p>随后可以看到我们服务器上的Jenkins自动开始打包。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719928.png" alt="在这里插入图片描述"></p><p>再次curl一遍，发现结果更新了。这就是我们的持续集成和持续部署的一次完整的流程，是不是比手动打包更方便呢？</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719465.png" alt="在这里插入图片描述"></p><p>了解了整体预期效果之后，我们就开始Jenkins的安装和配置过程。</p><h2 id="jenkins安装与配置" tabindex="-1"><a class="header-anchor" href="#jenkins安装与配置"><span>Jenkins安装与配置</span></a></h2><h3 id="准备jdk11" tabindex="-1"><a class="header-anchor" href="#准备jdk11"><span>准备jdk11</span></a></h3><p>注意，最新版本的Jenkins基本都是使用jdk11，所以我们这里需要提前准备一下jdk11。这一步网上应该很多地方都可以找到资料，感兴趣的读者可以自行配置。笔者这里服务器已经提前准备好了，就不多赘述了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719460.png" alt="在这里插入图片描述"></p><h3 id="下载jenkins安装包" tabindex="-1"><a class="header-anchor" href="#下载jenkins安装包"><span>下载Jenkins安装包</span></a></h3><p>首先自然是到Jenkins官网下载，笔者为了简单，就直接采用war包的形式进行部署。对应war包地址下载如下:</p><p><a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener noreferrer">http://mirrors.jenkins.io/war-stable/latest/jenkins.war(opens new window)</a></p><p>完成war包下载之后，我们将这个包推送到服务器上。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719598.png" alt="在这里插入图片描述"></p><h3 id="启动jenkins" tabindex="-1"><a class="header-anchor" href="#启动jenkins"><span>启动Jenkins</span></a></h3><p>为了保证后续步骤的顺利，我们先使用前台命令启动一下Jenkins。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/root/jdk11/bin/java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jenkins.war</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --httpPort=8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如下图所示，如果我们可以通过8080端口打开看到这个页面就说明Jenkins启动成功了。那么我们就可以开始进行Jenkins的初始化配置了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719811.png" alt="在这里插入图片描述"></p><h3 id="进行jenkins初始化配置" tabindex="-1"><a class="header-anchor" href="#进行jenkins初始化配置"><span>进行Jenkins初始化配置</span></a></h3><p>从上文图中我们知道初次访问Jenkins需要键入管理员密码，密码位置在上图也已经展示，我们按需找到对应文件复制粘贴即可。</p><p>我们键入命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /root/.jenkins/secrets/initialAdminPassword</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后会看到一段输出结果，我们将其复制粘贴到页面上即可。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719438.png" alt="在这里插入图片描述"></p><p>然后直接点击下一步</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719808.png" alt="在这里插入图片描述"></p><p>下一个页面，我们按照默认选择推荐插件安装即可。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719369.png" alt="在这里插入图片描述"></p><p>这一步可能比较久，大家需要耐心等待一会就好了。等到这一步完成之后我们进入用户基本信息配置了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719284.png" alt="在这里插入图片描述"></p><h3 id="基本信息页面配置用户基本信息" tabindex="-1"><a class="header-anchor" href="#基本信息页面配置用户基本信息"><span>基本信息页面配置用户基本信息</span></a></h3><p>如下图所示，我们只要配置后续用到的登录用户信息即可。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719583.png" alt="在这里插入图片描述"></p><p>这里选择默认即可，点击下一步即可。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719666.png" alt="在这里插入图片描述"></p><p>自此我们就完成了Jenkins最基础的配置了，后续我们就进入页面进行系统全局的配置了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719106.png" alt="在这里插入图片描述"></p><h3 id="常规插件安装" tabindex="-1"><a class="header-anchor" href="#常规插件安装"><span>常规插件安装</span></a></h3><p>笔者本次安装的版本为2.387.2，界面看起来还是蛮清爽的。这里我们需要点击下图所示的按钮进入管理界面，找到插件管理进行一些插件安装。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833088.png" alt="在这里插入图片描述"></p><p>如下图，我们点击manage plugins</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833008.png" alt="在这里插入图片描述"></p><p>首先找到Publish over SSH，点击安装。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719205.png" alt="在这里插入图片描述"></p><p>同理由于我们的项目为spring boot项目，所以我们要找到maven插件点击安装。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833222.png" alt="在这里插入图片描述"></p><p>由于我们的项目存放在gitee上，所以最后就是gitee插件了的安装了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833380.png" alt="在这里插入图片描述"></p><p>上述步骤安装完成之后，我们重启一下Jenkins确保插件生效以及后台启动开始进入下一步配置步骤。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nohup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /root/jdk11/bin/java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/jenkins/jenkins.war</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --httpPort=8080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="jenkins系统配置" tabindex="-1"><a class="header-anchor" href="#jenkins系统配置"><span>Jenkins系统配置</span></a></h3><p>我们点击系统配置进入Jenkins全局配置页面。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833674.png" alt="在这里插入图片描述"></p><p>首先滑到最下方，找到 Publish over SSH进行远程服务器配置。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833735.png" alt="在这里插入图片描述"></p><p>再往下滑一些输入远程服务器信息。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833392.png" alt="在这里插入图片描述"></p><p>点击一下测试配置，确认连通性，如果没问题，点击保存即可。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833065.png" alt="在这里插入图片描述"></p><h3 id="跨域配置解决" tabindex="-1"><a class="header-anchor" href="#跨域配置解决"><span>跨域配置解决</span></a></h3><p>笔者上一次搭建过程中，会遇到跨域的问题，所以这里提前设置的一下，解决跨域问题。首先我们点击全局安全设置。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833032.png" alt="在这里插入图片描述"></p><p>找到跨域请求伪造保护，勾选启动代理兼容器，完成后点击保存即可。 <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833329.png" alt="在这里插入图片描述"></p><p>这里还需要补充一部，笔者上一次部署Jenkins时gitee推送请求到Jenkins报了<code>403 No valid crumb was included in the request</code>，所以我们还需要点击脚本命令行输入一段指令解决另一个跨域问题。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833459.png" alt="在这里插入图片描述"></p><p>如下图所示,在文本框中输入</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后点击运行</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719603.png" alt="在这里插入图片描述"></p><p>出现result为true，就说明这一步成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835703.png" alt="在这里插入图片描述"></p><p>回到我们的全局安全配置页面，可以看到跨站请求伪造保护变成这样的文本，由此确认所有的跨域问题都配置解决了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719714.png" alt="在这里插入图片描述"></p><h3 id="插件配置" tabindex="-1"><a class="header-anchor" href="#插件配置"><span>插件配置</span></a></h3><p>接下来就是jdk、maven、git相关插件的配置了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833262.png" alt="在这里插入图片描述"></p><p>首先是maven的配置，这里只需指定maven的setting文件路径即可。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719978.png" alt="在这里插入图片描述"></p><p>然后就是jdk的配置</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719973.png" alt="在这里插入图片描述"></p><p>然后就是git的安装和配置了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833647.png" alt="在这里插入图片描述"></p><p>最后我们再配置一下maven的路径</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833946.png" alt="在这里插入图片描述"></p><h2 id="项目配置" tabindex="-1"><a class="header-anchor" href="#项目配置"><span>项目配置</span></a></h2><h3 id="准备一个spring-boot项目" tabindex="-1"><a class="header-anchor" href="#准备一个spring-boot项目"><span>准备一个spring-boot项目</span></a></h3><p>关于Jenkins的基本配置都差不多完成了，接下来我们就可以准备一个web项目实现持续集成和持续部署了。</p><p>这里笔者也提前准备好了一个spring boot项目并将其初始化提交到gitee仓库。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833390.png" alt="在这里插入图片描述"></p><h3 id="jenkins上创建一个item" tabindex="-1"><a class="header-anchor" href="#jenkins上创建一个item"><span>Jenkins上创建一个item</span></a></h3><p>点击新建任务</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833748.png" alt="在这里插入图片描述"></p><p>输入项目名称，选择构建一个maven项目并点击确定。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833469.png" alt="在这里插入图片描述"></p><p>然后我们就到达了项目配置页面了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832585.png" alt="在这里插入图片描述"></p><p>我们不妨先添加一段描述</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832645.png" alt="在这里插入图片描述"></p><p>然后输入项目的远程仓库地址，可以看到这里抛出了未认证的问题，原因很简单，我们没有键入git的账号和密码，所以我们点击添加键配置一下。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832596.png" alt="在这里插入图片描述"></p><p>点击添加，选择Jenkins凭据提供者。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832235.png" alt="在这里插入图片描述"></p><p>输入gitee账号和密码，然后点击确定。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832726.png" alt="在这里插入图片描述"></p><p>然后页面就会跳转回源码管理的页面，我们选择刚刚配置的账号即可。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832775.png" alt="在这里插入图片描述"></p><p>可以看到现在不仅不会报错了，还输出了一段分支的情况，这里我们默认选择master即可。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832208.png" alt="在这里插入图片描述"></p><p>我们继续往下滑找到build，输入构建的maven命令，以笔者为例，键入的maven命令为:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clean</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -U</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dmaven.testskip=true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意，上述测试命令无法避免编译测试，如果希望跳过所有测试的用户建议使用下面这个命令:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clean</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dmaven.test.skip=true</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D.test.skip=true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832452.png" alt="在这里插入图片描述"></p><p>然后我们就继续配置后置构建完成后的操作了，因为笔者后续会将项目存到tmp目录，所以笔者这里会在tmp目录写一个名为stop.sh的脚本，内容如下:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Stop Procedure : jenkins-spring-boot.jar&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pid</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jenkins-spring-boot.jar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $2}&#39;\`</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;old Procedure pid:&#39;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$pid</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$pid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">kill</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -9</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $pid</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fi</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">exit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后将这个脚本权限设置为777</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 777</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>完成这个脚本配置之后，我们就可以配置post step了</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832471.png" alt="在这里插入图片描述"></p><p>从上图中可以看到笔者键入了一段脚本，如下所示，这段脚本做的步骤为:</p><ol><li>maven打包</li><li>将打包的jar包复制到tmp目录下，注意这个目录路径格式为<code>Jenkins工作路径+创建的item名+target+jar包名称</code>。</li><li>进入tmp目录。</li><li>执行停止脚本。</li><li>重点！！！改变BUILD_ID值，避免Jenkins脚本执行结束后将我们启动的maven项目关闭。</li><li>启动项目。</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 复制文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /root/.jenkins/workspace/first-project/target/jenkins-spring-boot.jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 进入服务器目录</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 停止</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop.sh</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 修改BUILD_ID避免下面的启动命令启动的子进程被Jenkins杀掉</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">BUILD_ID</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">dontKillMe</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nohup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jenkins-spring-boot.jar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试部署过程是否成功" tabindex="-1"><a class="header-anchor" href="#测试部署过程是否成功"><span>测试部署过程是否成功</span></a></h3><p>完成所有配置后，我们可以先看看配置是否准确，这里点击构建测试一下。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832198.png" alt="在这里插入图片描述"></p><p>可以看到任务栏显示我们正在构建的任务，我们可以点击进度条查看进度。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832630.png" alt="在这里插入图片描述"></p><p>点击控制台输出可以查看构建详情。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832866.png" alt="在这里插入图片描述"></p><p>经过漫长的等待，可以看到我的部署成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832752.png" alt="在这里插入图片描述"></p><p>我们到服务器看看有没有启动的Java进程，如下所示，可以可以看到Jenkins成功的拉到我们的项目并将项目启动了。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost tmp]# ps -ef |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       9237</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 02:54</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        00:01:16</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /root/jdk11/bin/java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jenk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                                                                              ins.war</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --httpPort=8080</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      12928</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 05:38</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        00:00:03</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jenkins-spring-boot.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                                                                              jar</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      12969</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   9681</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 05:38</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pts/3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    00:00:00</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> grep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --color=auto</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试连通性，可以看到输出了hello java，自此Jenkins的基本部署配置是完成了。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost tmp]# curl 127.0.0.1:9500/hello</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Hello</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ![root@localhost</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tmp]#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基于gitee的webhook实现自动化部署" tabindex="-1"><a class="header-anchor" href="#基于gitee的webhook实现自动化部署"><span>基于gitee的webhook实现自动化部署</span></a></h2><h3 id="配置jenkins中的gitee配置" tabindex="-1"><a class="header-anchor" href="#配置jenkins中的gitee配置"><span>配置Jenkins中的gitee配置</span></a></h3><p>我们上文演示的项目可以看到，我们只需提交一下代码，Jenkins就会自动完成打包部署，这一点就是通过在gitee配置Jenkins的更新触发地址实现的，所以确保上述部署过程是成功的之后，我们不妨完善一下gitee的配置实现自动化部署。</p><p>我们在系统管理中找到系统配置选择gitee配置。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832363.png" alt="在这里插入图片描述"></p><p>如下图先输入完gitee链接名和url地址。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834311.png" alt="在这里插入图片描述"></p><p>然后点击添加配置gitee令牌。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834504.png" alt="在这里插入图片描述"></p><p>点击添加后会出现一个弹窗，如下图我们将类型设置为gitee api令牌，然后点击截图所示的地址到gitee去创建令牌。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835994.png" alt="在这里插入图片描述"></p><p>如下图点开这个链接输入我们的账号密码就会到达这个界面，我们需要点击添加创建一个令牌。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834713.png" alt="在这里插入图片描述"></p><p>如下图，我们编辑好描述直接点击提交。 <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280836946.png" alt="在这里插入图片描述"></p><p>然后我们就会得到一串令牌的值，点击复制。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834081.png" alt="在这里插入图片描述"></p><p>回到Jenkins粘贴上去，然后点击添加。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834736.png" alt="在这里插入图片描述"></p><p>此时页面就会跳转回gitee配置页面，我们选择刚刚配置的令牌。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834592.png" alt="在这里插入图片描述"></p><p>点击一下测试链接，确保成功之后，我们继续下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719419.png" alt="在这里插入图片描述"></p><h3 id="配置构建触发器" tabindex="-1"><a class="header-anchor" href="#配置构建触发器"><span>配置构建触发器</span></a></h3><p>回到Jenkins主页，点击我们配置的item</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834827.png" alt="在这里插入图片描述"></p><p>点击配置，进入配置界面</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834411.png" alt="在这里插入图片描述"></p><p>找到构建触发器，勾选gitee webhook触发构建，将截图中的url地址记下来，后面配置gitee会用到。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280836254.png" alt="在这里插入图片描述"></p><p>往下走一点，找到webhook密码点击生成，生成后将其复制下来，配置gitee会用到。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719938.png" alt="在这里插入图片描述"></p><p>完成配置并将url和生成密码记下来之后点击保存，进入gitee的配置。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834948.png" alt="在这里插入图片描述"></p><h3 id="配置gitee-webhook" tabindex="-1"><a class="header-anchor" href="#配置gitee-webhook"><span>配置gitee webhook</span></a></h3><p>上文我们得到的Jenkins触发地址和webhook密码，这里我们到gitee界面完成剩余配置。首先点击我们的gitee上对应项目的地址，选择管理。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834879.png" alt="在这里插入图片描述"></p><p>点击添加web hook,将刚刚复制的url和密码粘贴上去，完成后点击更新。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834358.png" alt="在这里插入图片描述"></p><p>我们回到页面，可以看到gitee自动触发了一次构建，可以看到请求结果为成功。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834982.png" alt="在这里插入图片描述"></p><p>我们立刻到Jenkins上看看，可以看到Jenkins收到了gitee的一次构建请求，自此自动化部署就算完全打通了，我们不妨修改一下代码测试一下全流程。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834355.png" alt="在这里插入图片描述"></p><h3 id="全流程测试" tabindex="-1"><a class="header-anchor" href="#全流程测试"><span>全流程测试</span></a></h3><p>如下图，我们将代码修改一下并提交，只要我们看到最终服务器上输出结果为hello shak-chili就说明Jenkins回自动化部署更新了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719202.png" alt="在这里插入图片描述"></p><p>代码提交后不久，我们看到看了Jenkins自动触发了一次更新。我们耐心等它构建完成。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835527.png" alt="在这里插入图片描述"></p><p>完成后，我们请求一下这个地址。可以看到输出结果为hello shack-chili，由此可知整个自动化部署步骤算是完结了。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835120.png" alt="在这里插入图片描述"></p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><p>有时候我们希望重启Jenkins让某些配置生效，亦或者让Jenkins关闭，这里笔者就介绍Jenkins中几个页面上重启和关闭的方式。</p><h3 id="浏览器进入jenkins完成登录" tabindex="-1"><a class="header-anchor" href="#浏览器进入jenkins完成登录"><span>浏览器进入Jenkins完成登录</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//Jenkins的ip地址:Jenkins启动端口/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="关闭jenkins" tabindex="-1"><a class="header-anchor" href="#关闭jenkins"><span>关闭Jenkins</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//Jenkins的ip地址:Jenkins启动端口/exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="重启jenkies" tabindex="-1"><a class="header-anchor" href="#重启jenkies"><span>重启Jenkies</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//Jenkins的ip地址:Jenkins启动端口/restart</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="重新加载配置信息" tabindex="-1"><a class="header-anchor" href="#重新加载配置信息"><span>重新加载配置信息</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//Jenkins的ip地址:Jenkins启动端口/reload</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,215)])])}const d=s(t,[["render",p]]),r=JSON.parse('{"path":"/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/%E5%9F%BA%E4%BA%8EGitee%E5%AE%9E%E7%8E%B0Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE.html","title":"基于Gitee实现Jenkins自动化部署SpringBoot项目","lang":"zh-CN","frontmatter":{"description":"基于Gitee实现Jenkins自动化部署SpringBoot项目 前言 近期项目组需要对老项目做一些持续集成和持续部署的要求，所以再次部署了一边Jenkins，将整个配置过程记录到博客中。 在部署的过程中笔者尝试通过阿里云的方式部署了一遍，而本文为了更直观的介绍整个过程会给予虚拟机再次进行部署。 注:本篇教程部署过程是基于外网部署的，关于内网的部署过...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基于Gitee实现Jenkins自动化部署SpringBoot项目\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719479.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719266.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719933.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719098.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719552.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719928.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719465.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719460.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719598.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719811.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719438.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719808.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719369.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719284.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719583.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719666.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719106.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833088.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833008.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719205.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833222.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833380.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833674.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833735.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833392.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833065.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833032.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833329.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833459.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719603.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835703.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719714.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833262.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719978.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719973.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833647.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833946.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833390.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833748.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280833469.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832585.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832645.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832596.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832235.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832726.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832775.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832208.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832452.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832471.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832198.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832630.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832866.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832752.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280832363.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834311.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834504.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835994.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834713.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280836946.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834081.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834736.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834592.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719419.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834827.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834411.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280836254.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719938.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834948.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834879.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834358.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834982.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280834355.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719202.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835527.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202308280835120.png\\"],\\"dateModified\\":\\"2023-08-28T00:49:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"maijunxuan\\",\\"email\\":\\"maijunxuan0309@gmail.com\\"}]}"],["meta",{"property":"og:url","content":"https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/%E5%9F%BA%E4%BA%8EGitee%E5%AE%9E%E7%8E%B0Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE.html"}],["meta",{"property":"og:site_name","content":"麦俊轩的博客"}],["meta",{"property":"og:title","content":"基于Gitee实现Jenkins自动化部署SpringBoot项目"}],["meta",{"property":"og:description","content":"基于Gitee实现Jenkins自动化部署SpringBoot项目 前言 近期项目组需要对老项目做一些持续集成和持续部署的要求，所以再次部署了一边Jenkins，将整个配置过程记录到博客中。 在部署的过程中笔者尝试通过阿里云的方式部署了一遍，而本文为了更直观的介绍整个过程会给予虚拟机再次进行部署。 注:本篇教程部署过程是基于外网部署的，关于内网的部署过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/img202305061719479.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-28T00:49:57.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-28T00:49:57.000Z"}]]},"git":{"createdTime":1693183797000,"updatedTime":1693183797000,"contributors":[{"name":"MJX","username":"MJX","email":"1585225345@qq.com","commits":1,"url":"https://github.com/MJX"}]},"readingTime":{"minutes":14.19,"words":4256},"filePathRelative":"工具/其他/基于Gitee实现Jenkins自动化部署SpringBoot项目.md","excerpt":"\\n<h2>前言</h2>\\n<p>近期项目组需要对老项目做一些持续集成和持续部署的要求，所以再次部署了一边Jenkins，将整个配置过程记录到博客中。 在部署的过程中笔者尝试通过阿里云的方式部署了一遍，而本文为了更直观的介绍整个过程会给予虚拟机再次进行部署。</p>\\n<p>注:本篇教程部署过程是基于外网部署的，关于内网的部署过程后续笔者会将文章整理出来。</p>\\n<h2>预期效果</h2>\\n<p>如下图我们本次配置的Jenkins可以做到下图所示的效果:</p>\\n<ol>\\n<li>我们本地开发项目提交到gitee上。</li>\\n<li>gitee根据我们的配置通知Jenkins更新。</li>\\n<li>Jenkins收到更新通知完成最新分支拉取并更新服务器项目。</li>\\n</ol>","autoDesc":true}');export{d as comp,r as data};
