(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{312:function(t,s,a){"use strict";a.r(s);var _=a(10),r=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"mvcc实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mvcc实现原理"}},[t._v("#")]),t._v(" MVCC实现原理")]),t._v(" "),s("h2",{attrs:{id:"一、什么是多版本并发控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是多版本并发控制"}},[t._v("#")]),t._v(" 一、什么是多版本并发控制")]),t._v(" "),s("p",[s("strong",[t._v("多版本并发控制")]),t._v("技术的英文全称是 "),s("strong",[t._v("Multiversion Concurrency Control")]),t._v("，简称 "),s("strong",[t._v("MVCC")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("多版本并发控制（MVCC）")]),t._v(" 是通过保存数据在某个时间点的快照来实现并发控制的。也就是说，不管事务执行多长时间，事务内部看到的数据是不受其它事务影响的，根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。")]),t._v(" "),s("p",[t._v("简单来说，"),s("strong",[t._v("多版本并发控制")]),t._v(" 的思想就是保存数据的历史版本，通过对数据行的多个版本管理来实现数据库的并发控制。这样我们就可以通过比较版本号决定数据是否显示出来，读取数据的时候不需要加锁也可以保证事务的隔离效果。")]),t._v(" "),s("p",[t._v("可以认为 "),s("strong",[t._v("多版本并发控制（MVCC）")]),t._v(" 是行级锁的一个变种，但是它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。")]),t._v(" "),s("p",[t._v("MySQL的大多数事务型存储引擎实现的都不是简单的行级锁。基于提升并发性能的考虑，它们一般都同时实现了多版本并发控制（MVCC）。不仅是MySQL，包括Oracle、PostgreSQL等其他数据库系统也都实现了MVCC，但各自的实现机制不尽相同，因为MVCC没有一个统一的实现标准，典型的有"),s("strong",[t._v("乐观（optimistic）并发控制")]),t._v("和"),s("strong",[t._v("悲观（pessimistic）并发控制")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"二、多版本并发控制解决了哪些问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、多版本并发控制解决了哪些问题"}},[t._v("#")]),t._v(" 二、多版本并发控制解决了哪些问题")]),t._v(" "),s("h3",{attrs:{id:"_1-读写之间阻塞的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-读写之间阻塞的问题"}},[t._v("#")]),t._v(" 1. 读写之间阻塞的问题")]),t._v(" "),s("p",[t._v("通过 MVCC 可以让读写互相不阻塞，即读不阻塞写，写不阻塞读，这样就可以提升事务并发处理能力。")]),t._v(" "),s("blockquote",[s("p",[t._v("提高并发的演进思路：")]),t._v(" "),s("ul",[s("li",[t._v("普通锁，只能串行执行；")]),t._v(" "),s("li",[t._v("读写锁，可以实现读读并发；")]),t._v(" "),s("li",[t._v("数据多版本并发控制，可以实现读写并发。")])])]),t._v(" "),s("h3",{attrs:{id:"_2-降低了死锁的概率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-降低了死锁的概率"}},[t._v("#")]),t._v(" 2. 降低了死锁的概率")]),t._v(" "),s("p",[t._v("因为 InnoDB 的 MVCC 采用了乐观锁的方式，读取数据时并不需要加锁，对于写操作，也只锁定必要的行。")]),t._v(" "),s("h3",{attrs:{id:"_3-解决一致性读的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-解决一致性读的问题"}},[t._v("#")]),t._v(" 3. 解决一致性读的问题")]),t._v(" "),s("p",[t._v("一致性读也被称为"),s("strong",[t._v("快照读")]),t._v("，当我们查询数据库在某个时间点的快照时，只能看到这个时间点之前事务提交更新的结果，而不能看到这个时间点之后事务提交的更新结果。")]),t._v(" "),s("h2",{attrs:{id:"三、快照读与当前读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、快照读与当前读"}},[t._v("#")]),t._v(" 三、快照读与当前读")]),t._v(" "),s("p",[s("strong",[t._v("快照读（SnapShot Read）")]),t._v(" 是一种"),s("strong",[t._v("一致性不加锁的读")]),t._v("，是"),s("strong",[t._v("InnoDB并发如此之高的核心原因之一")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("这里的"),s("strong",[t._v("一致性")]),t._v("是指，事务读取到的数据，要么是"),s("strong",[t._v("事务开始前就已经存在的数据")]),t._v("，要么是"),s("strong",[t._v("事务自身插入或者修改过的数据")]),t._v("。")])]),t._v(" "),s("p",[t._v("不加锁的简单的 SELECT 都属于"),s("strong",[t._v("快照读")]),t._v("，例如：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("SELECT * FROM t WHERE id=1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("与 "),s("strong",[t._v("快照读")]),t._v(" 相对应的则是 "),s("strong",[t._v("当前读")]),t._v("，"),s("strong",[t._v("当前读")]),t._v("就是读取最新数据，而不是历史版本的数据。加锁的 SELECT 就属于当前读，例如：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LOCK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SHARE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MODE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"四、innodb-的-mvcc-是如何工作的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、innodb-的-mvcc-是如何工作的"}},[t._v("#")]),t._v(" 四、InnoDB 的 MVCC 是如何工作的")]),t._v(" "),s("h3",{attrs:{id:"_1-innodb-是如何存储记录的多个版本的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-innodb-是如何存储记录的多个版本的"}},[t._v("#")]),t._v(" 1. InnoDB 是如何存储记录的多个版本的")]),t._v(" "),s("h4",{attrs:{id:"事务版本号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务版本号"}},[t._v("#")]),t._v(" 事务版本号")]),t._v(" "),s("p",[t._v("每开启一个事务，我们都会从数据库中获得一个事务 ID（也就是事务版本号），这个事务 ID 是自增长的，通过 ID 大小，我们就可以判断事务的时间顺序。")]),t._v(" "),s("h4",{attrs:{id:"行记录的隐藏列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行记录的隐藏列"}},[t._v("#")]),t._v(" 行记录的隐藏列")]),t._v(" "),s("p",[t._v("InnoDB 的叶子段存储了数据页，数据页中保存了行记录，而在行记录中有一些重要的隐藏字段：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("DB_ROW_ID")]),t._v("：6-byte，隐藏的行 ID，用来生成默认聚簇索引。如果我们创建数据表的时候没有指定聚簇索引，这时 InnoDB 就会用这个隐藏 ID 来创建聚集索引。采用聚簇索引的方式可以提升数据的查找效率。")]),t._v(" "),s("li",[s("code",[t._v("DB_TRX_ID")]),t._v("：6-byte，操作这个数据的事务 ID，也就是最后一个对该数据进行插入或更新的事务 ID。")]),t._v(" "),s("li",[s("code",[t._v("DB_ROLL_PTR")]),t._v("：7-byte，回滚指针，也就是指向这个记录的 Undo Log 信息。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://segmentfault.com/img/bVbyzVU",alt:"InnoDB数据记录隐藏列"}})]),t._v(" "),s("h4",{attrs:{id:"undo-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#undo-log"}},[t._v("#")]),t._v(" Undo Log")]),t._v(" "),s("p",[t._v("InnoDB 将行记录快照保存在了 Undo Log 里，我们可以在回滚段中找到它们，如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://segmentfault.com/img/bVbyzV9",alt:"Undo Log回滚历史记录"}})]),t._v(" "),s("p",[t._v("从图中能看到回滚指针将数据行的所有快照记录都通过链表的结构串联了起来，每个快照的记录都保存了当时的 db_trx_id，也是那个时间点操作这个数据的事务 ID。这样如果我们想要找历史快照，就可以通过遍历回滚指针的方式进行查找。")]),t._v(" "),s("h3",{attrs:{id:"_2-在-可重复读-repeatable-read-隔离级别下-innodb-的-mvcc-是如何工作的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-在-可重复读-repeatable-read-隔离级别下-innodb-的-mvcc-是如何工作的"}},[t._v("#")]),t._v(" 2. 在 "),s("strong",[t._v("可重复读（REPEATABLE READ）")]),t._v(" 隔离级别下， InnoDB 的 MVCC 是如何工作的")]),t._v(" "),s("h4",{attrs:{id:"查询-select"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询-select"}},[t._v("#")]),t._v(" 查询（SELECT）")]),t._v(" "),s("p",[t._v("InnoDB 会根据以下两个条件检查每行记录：")]),t._v(" "),s("ol",[s("li",[t._v("InnoDB只查找版本早于当前事务版本的数据行（也就是，行的系统版本号小于或等于事务的系统版本号），这样可以"),s("strong",[t._v("确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的")]),t._v("。")]),t._v(" "),s("li",[t._v("行的删除版本要么未定义，要么大于当前事务版本号。这可以确保"),s("strong",[t._v("事务读取到的行，在事务开始之前未被删除")]),t._v("。")])]),t._v(" "),s("p",[t._v("只有符合上述两个条件的记录，才能返回作为查询结果。")]),t._v(" "),s("h4",{attrs:{id:"插入-insert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入-insert"}},[t._v("#")]),t._v(" 插入（INSERT）")]),t._v(" "),s("p",[t._v("InnoDB为新插入的每一行保存当前系统版本号作为行版本号。")]),t._v(" "),s("h4",{attrs:{id:"删除-delete"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除-delete"}},[t._v("#")]),t._v(" 删除（DELETE）")]),t._v(" "),s("p",[t._v("InnoDB为删除的每一行保存当前系统版本号作为行删除标识。\n删除在内部被视为更新，行中的一个特殊位会被设置为已删除。")]),t._v(" "),s("h4",{attrs:{id:"更新-update"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新-update"}},[t._v("#")]),t._v(" 更新（UPDATE）")]),t._v(" "),s("p",[t._v("InnoDB为插入一行新记录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识。")]),t._v(" "),s("h2",{attrs:{id:"五、总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、总结"}},[t._v("#")]),t._v(" 五、总结")]),t._v(" "),s("p",[s("strong",[t._v("多版本并发控制（MVCC）")]),t._v(" 在一定程度上实现了"),s("strong",[t._v("读写并发")]),t._v("，它只在 "),s("strong",[t._v("可重复读（REPEATABLE READ）")]),t._v(" 和 "),s("strong",[t._v("提交读（READ COMMITTED）")]),t._v(" 两个隔离级别下工作。其他两个隔离级别都和 MVCC 不兼容，因为 "),s("strong",[t._v("未提交读（READ UNCOMMITTED）")]),t._v("，总是读取最新的数据行，而不是符合当前事务版本的数据行。而 "),s("strong",[t._v("可串行化（SERIALIZABLE）")]),t._v(" 则会对所有读取的行都加锁。")]),t._v(" "),s("p",[s("strong",[t._v("行锁，并发，事务回滚")]),t._v("等多种特性都和MVCC相关。")])])}),[],!1,null,null,null);s.default=r.exports}}]);