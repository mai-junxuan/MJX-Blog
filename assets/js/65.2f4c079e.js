(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{334:function(v,_,e){"use strict";e.r(_);var a=e(10),t=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"分布式事务的解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务的解决方案"}},[v._v("#")]),v._v(" 分布式事务的解决方案")]),v._v(" "),_("p",[v._v("可随着业务量的不断增长，单体架构渐渐扛不住巨大的流量，此时就需要对数据库、表做 "),_("code",[v._v("分库分表")]),v._v("处理，将应用 "),_("code",[v._v("SOA")]),v._v(" 服务化拆分。也就产生了订单中心、用户中心、库存中心等，由此带来的问题就是业务间相互隔离，每个业务都维护着自己的数据库，数据的交换只能进行 "),_("code",[v._v("RPC")]),v._v(" 调用。")]),v._v(" "),_("p",[v._v("当用户再次下单时，需同时对订单库 "),_("code",[v._v("order")]),v._v("、库存库 "),_("code",[v._v("storage")]),v._v("、用户库 "),_("code",[v._v("account")]),v._v(" 进行操作，可此时我们只能保证自己本地的数据一致性，无法保证调用其他服务的操作是否成功，所以为了保证整个下单流程的数据一致性，就需要分布式事务介入。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207140013888.png",alt:"img"}})]),v._v(" "),_("h2",{attrs:{id:"seata-优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#seata-优势"}},[v._v("#")]),v._v(" Seata 优势")]),v._v(" "),_("p",[v._v("实现分布式事务的方案比较多，常见的比如基于 "),_("code",[v._v("XA")]),v._v(" 协议的 "),_("code",[v._v("2PC")]),v._v("、"),_("code",[v._v("3PC")]),v._v("，基于业务层的 "),_("code",[v._v("TCC")]),v._v("，还有应用消息队列 + 消息表实现的最终一致性方案，还有今天要说的 "),_("code",[v._v("Seata")]),v._v(" 中间件，下边看看各个方案的优缺点。")]),v._v(" "),_("h3",{attrs:{id:"_2pc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2pc"}},[v._v("#")]),v._v(" "),_("code",[v._v("2PC")])]),v._v(" "),_("p",[v._v("基于 XA 协议实现的分布式事务，XA 协议中分为两部分：事务管理器和本地资源管理器。其中本地资源管理器往往由数据库实现，比如 Oracle、MYSQL 这些数据库都实现了 XA 接口，而事务管理器则作为一个全局的调度者。")]),v._v(" "),_("p",[v._v("两阶段提交（"),_("code",[v._v("2PC")]),v._v("），对业务侵⼊很小，它最⼤的优势就是对使⽤⽅透明，用户可以像使⽤本地事务⼀样使⽤基于 XA 协议的分布式事务，能够严格保障事务 ACID 特性。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207140013858.png",alt:"img"}})]),v._v(" "),_("p",[v._v("可 "),_("code",[v._v("2PC")]),v._v("的缺点也是显而易见，它是一个强一致性的同步阻塞协议，事务执⾏过程中需要将所需资源全部锁定，也就是俗称的 "),_("code",[v._v("刚性事务")]),v._v("。所以它比较适⽤于执⾏时间确定的短事务，整体性能比较差。")]),v._v(" "),_("p",[v._v("一旦事务协调者宕机或者发生网络抖动，会让参与者一直处于锁定资源的状态或者只有一部分参与者提交成功，导致数据的不一致。因此，在⾼并发性能⾄上的场景中，基于 XA 协议的分布式事务并不是最佳选择。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207140013892.png",alt:"img"}})]),v._v(" "),_("h3",{attrs:{id:"_3pc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3pc"}},[v._v("#")]),v._v(" "),_("code",[v._v("3PC")])]),v._v(" "),_("p",[v._v("三段提交（"),_("code",[v._v("3PC")]),v._v("）是二阶段提交（"),_("code",[v._v("2PC")]),v._v("）的一种改进版本 ，为解决两阶段提交协议的阻塞问题，上边提到两段提交，当协调者崩溃时，参与者不能做出最后的选择，就会一直保持阻塞锁定资源。")]),v._v(" "),_("p",[_("code",[v._v("2PC")]),v._v(" 中只有协调者有超时机制，"),_("code",[v._v("3PC")]),v._v(" 在协调者和参与者中都引入了超时机制，协调者出现故障后，参与者就不会一直阻塞。而且在第一阶段和第二阶段中又插入了一个准备阶段（如下图，看着有点啰嗦），保证了在最后提交阶段之前各参与节点的状态是一致的。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202207140013866.png",alt:"img"}})]),v._v(" "),_("p",[v._v("虽然 "),_("code",[v._v("3PC")]),v._v(" 用超时机制，解决了协调者故障后参与者的阻塞问题，但与此同时却多了一次网络通信，性能上反而变得更差，也不太推荐。")]),v._v(" "),_("h2",{attrs:{id:"tcc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcc"}},[v._v("#")]),v._v(" TCC")]),v._v(" "),_("p",[v._v("所谓的 "),_("code",[v._v("TCC")]),v._v(" 编程模式，也是两阶段提交的一个变种，不同的是 "),_("code",[v._v("TCC")]),v._v(" 为在业务层编写代码实现的两阶段提交。"),_("code",[v._v("TCC")]),v._v(" 分别指 "),_("code",[v._v("Try")]),v._v("、"),_("code",[v._v("Confirm")]),v._v("、"),_("code",[v._v("Cancel")]),v._v(" ，一个业务操作要对应的写这三个方法。")]),v._v(" "),_("p",[v._v("以下单扣库存为例，"),_("code",[v._v("Try")]),v._v(" 阶段去占库存，"),_("code",[v._v("Confirm")]),v._v(" 阶段则实际扣库存，如果库存扣减失败 "),_("code",[v._v("Cancel")]),v._v(" 阶段进行回滚，释放库存。")]),v._v(" "),_("p",[v._v("TCC 不存在资源阻塞的问题，因为每个方法都直接进行事务的提交，一旦出现异常通过则 "),_("code",[v._v("Cancel")]),v._v(" 来进行回滚补偿，这也就是常说的补偿性事务。")]),v._v(" "),_("p",[v._v("原本一个方法，现在却需要三个方法来支持，可以看到 TCC 对业务的侵入性很强，而且这种模式并不能很好地被复用，会导致开发量激增。还要考虑到网络波动等原因，为保证请求一定送达都会有重试机制，所以考虑到接口的幂等性。")])])}),[],!1,null,null,null);_.default=t.exports}}]);