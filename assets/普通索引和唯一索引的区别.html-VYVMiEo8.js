import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as n,o as r}from"./app-DygdxmPh.js";const o={};function p(s,e){return r(),t("div",null,[...e[0]||(e[0]=[n('<h1 id="普通索引和唯一索引的区别" tabindex="-1"><a class="header-anchor" href="#普通索引和唯一索引的区别"><span>普通索引和唯一索引的区别</span></a></h1><p>普通索引和唯一索引的区别就是，普通索引的字段内容是可以重复的，唯一索引的字段内容不可重复。</p><h2 id="一、查询过程" tabindex="-1"><a class="header-anchor" href="#一、查询过程"><span>一、查询过程</span></a></h2><p>假设查询语句为<code>select id from test where k=10;</code>首先会通过B+树的树根开始按层搜索叶子节点，找到对应的数据页后，在页内进行二分查找定位记录。</p><ul><li>对于普通索引，查找到第一条符合条件的记录(id,10)之后，<strong>继续往后查找，直到找到第一条不满足k=10的记录</strong>；</li><li>对于唯一索引，<strong>查找到第一条符合条件的记录(id,10)之后，直接返回结果</strong>；</li></ul><blockquote><p>唯一索引定义了唯一性，有且只有一条符合条件的记录，普通索引则可能存在多条记录</p></blockquote><p><strong>这两种情况下，性能会相差多少？</strong></p><p>我们知道，InnoDB中的数据是按<strong>数据页为单位进行读写</strong>的，也就是说，当找到K=10的那条记录，包含这条记录的数据页已经在内存中，并且是顺序读取，读取一条记录和读取多条记录，性能相差不了多少。当然，如果刚好要读取的下一条记录在下一个数据页，花费的时间会长一点，但是这是小概率事件。 总而言之，<strong>对于查询过程，普通索引和唯一索引的效率相近</strong>。</p><h2 id="二、更新过程" tabindex="-1"><a class="header-anchor" href="#二、更新过程"><span>二、更新过程</span></a></h2><h3 id="_1-change-buffer" tabindex="-1"><a class="header-anchor" href="#_1-change-buffer"><span>1. change buffer</span></a></h3><p>当需要更新某个数据页时，有两种情况：</p><ul><li>数据页在内存中：直接更新，该数据页标记为脏。</li><li>数据页不在内存中，把更新操作缓存在change buffer当中，在下次需要读取这个数据页时，把该数据页加载到内存，并且把change buffer中的更新操作应用到数据页中，以此保证数据的一致性。</li></ul><h3 id="_2、merge" tabindex="-1"><a class="header-anchor" href="#_2、merge"><span>2、merge</span></a></h3><p>将change buffer中的操作应用到原始数据页的过程称为merge。 触发merge的情况有以下几种：读取该数据页、系统后台定期merge、数据库正常关闭。</p><p>显然，将更新语句缓存在change buffer的好处有两个：1、减少磁盘的IO次数，语句执行速度提升；2、减少数据页读入内存，提高内存利用率；</p><h3 id="_3、使用场景" tabindex="-1"><a class="header-anchor" href="#_3、使用场景"><span>3、使用场景</span></a></h3><p>当然，并不是任何情况下使用change buffer都会提升性能的。</p><h4 id="唯一索引还是普通索引" tabindex="-1"><a class="header-anchor" href="#唯一索引还是普通索引"><span>唯一索引还是普通索引？</span></a></h4><p>对于唯一索引，每次对数据的更新都需要先把数据页加载到内存，判断是否违反唯一性约束，而对于已经在内存当中的数据页，是否随机读写已经不重要了，也就没有必要使用change buffer缓存更新操作。</p><p>对于普通索引，由于不需要数据页在内存中判断唯一性约束，可以缓存更新操作，减少了对磁盘的随机IO次数。</p><h4 id="普通索引就可以了吗" tabindex="-1"><a class="header-anchor" href="#普通索引就可以了吗"><span>普通索引就可以了吗？</span></a></h4><p>如果业务场景是写后需要立即读取，change buffer还有优势吗？</p><p>更新操作写入change buffer后，由于需要马上读取，也就是立即触发了merge过程，这种情况下磁盘的随机IO次数并不会减少，甚至还额外增加了change buffer的维护成本。</p><p>也就是说，<strong>change buffer适用于写多读少的场景</strong>，这样才能在下一次merge之前缓存更多的更新操作，收益才更大。这种业务模型常见的就是账单、日志等系统。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>由于唯一索引用不了change buffer的优化机制，因此如果业务可以接受，从性能角度，推荐优先考虑非唯一索引。</p>',26)])])}const h=a(o,[["render",p]]),d=JSON.parse('{"path":"/MySQL/%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95%E5%92%8C%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"普通索引和唯一索引的区别","lang":"zh-CN","frontmatter":{"description":"普通索引和唯一索引的区别 普通索引和唯一索引的区别就是，普通索引的字段内容是可以重复的，唯一索引的字段内容不可重复。 一、查询过程 假设查询语句为select id from test where k=10;首先会通过B+树的树根开始按层搜索叶子节点，找到对应的数据页后，在页内进行二分查找定位记录。 对于普通索引，查找到第一条符合条件的记录(id,10...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"普通索引和唯一索引的区别\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-09-19T15:32:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"maijunxuan\\",\\"email\\":\\"maijunxuan0309@gmail.com\\"}]}"],["meta",{"property":"og:url","content":"https://maijunxuan.cn/MySQL/%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95%E5%92%8C%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8C%BA%E5%88%AB.html"}],["meta",{"property":"og:site_name","content":"麦俊轩的博客"}],["meta",{"property":"og:title","content":"普通索引和唯一索引的区别"}],["meta",{"property":"og:description","content":"普通索引和唯一索引的区别 普通索引和唯一索引的区别就是，普通索引的字段内容是可以重复的，唯一索引的字段内容不可重复。 一、查询过程 假设查询语句为select id from test where k=10;首先会通过B+树的树根开始按层搜索叶子节点，找到对应的数据页后，在页内进行二分查找定位记录。 对于普通索引，查找到第一条符合条件的记录(id,10..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-09-19T15:32:06.000Z"}],["meta",{"property":"article:modified_time","content":"2022-09-19T15:32:06.000Z"}]]},"git":{"createdTime":1663601526000,"updatedTime":1663601526000,"contributors":[{"name":"MJX","username":"MJX","email":"1585225345@qq.com","commits":1,"url":"https://github.com/MJX"}]},"readingTime":{"minutes":3.19,"words":957},"filePathRelative":"MySQL/普通索引和唯一索引的区别.md","excerpt":"\\n<p>普通索引和唯一索引的区别就是，普通索引的字段内容是可以重复的，唯一索引的字段内容不可重复。</p>\\n<h2>一、查询过程</h2>\\n<p>假设查询语句为<code>select id from test where k=10;</code>首先会通过B+树的树根开始按层搜索叶子节点，找到对应的数据页后，在页内进行二分查找定位记录。</p>\\n<ul>\\n<li>对于普通索引，查找到第一条符合条件的记录(id,10)之后，<strong>继续往后查找，直到找到第一条不满足k=10的记录</strong>；</li>\\n<li>对于唯一索引，<strong>查找到第一条符合条件的记录(id,10)之后，直接返回结果</strong>；</li>\\n</ul>","autoDesc":true}');export{h as comp,d as data};
