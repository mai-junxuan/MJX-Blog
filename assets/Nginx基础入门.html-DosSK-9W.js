import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as l,c as p,b as a,d as n,e as o,a as s}from"./app-2Nmlc3aW.js";const c={},r=s(`<h1 id="nginx基础入门" tabindex="-1"><a class="header-anchor" href="#nginx基础入门"><span>nginx基础入门</span></a></h1><h2 id="nginx常用命令" tabindex="-1"><a class="header-anchor" href="#nginx常用命令"><span>nginx常用命令</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code># 进入nginx目录
cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin
# 查看nginx版本号
<span class="token punctuation">.</span>/nginx <span class="token operator">-</span>v

# 启动nginx
<span class="token punctuation">.</span>/nginx

# 停止nginx
<span class="token punctuation">.</span>/nginx <span class="token operator">-</span>s stop

# 重新加载nginx
<span class="token punctuation">.</span>/nginx <span class="token operator">-</span>s reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nginx配置文件简介" tabindex="-1"><a class="header-anchor" href="#nginx配置文件简介"><span>nginx配置文件简介</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code># 查看tomcat配置
cat <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf
全局配置

#user nobody；                         #运行用户

<span class="token class-name">Worker_processes</span> <span class="token number">1</span> <span class="token punctuation">;</span>               #工作进程数量

#error_log  log<span class="token operator">/</span>error<span class="token punctuation">.</span>log           #错误日志文件的位置

#pid     log<span class="token operator">/</span>nginx<span class="token punctuation">.</span>pid                 #<span class="token constant">PID</span>文件的位置



<span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span>事件配置

events<span class="token punctuation">{</span>

use  epoll<span class="token punctuation">;</span>                              #使用epoll模型

worker_connections <span class="token number">4096</span>     #每进程处理<span class="token number">4096</span>个连接

<span class="token punctuation">}</span>

<span class="token constant">HTTP</span>配置

http <span class="token punctuation">{</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

include mine<span class="token punctuation">.</span>types<span class="token punctuation">;</span>                                              #nginx支持的媒体类型库文件

#include  benet<span class="token operator">/</span>www<span class="token punctuation">.</span>conf     #配置多个虚拟机主机，把server<span class="token punctuation">{</span><span class="token punctuation">}</span>内的内容复制到外面新建的www<span class="token punctuation">.</span>conf后包含进去     

default_type        application<span class="token operator">/</span>octet<span class="token operator">-</span>stranm<span class="token punctuation">;</span> #默认的媒体类型

access_log   log<span class="token operator">/</span>access<span class="token punctuation">.</span>log     main<span class="token punctuation">;</span>   #访问日志位置

sendfile       on <span class="token punctuation">;</span>    #开启高效传输模式<span class="token punctuation">(</span>支持文件发送下载<span class="token punctuation">)</span>

keepalive_timeout <span class="token number">65</span><span class="token punctuation">;</span>     #连接保持超时



server <span class="token punctuation">{</span>                                                               #可配置对三个基于域名的虚拟主机

listen    <span class="token number">80</span><span class="token punctuation">;</span>       #web服务的监听配置

server_name   www<span class="token punctuation">.</span>benet<span class="token punctuation">.</span>com   #网站名称（<span class="token constant">FQDN</span>），别名就是在后面再添加网址

charset  utf<span class="token operator">-</span><span class="token number">8</span>               #网页的默认字符集

location <span class="token operator">/</span> <span class="token punctuation">{</span>

      root   html<span class="token punctuation">;</span>           #网站根目录的位置

     error_page    <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>    #出现对应的http状态码时，使<span class="token number">50</span>x<span class="token punctuation">.</span>html回应客户

    location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>

            root     html<span class="token punctuation">;</span>        #指定对应的站点目录为html

<span class="token punctuation">}</span>

         index index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>php      #默认首页    

         <span class="token punctuation">}</span>

<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nginx反向代理" tabindex="-1"><a class="header-anchor" href="#nginx反向代理"><span>nginx反向代理</span></a></h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><p>网站建立后，用户希望只需通过一个url即可访问网站。但是网站所使的服务器可能远不止一台(考虑到用户的访问量在多台服务器上配置tomcat)，所以如何访问通过一个url且还能保证服务器负载均衡的情况下完成用户访问我们的网站呢？nginx的反向代理就是最好的解决方案。 如下图所示，用户通过<code>www.xxx.com</code>交由dns解析到而访问到nginx，此时nginx就是一个反向代理的角色，nginx这时候就会工具服务器详情动态的决定访问哪台服务器。</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030024451.png" alt="image-20220903002420204"></p><h3 id="反向代理示例1" tabindex="-1"><a class="header-anchor" href="#反向代理示例1"><span>反向代理示例1</span></a></h3><h4 id="需求描述" tabindex="-1"><a class="header-anchor" href="#需求描述"><span>需求描述</span></a></h4>`,11),d={href:"http://www.test.com/",target:"_blank",rel:"noopener noreferrer"},u=s(`<h4 id="前置步骤" tabindex="-1"><a class="header-anchor" href="#前置步骤"><span>前置步骤</span></a></h4><p>安装tomcat服务器</p><p>设置域名重定向</p><p>由于本次实验需要通过域名访问nginx然后通过nginx请求tomcat主页并返回，所以为避免dns无法解析我们模拟的域名地址，可以在本机Windows下配置域名解析，具体步骤如下</p><ol><li>进入如下目录编辑hosts文件</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">C</span><span class="token operator">:</span>\\<span class="token class-name">Windows</span>\\<span class="token class-name">System32</span>\\drivers\\etc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>编辑该配置文件，内容如下，这里的ip地址是和本机桥接的虚拟机ip地址</li><li><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030024240.png" alt="image-20220903002442301"></li></ol><h4 id="nginx配置步骤" tabindex="-1"><a class="header-anchor" href="#nginx配置步骤"><span>nginx配置步骤</span></a></h4><p>配置nginx请求转发 如下图所示，编辑<code>/usr/local/nginx/conf/nginx.conf</code>将内容改为如下所示</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025806.png" alt="image-20220903002502384"></p><p>重启nginx</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>#进入sbin目录输入
<span class="token punctuation">.</span>/nginx <span class="token operator">-</span>s reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看结果 <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025517.png" alt="在这里插入图片描述"></p><h3 id="反向代理示例2" tabindex="-1"><a class="header-anchor" href="#反向代理示例2"><span>反向代理示例2</span></a></h3><h4 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h4><p>使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中，nginx 监听端口为 9001。即访问<code>192.168.1.29:9001/test1/index.html</code>和<code>192.168.1.29:9001/test2/index.html</code>访问结果是不同的</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025867.png" alt="在这里插入图片描述"></p><h4 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h4><ol><li>增加一台tomcat，如之前所示，注意修改相关端口与之区分，修改的端口如下所示：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026552.png" alt="image-20220903002548213"></p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025267.png" alt="在这里插入图片描述">)<img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026920.png" alt="在这里插入图片描述"></p><ol><li>启动tomcat</li><li>为两个tomcat配置不同的页面,即在分别在两台tomcat服务器下<code>webapp</code>下,第一台tomcat参见test1目录并添加index网页，第二台tomcat服务器参见test2目录添加index网页。</li><li>测试两台tomcat</li></ol><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026407.png" alt="image-20220903002636221"></p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026433.png" alt="image-20220903002653947"></p><ol><li>进行反向代理配置 进入nginx.conf进行如下配置</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  server <span class="token punctuation">{</span>
        listen       <span class="token number">9001</span><span class="token punctuation">;</span>
        server_name  <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.29</span><span class="token punctuation">;</span>

        location <span class="token operator">~</span> <span class="token operator">/</span>test1<span class="token operator">/</span> <span class="token punctuation">{</span>
          proxy_pass   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

    location <span class="token operator">~</span> <span class="token operator">/</span>test2<span class="token operator">/</span> <span class="token punctuation">{</span>
          proxy_pass   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8081</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>开放9001端口</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>zone<span class="token operator">=</span><span class="token keyword">public</span> <span class="token operator">--</span>add<span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">9001</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanent
systemctl stop firewalld<span class="token punctuation">.</span>service
systemctl start firewalld<span class="token punctuation">.</span>service

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>测试</li></ol><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030028159.png" alt="image-20220903002810057"></p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030028558.png" alt="image-20220903002825015"></p><h2 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h2><h3 id="需求-1" tabindex="-1"><a class="header-anchor" href="#需求-1"><span>需求</span></a></h3><p>浏览器地址栏输入地址 <code>http://192.168.1.29/study/index.html</code> 请求web页面，nginx会将多个http请求分配到8080或者8081服务器中。</p><h3 id="步骤-1" tabindex="-1"><a class="header-anchor" href="#步骤-1"><span>步骤</span></a></h3><ol><li><p>准备两台tomcat服务器，并在webapp目录下创建study文件夹，并在文件夹中都创建一个index.html内容随意</p></li><li><p>开启tomcat测试是否可达</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030029388.png" alt="image-20220903002909832"></p></li><li><p>配置nginx负载均衡配置 如下所示，<code>upstream</code> 即负载服务器，下文将<code>upstream</code>起名为myserver，然后在server中配置负载服务器名myserver即可完成负载均衡配置。</p></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> upstream myserver<span class="token punctuation">{</span>
        server <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.29</span><span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">;</span>
        server <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.29</span><span class="token operator">:</span><span class="token number">8081</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

    server <span class="token punctuation">{</span>
        listen       <span class="token number">80</span><span class="token punctuation">;</span>
        server_name  <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.29</span><span class="token punctuation">;</span>

        #charset koi8<span class="token operator">-</span>r<span class="token punctuation">;</span>

        #access_log  logs<span class="token operator">/</span>host<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>

        location <span class="token operator">/</span> <span class="token punctuation">{</span>
            root   html<span class="token punctuation">;</span>
            proxy_pass http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>myserver<span class="token punctuation">;</span>
            index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>测试</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030029013.png" alt="image-20220903001416365"></p><h3 id="nginx-分配服务器策略" tabindex="-1"><a class="header-anchor" href="#nginx-分配服务器策略"><span>nginx 分配服务器策略</span></a></h3><h4 id="第一种-轮询-默认" tabindex="-1"><a class="header-anchor" href="#第一种-轮询-默认"><span>第一种 轮询（默认）</span></a></h4><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉,则自动剔除。</p><h4 id="第二种-weight" tabindex="-1"><a class="header-anchor" href="#第二种-weight"><span>第二种 weight</span></a></h4><p>weight 代表权重默认为 1, 权重越高被分配的客户端越多</p><h4 id="第三种-ip-hash" tabindex="-1"><a class="header-anchor" href="#第三种-ip-hash"><span>第三种 ip_hash</span></a></h4><p>每个请求按访问 ip 的 的 hash 结果分配，这样每个访客固定访问一个后端服务器</p><h4 id="第四种-fair-第三方" tabindex="-1"><a class="header-anchor" href="#第四种-fair-第三方"><span>第四种 fair （第三方）</span></a></h4><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p></li></ol><h2 id="动静分离" tabindex="-1"><a class="header-anchor" href="#动静分离"><span>动静分离</span></a></h2><p>我们都知道请求一个web页面过程中，需要加载动态数据或者静态数据。动态数据变化多端，而静态数据基本不变。动静分离以后我们可以对静态文件进行缓存、或者压缩提高网站性能。</p><h3 id="模拟实验" tabindex="-1"><a class="header-anchor" href="#模拟实验"><span>模拟实验</span></a></h3><p>为了模仿动态文件和静态文件的场景，笔者在/data目录下创建www作为动态文件夹，img为静态文件夹。通过同一个http请求+文件路径模仿动态文件和静态文件的访问过程。</p><h3 id="配置步骤" tabindex="-1"><a class="header-anchor" href="#配置步骤"><span>配置步骤</span></a></h3><ol><li>data文件夹下创建动态文件和静态文件目录并添加文件</li><li>nginx添加如下配置</li></ol><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030029668.png" alt="image-20220903002941796"></p><ol start="3"><li><p>测试</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030900.png" alt="image-20220903003003145"></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030572.png" alt="image-20220903003017327"></p><h2 id="高可用配置" tabindex="-1"><a class="header-anchor" href="#高可用配置"><span>高可用配置</span></a></h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>如下图，若只有一台nginx时，常规情况下发起http请求由nginx代理是正常的。当这台nginx服务器出现故障宕机了怎么办呢？ <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030100.png" alt="在这里插入图片描述"> 面对这种情况，我们预想的最好解决方案就是增加一台nginx服务器作为备用代理服务器，从而做到高可用配置。 如下图所示，用户使用192.168.1.50发起请求，若master主服务器正常则会交由主服务器代理http请求，若主服务器出现故障则由备用服务器进行http代理请求</p><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030539.png" alt="在这里插入图片描述"></p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><ol><li>增加一台虚拟机安装nginx服务器</li><li>两台虚拟机都安装keepalived</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>yum install keepalived –y

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>配置keepalived</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>配置keepalived检查主机存货状态脚本
vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>src<span class="token operator">/</span>nginx_check<span class="token punctuation">.</span>sh 

# 粘贴下方内容
#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash
<span class="token class-name">A</span><span class="token operator">=</span>\`ps <span class="token operator">-</span><span class="token class-name">C</span> nginx –no<span class="token operator">-</span>header <span class="token operator">|</span>wc <span class="token operator">-</span>l\`
<span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token class-name">A</span> <span class="token operator">-</span>eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then
    <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx
    sleep <span class="token number">2</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> \`ps <span class="token operator">-</span><span class="token class-name">C</span> nginx <span class="token operator">--</span>no<span class="token operator">-</span>header <span class="token operator">|</span>wc <span class="token operator">-</span>l\` <span class="token operator">-</span>eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then
        killall keepalived
    fi
fi
vim cd <span class="token operator">/</span>etc<span class="token operator">/</span>keepalived<span class="token operator">/</span>keepalived<span class="token punctuation">.</span>conf #编辑keepalived的配置文件

# 直接将内容覆盖成如下配置 配置详情可见注释
global_defs <span class="token punctuation">{</span>
notification_email <span class="token punctuation">{</span>
acassen<span class="token annotation punctuation">@firewall.loc</span>
failover<span class="token annotation punctuation">@firewall.loc</span>
sysadmin<span class="token annotation punctuation">@firewall.loc</span>
<span class="token punctuation">}</span>
notification_email_from <span class="token class-name">Alexandre<span class="token punctuation">.</span>Cassen</span><span class="token annotation punctuation">@firewall.loc</span>
smtp_server <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.150</span> #本机ip地址
smtp_connect_timeout <span class="token number">30</span>
router_id <span class="token constant">LVS_DEVEL</span> # 本机设备名称，可使用命令 vim <span class="token operator">/</span>etc<span class="token operator">/</span>hosts 添加一行 <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token constant">LVS_DEVEL</span> 完成主机id配置
<span class="token punctuation">}</span>

# 下方为vrrp协议具体内容可参见百度
vrrp_script chk_http_port <span class="token punctuation">{</span>
script <span class="token string">&quot;/usr/local/src/nginx_check.sh&quot;</span> # 检查当前服务器是否存货的脚本路径
interval <span class="token number">2</span> #（检测脚本执行的间隔） 
weight <span class="token number">2</span>
<span class="token punctuation">}</span>
vrrp_instance <span class="token constant">VI_1</span> <span class="token punctuation">{</span>
state <span class="token constant">MASTER</span> # 备份服务器上将 <span class="token constant">MASTER</span> 改为 <span class="token constant">BACKUP</span>
<span class="token keyword">interface</span> ens33 <span class="token comment">//网卡</span>
virtual_router_id <span class="token number">51</span> # 主、备机的 virtual_router_id 必须相同
priority <span class="token number">100</span>
advert_int <span class="token number">1</span>
authentication <span class="token punctuation">{</span>
auth_type <span class="token constant">PASS</span>
auth_pass <span class="token number">1111</span>
<span class="token punctuation">}</span>
virtual_ipaddress <span class="token punctuation">{</span>
<span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.50</span> <span class="token comment">// VRRP H 虚拟地址</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>开启nginx</li><li>开启keepalive</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>systemctl start keepalived<span class="token punctuation">.</span>service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>测试 使用192.168.1.50访问，若可以访问将master主机keepalived以及nginx关闭，再进行访问，关闭命令如下</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>systemctl stop keepalived<span class="token punctuation">.</span>service
<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span>s stop

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030238.png" alt="在这里插入图片描述"></p><h2 id="nginx原理解析" tabindex="-1"><a class="header-anchor" href="#nginx原理解析"><span>nginx原理解析</span></a></h2><p>我们可以使用以下命令可以看到nginx的进程数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>ps <span class="token operator">-</span>ef <span class="token operator">|</span>grep nginx

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030031746.png" alt="image-20220903003104104"></p><p>可以看出nginx占用了两个进程，一个是master，一个是worker，在我们发起请求到nginx时，nginx的master会收到该请求，并将请求发送给每个worker，所有worker会参与争抢。某个worker得到该请求后，若该请求是个代理请求，worker则会转发该请求到目标服务器。如下图所示： <img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030031942.png" alt="在这里插入图片描述"> 那么问题来了，一个master搭配多个worker的好处有哪些呢？</p><ol><li>热部署时，刷新配置不影响正在工作的worker。比如，我们当前这台nginx正在工作。某个worker正在担任某个服务器代理。此时，我们在nginx配置中添加一个新的代理工作。使用 <code>./nginx -s reload</code>完成nginx重新加载，这时候就会又新的worker争抢这份工作。而之前已有工作的worker却不会收到影响。</li><li>每个worker是独立的进程。当某个worker出现问题时，其他worker不会收到影响。</li></ol><p>由此我们又会问，那么设置几个worker数为宜呢？ 与cpu数相等即可。比如八核就设置八个。</p><h2 id="杀死nginx所有进程" tabindex="-1"><a class="header-anchor" href="#杀死nginx所有进程"><span>杀死nginx所有进程</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>kill -9 $(ps aux | grep &#39;nginx&#39; | grep -v grep | tr -s &#39; &#39;| cut -d &#39; &#39; -f 2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="nginx其他问题" tabindex="-1"><a class="header-anchor" href="#nginx其他问题"><span>nginx其他问题</span></a></h2><p>(1) 发送一个请求时，master会占用worker几个连接数。</p><p>当只是请求静态资源时，只有<code>请求结果，返回结果</code>这样一趟也就是两个请求。若作为代理，则是<code>master-&gt;worker-&gt;目标服务器</code>+<code>目标服务器-&gt;worker-&gt;master</code>计算箭头数则是4个请求。</p><p>(2)假设nginx有一个master，和四个worker ，每个worker支持最大连接数为1024，支持的最大并发数为多少？ 普通静态访问为：<code>4*1024/2</code>(除2原因是因为一个静态请求有一趟往返，有一半的连接数处理返回结果了) 反向代理则是 <code>4*1024/4</code>(与上同理)</p><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h2><h3 id="nginx配置不生效" tabindex="-1"><a class="header-anchor" href="#nginx配置不生效"><span>nginx配置不生效</span></a></h3><h4 id="问题简述" tabindex="-1"><a class="header-anchor" href="#问题简述"><span>问题简述</span></a></h4><p>笔者在这段时间进行nginx配置时，进行正确的配置却发现配置没有生效，不断查看配置和reload没有发现问题所在。</p><h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h4><p>经过大佬排查很可能是nginx配置没有生效，将nginx所有进程杀死并重启nginx后配置就生效了，所以面对这类这类问题，在一切配置和部署方式都是正确的情况下，我们排查方向要从是否正确运行的方向进行思考。</p>`,80);function m(v,g){const e=t("ExternalLinkIcon");return l(),p("div",null,[r,a("p",null,[n("打开浏览器，在浏览器地址栏输入地址 "),a("a",d,[n("www.test.com"),o(e)]),n(" ，跳转到 linux系统 tomcat 主页中")]),u])}const b=i(c,[["render",m],["__file","Nginx基础入门.html.vue"]]),x=JSON.parse('{"path":"/%E5%B7%A5%E5%85%B7/Nginx/Nginx%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.html","title":"nginx基础入门","lang":"zh-CN","frontmatter":{"description":"nginx基础入门 nginx常用命令 nginx配置文件简介 nginx反向代理 简介 网站建立后，用户希望只需通过一个url即可访问网站。但是网站所使的服务器可能远不止一台(考虑到用户的访问量在多台服务器上配置tomcat)，所以如何访问通过一个url且还能保证服务器负载均衡的情况下完成用户访问我们的网站呢？nginx的反向代理就是最好的解决方案。...","head":[["meta",{"property":"og:url","content":"https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Nginx/Nginx%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"麦俊轩的博客"}],["meta",{"property":"og:title","content":"nginx基础入门"}],["meta",{"property":"og:description","content":"nginx基础入门 nginx常用命令 nginx配置文件简介 nginx反向代理 简介 网站建立后，用户希望只需通过一个url即可访问网站。但是网站所使的服务器可能远不止一台(考虑到用户的访问量在多台服务器上配置tomcat)，所以如何访问通过一个url且还能保证服务器负载均衡的情况下完成用户访问我们的网站呢？nginx的反向代理就是最好的解决方案。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030024451.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-13T07:51:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"nginx基础入门"}],["meta",{"property":"article:author","content":"maijunxuan"}],["meta",{"property":"article:modified_time","content":"2024-02-13T07:51:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nginx基础入门\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030024451.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030024240.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025806.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025517.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025867.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026552.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030025267.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026920.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026407.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030026433.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030028159.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030028558.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030029388.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030029013.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030029668.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030900.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030572.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030100.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030539.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030030238.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030031746.png\\",\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209030031942.png\\"],\\"dateModified\\":\\"2024-02-13T07:51:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"maijunxuan\\",\\"email\\":\\"maijunxuan0309@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"nginx常用命令","slug":"nginx常用命令","link":"#nginx常用命令","children":[]},{"level":2,"title":"nginx配置文件简介","slug":"nginx配置文件简介","link":"#nginx配置文件简介","children":[]},{"level":2,"title":"nginx反向代理","slug":"nginx反向代理","link":"#nginx反向代理","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"反向代理示例1","slug":"反向代理示例1","link":"#反向代理示例1","children":[]},{"level":3,"title":"反向代理示例2","slug":"反向代理示例2","link":"#反向代理示例2","children":[]}]},{"level":2,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[{"level":3,"title":"需求","slug":"需求-1","link":"#需求-1","children":[]},{"level":3,"title":"步骤","slug":"步骤-1","link":"#步骤-1","children":[]}]},{"level":2,"title":"动静分离","slug":"动静分离","link":"#动静分离","children":[{"level":3,"title":"模拟实验","slug":"模拟实验","link":"#模拟实验","children":[]},{"level":3,"title":"配置步骤","slug":"配置步骤","link":"#配置步骤","children":[]}]},{"level":2,"title":"高可用配置","slug":"高可用配置","link":"#高可用配置","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]}]},{"level":2,"title":"nginx原理解析","slug":"nginx原理解析","link":"#nginx原理解析","children":[]},{"level":2,"title":"杀死nginx所有进程","slug":"杀死nginx所有进程","link":"#杀死nginx所有进程","children":[]},{"level":2,"title":"nginx其他问题","slug":"nginx其他问题","link":"#nginx其他问题","children":[]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[{"level":3,"title":"nginx配置不生效","slug":"nginx配置不生效","link":"#nginx配置不生效","children":[]}]}],"git":{"createdTime":1662316251000,"updatedTime":1707810695000,"contributors":[{"name":"MJX","email":"1585225345@qq.com","commits":4},{"name":"maijunxuan","email":"mai.junxuan@xingyungroup.com","commits":1}]},"readingTime":{"minutes":9.24,"words":2773},"filePathRelative":"工具/Nginx/Nginx基础入门.md","localizedDate":"2022年9月4日","excerpt":"\\n<h2>nginx常用命令</h2>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code># 进入nginx目录\\ncd <span class=\\"token operator\\">/</span>usr<span class=\\"token operator\\">/</span>local<span class=\\"token operator\\">/</span>nginx<span class=\\"token operator\\">/</span>sbin\\n# 查看nginx版本号\\n<span class=\\"token punctuation\\">.</span>/nginx <span class=\\"token operator\\">-</span>v\\n\\n# 启动nginx\\n<span class=\\"token punctuation\\">.</span>/nginx\\n\\n# 停止nginx\\n<span class=\\"token punctuation\\">.</span>/nginx <span class=\\"token operator\\">-</span>s stop\\n\\n# 重新加载nginx\\n<span class=\\"token punctuation\\">.</span>/nginx <span class=\\"token operator\\">-</span>s reload\\n</code></pre></div>","autoDesc":true}');export{b as comp,x as data};
