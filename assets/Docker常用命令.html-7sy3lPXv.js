import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as e,a as n}from"./app-BJyX0H20.js";const i={},r=n(`<h2 id="docker命令" tabindex="-1"><a class="header-anchor" href="#docker命令"><span>Docker命令</span></a></h2><h3 id="docker安装" tabindex="-1"><a class="header-anchor" href="#docker安装"><span>Docker安装</span></a></h3><h5 id="查看linux版本" tabindex="-1"><a class="header-anchor" href="#查看linux版本"><span>查看Linux版本</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> /etc/redhat-release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="yum安装gcc相关" tabindex="-1"><a class="header-anchor" href="#yum安装gcc相关"><span>yum安装gcc相关</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc-c++
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="yum安装所需的工具包" tabindex="-1"><a class="header-anchor" href="#yum安装所需的工具包"><span>yum安装所需的工具包</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="设置镜像源为阿里云" tabindex="-1"><a class="header-anchor" href="#设置镜像源为阿里云"><span>设置镜像源为阿里云</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="更新yum软件包索引" tabindex="-1"><a class="header-anchor" href="#更新yum软件包索引"><span>更新yum软件包索引</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum makecache fast
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="安装docker-ce" tabindex="-1"><a class="header-anchor" href="#安装docker-ce"><span>安装docker ce</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="启动docker" tabindex="-1"><a class="header-anchor" href="#启动docker"><span>启动docker</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="查看docker版本" tabindex="-1"><a class="header-anchor" href="#查看docker版本"><span>查看docker版本</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="卸载docker" tabindex="-1"><a class="header-anchor" href="#卸载docker"><span>卸载docker</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl stop <span class="token function">docker</span>
yum remove docker-ce docker-ce-cli containerd.io
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/containerd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="获得阿里镜像源加速器" tabindex="-1"><a class="header-anchor" href="#获得阿里镜像源加速器"><span>获得阿里镜像源加速器</span></a></h5><p>打开阿里云的容器镜像服务-&gt;镜像工具-&gt;镜像加速器，获取加速器地址</p><p>在Centos里</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在里面创建一个文件，daemon.json</p><p>文件内容为，将加速器地址粘在这。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://xxxx.com&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="重启服务器" tabindex="-1"><a class="header-anchor" href="#重启服务器"><span>重启服务器</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl daemon-reload
systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动类命令" tabindex="-1"><a class="header-anchor" href="#启动类命令"><span>启动类命令</span></a></h3><h5 id="启动docker-1" tabindex="-1"><a class="header-anchor" href="#启动docker-1"><span>启动docker：</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="停止docker" tabindex="-1"><a class="header-anchor" href="#停止docker"><span>停止docker</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>system stop <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="重启docker" tabindex="-1"><a class="header-anchor" href="#重启docker"><span>重启docker</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="查看docker状态" tabindex="-1"><a class="header-anchor" href="#查看docker状态"><span>查看docker状态</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl status <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="开机启动" tabindex="-1"><a class="header-anchor" href="#开机启动"><span>开机启动</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="查看docker概要信息" tabindex="-1"><a class="header-anchor" href="#查看docker概要信息"><span>查看docker概要信息</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="docker镜像命令" tabindex="-1"><a class="header-anchor" href="#docker镜像命令"><span>Docker镜像命令</span></a></h3><h5 id="列出本地主机上的镜像" tabindex="-1"><a class="header-anchor" href="#列出本地主机上的镜像"><span>列出本地主机上的镜像</span></a></h5><p>参数说明：</p><ul><li>-a：列出本地所有的镜像（含历史映像层）</li><li>-q：只显示镜像ID</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="查找某个镜像" tabindex="-1"><a class="header-anchor" href="#查找某个镜像"><span>查找某个镜像</span></a></h5><p>参数说明：</p><ul><li>--limit：只列出N个镜像，默认25个</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> search 镜像名字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="拉取镜像" tabindex="-1"><a class="header-anchor" href="#拉取镜像"><span>拉取镜像</span></a></h5><p>如果不确定版本，可以去docker hub上找相对应的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull 镜像名字<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="查看镜像-容器-数据卷所占的空间" tabindex="-1"><a class="header-anchor" href="#查看镜像-容器-数据卷所占的空间"><span>查看镜像/容器/数据卷所占的空间</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> system <span class="token function">df</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="删除镜像" tabindex="-1"><a class="header-anchor" href="#删除镜像"><span>删除镜像</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>删除某个特定镜像，-f代表强制删除，如果已经有容器运行了该镜像，不加上-f是删除不掉的
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像ID
删除多个
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像名1:TAG 镜像名2:TAG
删除全部
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-qa</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker容器命令" tabindex="-1"><a class="header-anchor" href="#docker容器命令"><span>Docker容器命令</span></a></h3><h5 id="新建-启动容器" tabindex="-1"><a class="header-anchor" href="#新建-启动容器"><span>新建+启动容器</span></a></h5><p>参数说明：</p><ul><li>--name：指定容器新名称</li><li>-d：后台运行容器，即启动守护式容器</li><li>-i：以交互模式启动运行容器，与-t同时使用</li><li>-P：随机端口映射，大写P</li><li>-p：指定端口映射，小写p</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> image <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="列出正在运行的容器" tabindex="-1"><a class="header-anchor" href="#列出正在运行的容器"><span>列出正在运行的容器</span></a></h5><p>参数说明：</p><ul><li>-a：列出当前所有正在运行的容器+历史上运行过的</li><li>-l：显示最近创建的容器</li><li>-n：显示最近n个创建的容器</li><li>-q：静默模式，只显示容器编号</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="退出容器" tabindex="-1"><a class="header-anchor" href="#退出容器"><span>退出容器</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>如果是run进去的容器，使用exit退出，容器停止
如果是run进去的容器，使用ctrl+p+q，容器不停止
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="启动已停止运行的容器" tabindex="-1"><a class="header-anchor" href="#启动已停止运行的容器"><span>启动已停止运行的容器</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> start 容器ID或者容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="重启容器" tabindex="-1"><a class="header-anchor" href="#重启容器"><span>重启容器</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart 容器ID或者容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="停止容器" tabindex="-1"><a class="header-anchor" href="#停止容器"><span>停止容器</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop 容器ID或者容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="强制停止容器" tabindex="-1"><a class="header-anchor" href="#强制停止容器"><span>强制停止容器</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">kill</span> 容器ID或者容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="删除已停止的容器" tabindex="-1"><a class="header-anchor" href="#删除已停止的容器"><span>删除已停止的容器</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> 容器ID
一次性删除所有的容器（危险操作）
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="前台后台启动" tabindex="-1"><a class="header-anchor" href="#前台后台启动"><span>前台后台启动</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> 容器ID:TAG
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> 容器ID:TAG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="查看容器日志" tabindex="-1"><a class="header-anchor" href="#查看容器日志"><span>查看容器日志</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="查看容器内运行的进程" tabindex="-1"><a class="header-anchor" href="#查看容器内运行的进程"><span>查看容器内运行的进程</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">top</span> 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="查看容器内部细节" tabindex="-1"><a class="header-anchor" href="#查看容器内部细节"><span>查看容器内部细节</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="进入正在运行的容器并以命令行交互" tabindex="-1"><a class="header-anchor" href="#进入正在运行的容器并以命令行交互"><span>进入正在运行的容器并以命令行交互</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器id /bin/bash
<span class="token function">docker</span> attach 容器id

exec进入和attach的区别
attach是直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止。
exec是在容器中打开新的终端，并且可以启动新的进程，用exit退出，会导致容器的停止。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="从容器内拷贝文件到主机上" tabindex="-1"><a class="header-anchor" href="#从容器内拷贝文件到主机上"><span>从容器内拷贝文件到主机上</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> 容器id:容器内路径 目的主机路径
例:docker <span class="token function">cp</span> f1abwef244aa:/usr/local/mycptest/container.txt /tmp/c.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="导入和导出容器" tabindex="-1"><a class="header-anchor" href="#导入和导出容器"><span>导入和导出容器</span></a></h5><p><strong>导出</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>该命令会在当前目录下将该容器打包，形成一个镜像文件。
<span class="token function">docker</span> <span class="token builtin class-name">export</span> 容器id <span class="token operator">&gt;</span> abcd.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>导入</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> abcd.tar.gz <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - 镜像名:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="docker镜像commit操作" tabindex="-1"><a class="header-anchor" href="#docker镜像commit操作"><span>Docker镜像commit操作</span></a></h5><p>commit完后可以在docker images中查看到自己commit的容器</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;提交的描述信息&quot;</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;作者&quot;</span> 容器ID 要创建的目标镜像名:<span class="token punctuation">[</span>标签名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="在ubuntu下安装yum" tabindex="-1"><a class="header-anchor" href="#在ubuntu下安装yum"><span>在ubuntu下安装yum</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">apt-get</span> update
<span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="仓库操作" tabindex="-1"><a class="header-anchor" href="#仓库操作"><span>仓库操作</span></a></h3><h4 id="阿里云库" tabindex="-1"><a class="header-anchor" href="#阿里云库"><span>阿里云库</span></a></h4><h5 id="将自己commit的镜像推送到阿里云" tabindex="-1"><a class="header-anchor" href="#将自己commit的镜像推送到阿里云"><span>将自己commit的镜像推送到阿里云</span></a></h5><p>打开自己的仓库镜像，进入到管理界面获取脚本。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>登录
<span class="token function">docker</span> login <span class="token parameter variable">--username</span><span class="token operator">=</span>xxxxx registry.cn-shenzhen.aliyuncs.com
将镜像推送到Registry
<span class="token function">docker</span> tag 镜像id registry.cn-shenzhen.aliyuncs.com/镜像名:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>
<span class="token function">docker</span> push registry.cn-shenzhen.aliyuncs.com/镜像名:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="将阿里云上的镜像下载到本地" tabindex="-1"><a class="header-anchor" href="#将阿里云上的镜像下载到本地"><span>将阿里云上的镜像下载到本地</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull registry.cn-shenzhen.aliyuncs.com/镜像名:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="docker-registry私服" tabindex="-1"><a class="header-anchor" href="#docker-registry私服"><span>Docker Registry私服</span></a></h4><h5 id="先下载docker-registry镜像" tabindex="-1"><a class="header-anchor" href="#先下载docker-registry镜像"><span>先下载Docker Registry镜像</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="运行registry" tabindex="-1"><a class="header-anchor" href="#运行registry"><span>运行registry</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token parameter variable">-v</span> 宿主机目录:容器目录 <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="提交自定义的镜像" tabindex="-1"><a class="header-anchor" href="#提交自定义的镜像"><span>提交自定义的镜像</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="查看私服库上有什么镜像" tabindex="-1"><a class="header-anchor" href="#查看私服库上有什么镜像"><span>查看私服库上有什么镜像</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> http://本机ip:5000/v2/_catalog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="将新的镜像修改为符合私服规范的tag" tabindex="-1"><a class="header-anchor" href="#将新的镜像修改为符合私服规范的tag"><span>将新的镜像修改为符合私服规范的Tag</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag 镜像:Tag 本机ip:5000/镜像名称:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="修改配置文件daemon-json-加上insecure-registries使其支持http" tabindex="-1"><a class="header-anchor" href="#修改配置文件daemon-json-加上insecure-registries使其支持http"><span>修改配置文件daemon.json，加上insecure-registries使其支持http</span></a></h5><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://xxxx.com&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;insecure-registries&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;本机ip:5000&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="使用push目录推送到私服库" tabindex="-1"><a class="header-anchor" href="#使用push目录推送到私服库"><span>使用push目录推送到私服库</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> push 本机ip:5000/镜像名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="拉取私服镜像到本地" tabindex="-1"><a class="header-anchor" href="#拉取私服镜像到本地"><span>拉取私服镜像到本地</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker pull 本机ip:5000/镜像名:[TAG]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="docker容器卷" tabindex="-1"><a class="header-anchor" href="#docker容器卷"><span>Docker容器卷</span></a></h3><h5 id="容器卷挂载-宿主机与容器内文件双向绑定" tabindex="-1"><a class="header-anchor" href="#容器卷挂载-宿主机与容器内文件双向绑定"><span>容器卷挂载，宿主机与容器内文件双向绑定</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /宿主机绝对路径目录:/容器内目录 镜像名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="使用inspect命令查看是否绑定成功" tabindex="-1"><a class="header-anchor" href="#使用inspect命令查看是否绑定成功"><span>使用inspect命令查看是否绑定成功</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect 容器id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022310004.png" alt=""></p><h5 id="容器默认挂载是双向可读可写的" tabindex="-1"><a class="header-anchor" href="#容器默认挂载是双向可读可写的"><span>容器默认挂载是双向可读可写的</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>容器内对该目录可读可写
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /宿主机绝对路径目录:/容器内目录:rw 镜像名

容器内对该目录只可读
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /宿主机绝对路径目录:/容器内目录:ro 镜像名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="容器套娃挂载" tabindex="-1"><a class="header-anchor" href="#容器套娃挂载"><span>容器套娃挂载</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>容器1使用挂载命令与本机进行挂载后，容器2与容器1进行挂载
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /宿主机绝对路径目录:/容器内目录 <span class="token parameter variable">--name</span> 容器1名称 容器1镜像
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true --volumes-from 容器1名称 <span class="token parameter variable">--name</span> 容器2名称 容器2镜像
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker安装mysql" tabindex="-1"><a class="header-anchor" href="#docker安装mysql"><span>Docker安装MySQL</span></a></h3><h4 id="第一步-新建mysql容器实例" tabindex="-1"><a class="header-anchor" href="#第一步-新建mysql容器实例"><span>第一步：新建MySQL容器实例</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3320</span>:3306 <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /docker_mount/mysql3320/mysql/log:/var/log/mysql <span class="token parameter variable">-v</span> /docker_mount/mysql3320/mysql/data:/var/lib/mysql <span class="token parameter variable">-v</span> /docker_mount/mysql3320/mysql/conf:/etc/mysql/conf.d  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span><span class="token string">&quot;C.UTF-8&quot;</span> <span class="token parameter variable">--name</span> mysql3320 mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此台mysql部署在3320端口，并挂载数据在宿主机上。</p><h4 id="第二步-在宿主机上配置my-cnf" tabindex="-1"><a class="header-anchor" href="#第二步-在宿主机上配置my-cnf"><span>第二步：在宿主机上配置my.cnf</span></a></h4><div class="language-ini line-numbers-mode" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">client</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">default_character_set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">collation_server</span> <span class="token punctuation">=</span> <span class="token value attr-value">utf8_general_ci</span>
<span class="token key attr-name">character_set_server</span> <span class="token punctuation">=</span> <span class="token value attr-value">utf8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果连接慢的话，可以在[mysqld]下加上skip-name-resolve</p><h4 id="第三步-重新启动mysql" tabindex="-1"><a class="header-anchor" href="#第三步-重新启动mysql"><span>第三步：重新启动mysql</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：如果之前没有配置my.cnf就建了库和表的话，对于以前的库表的字符集配置文件配置的是不生效的。</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h4><p>该种方法配置的mysql容器，就算停止掉了，或者直接将该容器删除了，只要再次新建mysql容器的时候，挂载的数据卷一致，数据全部都能保留的。</p><h3 id="docker-portainer安装" tabindex="-1"><a class="header-anchor" href="#docker-portainer安装"><span>Docker-portainer安装</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">--name</span> portainer <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> /portainer_data:/data portainer/portainer-ce:2.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,149),t=[r];function l(d,c){return s(),e("div",null,t)}const u=a(i,[["render",l],["__file","Docker常用命令.html.vue"]]),h=JSON.parse('{"path":"/%E5%B7%A5%E5%85%B7/Docker/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","title":"","lang":"zh-CN","frontmatter":{"description":"Docker命令 Docker安装 查看Linux版本 yum安装gcc相关 yum安装所需的工具包 设置镜像源为阿里云 更新yum软件包索引 安装docker ce 启动docker 查看docker版本 卸载docker 获得阿里镜像源加速器 打开阿里云的容器镜像服务->镜像工具->镜像加速器，获取加速器地址 在Centos里 在里面创建一个文件，...","head":[["meta",{"property":"og:url","content":"https://maijunxuan.cn/%E5%B7%A5%E5%85%B7/Docker/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"麦俊轩的博客"}],["meta",{"property":"og:description","content":"Docker命令 Docker安装 查看Linux版本 yum安装gcc相关 yum安装所需的工具包 设置镜像源为阿里云 更新yum软件包索引 安装docker ce 启动docker 查看docker版本 卸载docker 获得阿里镜像源加速器 打开阿里云的容器镜像服务->镜像工具->镜像加速器，获取加速器地址 在Centos里 在里面创建一个文件，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022310004.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-13T21:01:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"property":"article:author","content":"maijunxuan"}],["meta",{"property":"article:modified_time","content":"2023-06-13T21:01:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/mai-junxuan/Cloud-image/image/202209022310004.png\\"],\\"dateModified\\":\\"2023-06-13T21:01:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"maijunxuan\\",\\"email\\":\\"maijunxuan0309@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"Docker命令","slug":"docker命令","link":"#docker命令","children":[{"level":3,"title":"Docker安装","slug":"docker安装","link":"#docker安装","children":[]},{"level":3,"title":"启动类命令","slug":"启动类命令","link":"#启动类命令","children":[]},{"level":3,"title":"Docker镜像命令","slug":"docker镜像命令","link":"#docker镜像命令","children":[]},{"level":3,"title":"Docker容器命令","slug":"docker容器命令","link":"#docker容器命令","children":[]},{"level":3,"title":"仓库操作","slug":"仓库操作","link":"#仓库操作","children":[]},{"level":3,"title":"Docker容器卷","slug":"docker容器卷","link":"#docker容器卷","children":[]},{"level":3,"title":"Docker安装MySQL","slug":"docker安装mysql","link":"#docker安装mysql","children":[]},{"level":3,"title":"Docker-portainer安装","slug":"docker-portainer安装","link":"#docker-portainer安装","children":[]}]}],"git":{"createdTime":1662316251000,"updatedTime":1686690095000,"contributors":[{"name":"MJX","email":"1585225345@qq.com","commits":3}]},"readingTime":{"minutes":6.29,"words":1887},"filePathRelative":"工具/Docker/Docker常用命令.md","localizedDate":"2022年9月4日","excerpt":"<h2>Docker命令</h2>\\n<h3>Docker安装</h3>\\n<h5>查看Linux版本</h5>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">cat</span> /etc/redhat-release\\n</code></pre></div><h5>yum安装gcc相关</h5>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>yum <span class=\\"token parameter variable\\">-y</span> <span class=\\"token function\\">install</span> gcc\\nyum <span class=\\"token parameter variable\\">-y</span> <span class=\\"token function\\">install</span> gcc-c++\\n</code></pre></div>","autoDesc":true}');export{u as comp,h as data};
